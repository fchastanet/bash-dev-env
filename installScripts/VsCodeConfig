#!/usr/bin/env bash
###############################################################################
# GENERATED FROM https://github.com/fchastanet/bash-dev-env/tree/master/src/_installScripts/_Configs/VsCodeConfig-binary.yaml
# DO NOT EDIT IT
# @generated
###############################################################################
# shellcheck disable=SC2288,SC2034



# ensure that no user aliases could interfere with
# commands used in this script
unalias -a || true
shopt -u expand_aliases

# shellcheck disable=SC2034
((failures = 0)) || true

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# Command Substitution can inherit errexit option since bash v4.4
shopt -s inherit_errexit || true

# if set, and job control is not active, the shell runs the last command
# of a pipeline not executed in the background in the current shell
# environment.
shopt -s lastpipe

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file
# matches the wildcard
shopt -s nullglob

# ensure regexp are interpreted without accentuated characters
export LC_ALL=POSIX

export TERM=xterm-256color

# avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# store command arguments for later usage
# shellcheck disable=SC2034
declare -a BASH_FRAMEWORK_ARGV=("$@")
# shellcheck disable=SC2034
declare -a ORIGINAL_BASH_FRAMEWORK_ARGV=("$@")

# @see https://unix.stackexchange.com/a/386856
# shellcheck disable=SC2317
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT

################################################
# Temp dir management
################################################

KEEP_TEMP_FILES="${KEEP_TEMP_FILES:-0}"
export KEEP_TEMP_FILES

# PERSISTENT_TMPDIR is not deleted by traps
PERSISTENT_TMPDIR="${TMPDIR:-/tmp}/bash-framework"
export PERSISTENT_TMPDIR
if [[ ! -d "${PERSISTENT_TMPDIR}" ]]; then
  mkdir -p "${PERSISTENT_TMPDIR}"
fi

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${PERSISTENT_TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
# shellcheck disable=SC2317
cleanOnExit() {
  local rc=$?
  if [[ "${KEEP_TEMP_FILES:-0}" = "1" ]]; then
    Log::displayInfo "KEEP_TEMP_FILES=1 temp files kept here '${TMPDIR}'"
  elif [[ -n "${TMPDIR+xxx}" ]]; then
    Log::displayDebug "KEEP_TEMP_FILES=0 removing temp files '${TMPDIR}'"
    rm -Rf "${TMPDIR:-/tmp/fake}" >/dev/null 2>&1
  fi
  exit "${rc}"
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM


SCRIPT_NAME=${0##*/}
REAL_SCRIPT_FILE="$(readlink -e "$(realpath "${BASH_SOURCE[0]}")")"
if [[ -n "${EMBED_CURRENT_DIR}" ]]; then
  CURRENT_DIR="${EMBED_CURRENT_DIR}"
else
  CURRENT_DIR="${REAL_SCRIPT_FILE%/*}"
fi
FRAMEWORK_ROOT_DIR="$(cd "${CURRENT_DIR}/.." && pwd -P)"
FRAMEWORK_SRC_DIR="${FRAMEWORK_ROOT_DIR}/src"
FRAMEWORK_BIN_DIR="${FRAMEWORK_ROOT_DIR}/bin"
FRAMEWORK_VENDOR_DIR="${FRAMEWORK_ROOT_DIR}/vendor"
FRAMEWORK_VENDOR_BIN_DIR="${FRAMEWORK_ROOT_DIR}/vendor/bin"

# @description Log namespace provides 2 kind of functions
# - Log::display* allows to display given message with
#   given display level
# - Log::log* allows to log given message with
#   given log level
# Log::display* functions automatically log the message too
# @see Env::requireLoad to load the display and log level from .env file

# @description log level off
export __LEVEL_OFF=0
# @description log level error
export __LEVEL_ERROR=1
# @description log level warning
export __LEVEL_WARNING=2
# @description log level info
export __LEVEL_INFO=3
# @description log level success
export __LEVEL_SUCCESS=3
# @description log level debug
export __LEVEL_DEBUG=4

# @description verbose level off
export __VERBOSE_LEVEL_OFF=0
# @description verbose level info
export __VERBOSE_LEVEL_INFO=1
# @description verbose level info
export __VERBOSE_LEVEL_DEBUG=2
# @description verbose level info
export __VERBOSE_LEVEL_TRACE=3


# @description check if an element is contained in an array
#
# @arg $1 needle:String
# @arg $@ array:String[]
# @exitcode 0 if found
# @exitcode 1 otherwise
# @example
#   Array::contains "${libPath}" "${__BASH_FRAMEWORK_IMPORTED_FILES[@]}"
Array::contains() {
  local element
  for element in "${@:2}"; do
    [[ "${element}" = "$1" ]] && return 0
  done
  return 1
}


# @description concatenate each element of an array with a separator
# but wrapping text when line length is more than provided argument
# The algorithm will try not to cut the array element if it can.
# - if an arg can be placed on current line it will be,
#   otherwise current line is printed and arg is added to the new
#   current line
# - Empty arg is interpreted as a new line.
# - Add \r to arg in order to force break line and avoid following
#   arg to be concatenated with current arg.
#
# @arg $1 glue:String
# @arg $2 maxLineLength:int
# @arg $3 indentNextLine:int
# @arg $@ array:String[]
Array::wrap2() {
  local glue="${1-}"
  local -i glueLength="${#glue}"
  shift || true
  local -i maxLineLength=$1
  shift || true
  local -i indentNextLine=$1
  shift || true
  local indentStr=""
  if ((indentNextLine > 0)); then
    indentStr="$(head -c "${indentNextLine}" </dev/zero | tr '\0' " ")"
  fi
  if (($# == 0)); then
    return 0
  fi

  printCurrentLine() {
    if ((isNewline == 0)) || ((previousLineEmpty == 1)); then
      echo
    fi
    ((isNewline = 1))
    echo -en "${indentStr}"
    ((currentLineLength = indentNextLine)) || true
  }
  appendToCurrentLine() {
    local text="$1"
    local -i length=$2
    ((currentLineLength += length)) || true
    ((isNewline = 0)) || true
    if [[ "${text: -1}" = $'\r' ]]; then
      text="${text:0:-1}"
      echo -en "${text%%+([[:blank:]])}"
      printCurrentLine
    else
      echo -en "${text%%+([[:blank:]])}"
    fi
  }

  (
    local currentLine
    local -i currentLineLength=0 isNewline=1 argLength=0
    local -a additionalLines
    local -i previousLineEmpty=0
    local arg=""

    while (($# > 0)); do
      arg="$1"
      shift || true

      # replace tab by 2 spaces
      arg="${arg//$'\t'/  }"
      # remove trailing spaces
      arg="${arg%[[:blank:]]}"
      if [[ "${arg}" = $'\n' || -z "${arg}" ]]; then
        printCurrentLine
        ((previousLineEmpty = 1))
        continue
      else
        if ((previousLineEmpty == 1)); then
          printCurrentLine
        fi
        ((previousLineEmpty = 0)) || true
      fi
      # convert eol to args
      mapfile -t additionalLines <<<"${arg}"
      if ((${#additionalLines[@]} > 1)); then
        set -- "${additionalLines[@]}" "$@"
        continue
      fi

      ((argLength = ${#arg})) || true

      # empty arg
      if ((argLength == 0)); then
        if ((isNewline == 0)); then
          # isNewline = 0 means currentLine is not empty
          printCurrentLine
        fi
        continue
      fi

      if ((isNewline == 0)); then
        glueLength="${#glue}"
      else
        glueLength="0"
      fi
      if ((currentLineLength + argLength + glueLength > maxLineLength)); then
        if ((argLength + glueLength > maxLineLength)); then
          # arg is too long to even fit on one line
          # we have to split the arg on current and next line
          local -i remainingLineLength
          ((remainingLineLength = maxLineLength - currentLineLength - glueLength))
          appendToCurrentLine "${glue:0:${glueLength}}${arg:0:${remainingLineLength}}" "$((glueLength + remainingLineLength))"
          printCurrentLine
          arg="${arg:${remainingLineLength}}"
          # remove leading spaces
          arg="${arg##[[:blank:]]}"

          set -- "${arg}" "$@"
        else
          # the arg can fit on next line
          printCurrentLine
          appendToCurrentLine "${arg}" "${argLength}"
        fi
      else
        appendToCurrentLine "${glue:0:${glueLength}}${arg}" "$((glueLength + argLength))"
      fi
    done
    if [[ "${currentLine}" != "" ]] && [[ ! "${currentLine}" =~ ^[\ \t]+$ ]]; then
      printCurrentLine
    fi
  ) | sed -E -e 's/[[:blank:]]+$//'
}


# @description check if command specified exists or return 1
# with error and message if not
#
# @arg $1 commandName:String on which existence must be checked
# @arg $2 helpIfNotExists:String a help command to display if the command does not exist
#
# @exitcode 1 if the command specified does not exist
# @stderr diagnostic information + help if second argument is provided
Assert::commandExists() {
  local commandName="$1"
  local helpIfNotExists="$2"

  "${BASH_FRAMEWORK_COMMAND:-command}" -v "${commandName}" >/dev/null 2>/dev/null || {
    Log::displayError "${commandName} is not installed, please install it"
    if [[ -n "${helpIfNotExists}" ]]; then
      Log::displayInfo "${helpIfNotExists}"
    fi
    return 1
  }
  return 0
}


# @description check if param is valid email address
# @warning it is a very simple check, no RFC validation
# @arg $1 emailAddress:String the full email address
# @exitcode 1 if invalid email address
Assert::emailAddress() {
  local expectedRegexp="^\S+@\S+$"

  [[ "$1" =~ ${expectedRegexp} ]]
}


# @description asserts that first argument is file that exists with specified ownership
# @arg $1 file:String
# @arg $2 user:String expected owner user name of the file (default: USERNAME or id -un command)
# @arg $3 group:String expected owner group name of the file (default: USERGROUP or id -gn command)
# @env USERNAME String if arg $2 is not provided
# @env USERGROUP String if arg $3 is not provided
# @env SUDO String allows to use custom sudo prefix command
# @exitcode 1 if missing file
# @exitcode 2 if incorrect user ownership
# @exitcode 3 if incorrect group ownership
# @stderr diagnostics information is displayed
Assert::fileExists() {
  local file="$1"
  local user="${2:-${USERNAME}}"
  local group="${3:-${USERGROUP}}"
  if [[ -n "${user}" ]]; then
    Log::displayInfo "Check ${file} exists with user ${user}:${group}"
  else
    Log::displayInfo "Check ${file} exists"
  fi
  if ! ${SUDO:-} test -f "${file}" &>/dev/null; then
    Log::displayError "missing file ${file}"
    return 1
  fi
  if [[ -n "${user}" && "${user}" != "$(${SUDO:-} stat -c '%U' "${file}")" ]]; then
    Log::displayError "incorrect user ownership on file ${file}"
    return 2
  fi
  if [[ -n "${group}" && "${group}" != "$(${SUDO:-} stat -c '%G' "${file}")" ]]; then
    Log::displayError "incorrect group ownership on file ${file}"
    return 3
  fi
}


# @description check if argument respects 2 or more words separated by a space
# it supports accentuated characters and names with hyphen(-)
# @arg $1 firstNameLastName:String
# @exitcode 1 if regexp not matches
# @see https://regex101.com/r/JyyfOM/1
Assert::firstNameLastName() {
  local regexp="^[^ ]+([ ][^ ]+)+$"
  [[ $1 =~ ${regexp} ]]
}


# @description checks if function name provided exists
# @arg $1 functionName:String
# @exitcode 1 if function name doesn't exist
Assert::functionExists() {
  declare -F "$1" >/dev/null
}


# @description check if argument respects ldap login naming convention
# only using lowercase characters a-z
# @arg $1 ldapLogin:String
# @exitcode 1 if regexp not matches
Assert::ldapLogin() {
  [[ $1 =~ ^[a-z]+$ ]]
}


# @description check if tty (interactive mode) is active
# @noargs
# @exitcode 1 if tty not active
# @env NON_INTERACTIVE if 1 consider as not interactive even if environment is interactive
# @env INTERACTIVE if 1 consider as interactive even if environment is not interactive
Assert::tty() {
  if [[ "${NON_INTERACTIVE:-0}" = "1" ]]; then
    return 1
  fi
  if [[ "${INTERACTIVE:-0}" = "1" ]]; then
    return 0
  fi
  tty -s
}


# @description check if argument respects this framework variable naming convention
# - if variable begins with an uppercase or underscore, following letters have to be uppercase or underscore
# - variable name can includes ':' or '_' or digits but not as first letter
# here valid variable name examples
#
# @arg $1 variableName:String
# @exitcode 1 if regexp not matches
# @see https://regex101.com/r/BUlPXS/1
Assert::validVariableName() {
  [[ "$1" =~ (^[a-z][A-Za-z_0-9:]+$)|(^[A-Z_][A-Z_0-9:]+$) ]]
}


# @description checks if variable name provided exists
# @arg $1 varName:String
# @exitcode 1 if variable doesn't exist
# @exitcode 2 if variable value empty
# @exitcode 3 if variable name invalid
# @see Assert::validVariableName
# @stderr diagnostics information is displayed
Assert::varExistsAndNotEmpty() {
  local varName="$1"
  if ! Assert::validVariableName "${varName}"; then
    Log::displayError "${varName} - invalid variable name"
    return 3
  fi
  if [[ -z "${!varName+unset}" ]]; then
    Log::displayError "${varName} - not defined"
    return 1
  elif [[ -z "${!varName}" ]]; then
    Log::displayError "${varName} - please provide a value"
    return 2
  fi
}


# @description determine if the script is executed under WSL
# cspell:disable
# @example text
#   uname GitBash windows (with wsl) => MINGW64_NT-10.0 ZOXFL-6619QN2 2.10.0(0.325/5/3) 2018-06-13 23:34 x86_64 Msys
#   uname GitBash windows (wo wsl)   => MINGW64_NT-10.0 frsa02-j5cbkc2 2.9.0(0.318/5/3) 2018-01-12 23:37 x86_64 Msys
#   uname wsl => Linux ZOXFL-6619QN2 4.4.0-17134-Microsoft #112-Microsoft Thu Jun 07 22:57:00 PST 2018 x86_64 x86_64 x86_64 GNU/Linux
# cspell:enable
#
# @exitcode 1 on error
Assert::wsl() {
  [[ "$(uname -o)" = "GNU/Linux" ]]
}


# @description Backup given file in the same directory or in BACKUP_DIR directory
# backup file name is composed by following fields separated by -:
#   - if BACKUP_DIR is not empty then escaped dir name separated by @
#   - filename(without path)
#   - date with format %Y%m%d_%H:%M:%S (Eg: 20240326_14:45:08)
# @arg $1 file:String the file to backup
# @stderr messages about backup file location
# @env SUDO String allows to use custom sudo prefix command
# @env BACKUP_DIR if not set backup the file in the same directory as original file
# @exitcode 1 on copy failure
Backup::file() {
  local file="$1"
  if [[ -f "${file}" ]]; then
    local backupFile fileDirname escapedDirname
    fileDirname="${file%/*}"
    escapedDirname=${fileDirname/\//}      # remove first slash
    escapedDirname=${escapedDirname//\//@} # replace all slashes by @
    if [[ -z "${BACKUP_DIR:-}" ]]; then
      backupFile="${fileDirname}/${file##*/}-$(date +"%Y%m%d_%H:%M:%S")"
    else
      backupFile="${BACKUP_DIR}/${escapedDirname}@${file##*/}-$(date +"%Y%m%d_%H:%M:%S")"
    fi
    Log::displayInfo "Backup file '${file}' to ${backupFile}"
    ${SUDO:-} cp "${file}" "${backupFile}"
  fi
}


# @description get property value from file
# if not present compute it using propertyNotFoundCallback (if provided) and store it in property file
# @arg $1 propertyFile:String the file in which the property will be searched
# @arg $2 key:String the property key to search in property file
# @arg $3 propertyNotFoundCallback:Function (optional) a callback to call if property key is not found in property file
# @arg $@ args:String[] (optional) the arguments to pass to the propertyNotFoundCallback
# @exitcode 1 if value is not found
# @exitcode * if propertyNotFoundCallback fails
# @stdout the property value given by property file or by the propertyNotFoundCallback
Cache::getPropertyValue2() {
  local propertyFile="$1"
  local -n propertiesMap=$2
  local -n getPropertyValue2_val=$3
  local key="$4"
  local propertyNotFoundCallback=$5
  shift 5 || true
  local -a args=("$@")

  if [[ "${#propertiesMap[@]}" = "0" && -s "${propertyFile}" ]]; then
    local line
    while IFS="" read -r line; do
      if [[ "${line}" =~ ^([^=]+)=(.+)$ ]]; then
        propertiesMap["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
      fi
    done <"${propertyFile}"
  fi

  if [[ -n "${propertiesMap[${key}]+abc}" ]]; then
    getPropertyValue2_val="${propertiesMap[${key}]}"
    return 0
  elif [[ "$(type -t "${propertyNotFoundCallback}")" = "function" ]]; then
    getPropertyValue2_val="$("${propertyNotFoundCallback}" "${args[@]}")" || return $?
    propertiesMap["${key}"]="${getPropertyValue2_val}"
    echo "${key}=${getPropertyValue2_val}" >>"${propertyFile}"
    return 0
  fi
  return 1
}


# @description convert base64 encoded back to target dir
# it is advised to include the md5sum of the binFile in the path of the target dir
#
# @arg $1 targetDir:string the directory in which tar archive will be untarred
# @arg $2 base64:string the base64 encoded tar czf archive
# @stderr diagnostics information is displayed
Compiler::Embed::extractDirFromBase64() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_TAR_COMMAND_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireTarCommand has not been loaded"
    exit 1
  fi

  local targetDir="$1"
  local base64="$2"

  if [[ ! -d "${targetDir}" ]]; then
    mkdir -p "${targetDir}"
    (
      cd "${targetDir}" || exit 1
      tr -d '\n ' <<<"${base64}" | base64 -d | tar -xzf - 2>/dev/null || {
        Log::displayError "untar failure, invalid base64 string"
        exit 1
      }
    ) || return 1
  fi
}


# @description convert base64 encoded back to target file
# if target file is executable prepend dir of target
# file to PATH to make binary available everywhere
# it is advised to include in the path of the target file
# the md5sum of the binFile
#
# @arg $1 targetFile:String the file to write
# @arg $2 binFileBase64:String the base64 encoded file
# @arg $3 fileMode:String the chmod to set on the file
# @set PATH String prepend target embedded file binary directory to PATH variable if binary executable
Compiler::Embed::extractFileFromBase64() {
  local targetFile="$1"
  local binFileBase64="$2"
  local fileMode="${3:-+x}"
  local targetDir="${targetFile%/*}"

  if [[ ! -f "${targetFile}" ]]; then
    if [[ ! -d "${targetDir}" ]]; then
      mkdir -p "${targetDir}"
    fi
    tr -d '\n ' <<<"${binFileBase64}" | base64 -d >"${targetFile}"
    chmod "${fileMode}" "${targetFile}"
  fi

  if [[ -x "${targetFile}" ]]; then
    Env::pathPrepend "${targetDir}"
  fi
}


# @description generate temp directory where default
# and overridden directories have been merged
#   - if overridden dir exists, create a new temp folder
#     - copy all files from default folder
#     - overwrite with files from overridden folder
#     - (Later) delete files listed in .remove$$ file
#     - return the path of this temp folder
#   - else just return the default folder path
# Then it is easier to pick overridden or default files/folders
#
# @arg $1 defaultDir:String usually the embed directory
# @arg $2 overriddenDirPath:String the path to the directory
#   that could be overridden
# @exitcode 1 if default dir does not exist
# @exitcode 2 if error during copy
Conf::getOverriddenDir() {
  local -a overriddenDirPaths=("$@")
  local overriddenDirPath

  local tempDir
  tempDir="$(mktemp -d)"
  (
    shopt -s dotglob
    for overriddenDirPath in "${overriddenDirPaths[@]}"; do
      if [[ -d "${overriddenDirPath}" && -n "$(ls -A "${overriddenDirPath}" || true)" ]]; then
        Log::displayInfo "Conf::getOverriddenDir - use overridden files from ${overriddenDirPath}"
        cp -R "${overriddenDirPath}/." "${tempDir}"
      else
        if [[ -z "${overriddenDirPath}" ]]; then
          Log::displayError "Conf::getOverriddenDir - empty overridden directory path"
        else
          Log::displayInfo "Conf::getOverriddenDir - directory ${overriddenDirPath} does not exist or is empty"
        fi
      fi
    done
  ) || {
    Log::displayError "Conf::getOverriddenDir - error during copy"
    return 2
  }
  echo "${tempDir}"
}


# @description list files of dir with given extension and display it as a list one by line
#
# @arg $1 dir:String the directory to list
# @arg $2 prefix:String the profile file prefix (default: "")
# @arg $3 ext:String the extension
# @arg $4 findOptions:String find options, eg: -type d (Default value: '-type f')
# @arg $5 indentStr:String the indentation can be any string compatible with sed not containing any / (Default value: '       - ')
# @stdout list of files without extension/directory
# @example text
#       - default.local
#       - default.remote
#       - localhost-root
# @exitcode 1 if directory does not exists
Conf::list() {
  local dir="$1"
  local prefix="${2:-}"
  local ext="${3}"
  local findOptions="${4--type f}"
  local indentStr="${5-       - }"

  if [[ ! -d "${dir}" ]]; then
    Log::displayError "Directory ${dir} does not exist"
  fi
  if [[ -n "${ext}" && "${ext:0:1}" != "." ]]; then
    ext=".${ext}"
  fi
  (
    # shellcheck disable=SC2086
    cd "${dir}" &&
      find . -maxdepth 1 ${findOptions} -name "${prefix}*${ext}" |
      sed -E "s#^\./${prefix}##g" |
        sed -E "s#${ext}\$##g" | sort | sed -E "s#^#${indentStr}#"
  )
}


# @description Load the nearest config file
# in next example will search first .framework-config file in "srcDir1"
# then if not found will go in up directories until /
# then will search in "srcDir2"
# then if not found will go in up directories until /
# source the file if found
# @example
#   Conf::loadNearestFile ".framework-config" "srcDir1" "srcDir2"
#
# @arg $1 configFileName:String config file name to search
# @arg $2 loadedFile:String (passed by reference) will return the loaded config file name
# @arg $@ srcDirs:String[] source directories in which the config file will be searched
# @exitcode 0 if file found
# @exitcode 1 if file not found
Conf::loadNearestFile() {
  local configFileName="$1"
  local -n loadedFile="$2"
  shift 2 || true
  local -a srcDirs=("$@")
  for srcDir in "${srcDirs[@]}"; do
    configFile="$(File::upFind "${srcDir}" "${configFileName}" || true)"
    if [[ -n "${configFile}" ]]; then
      # shellcheck source=/.framework-config
      source "${configFile}" || Log::fatal "error while loading config file '${configFile}'"
      Log::displayDebug "Config file ${configFile} is loaded"
      # shellcheck disable=SC2034
      loadedFile="${configFile}"
      return 0
    fi
  done

  Log::displayDebug "Config file '${configFileName}' not found in any source directories provided"
  return 1
}


# @description check validity of .env variables
# @env CHECK_ENV int 0 to avoid checking environment
# @noargs
Engine::Config::checkEnv() {
  local envFile="$1"
  if [[ "${CHECK_ENV:-1}" = "0" ]]; then
    return 0
  fi
  # avoid checks if .env file didn't changed
  local envFileMd5Cache="${PERSISTENT_TMPDIR:-/tmp}/bash-dev-env-enf-file-checksum"
  if md5sum -c "${envFileMd5Cache}" &>/dev/null; then
    return 0
  else
    md5sum "${envFile}" >"${envFileMd5Cache}"
  fi
  local errorCount=0 || true
  checkNotEmpty() {
    local var="$1"
    if ! Assert::varExistsAndNotEmpty "${var}"; then
      ((++errorCount))
      return 1
    fi
  }
  checkVarAndDir() {
    local var="$1"
    local mode="${2:-}"
    local status=0
    if checkNotEmpty "${var}"; then
      if [[ ! -d "${!var}" ]] && ! mkdir -p "${!var}"; then
        Log::displayError "variable ${var} - impossible to create the directory '${!var}'"
        ((errorCount++))
        return 1
      fi
      if [[ "${mode}" =~ w && ! -w "${!var}" ]]; then
        Log::displayError "variable ${var} - directory '${!var}' is not writable"
        ((status++))
        ((errorCount++))
      fi
      if [[ "${mode}" =~ r && ! -r "${!var}" ]]; then
        Log::displayError "variable ${var} - directory '${!var}' is not accessible"
        ((status++))
        ((errorCount++))
      fi
    fi

    return "${status}"
  }
  checkValidValues() {
    local var="$1"
    shift || true
    local -a validValues=("$@")
    if ! Array::contains "${!var}" "${validValues[@]}"; then
      Log::displayError "variable ${var} - value ${!var} is not part of the following values ${validValues[*]}"
      ((++errorCount))
    fi
  }
  checkIsArray() {
    local var="$1"
    declare -p "${var}" 2>/dev/null | grep -q 'declare \-a'
  }

  if ! echo "${ID}" | grep -qEw 'debian|ubuntu'; then
    Log::fatal "This script is built to support only Debian or Ubuntu distributions. You are using ${ID}."
  fi

  if checkNotEmpty USERNAME && ! getent passwd "${USERNAME}" 2>/dev/null >/dev/null; then
    Log::displayError "USERNAME - user '${USERNAME}' does not exist"
    ((errorCount++))
  fi

  if [[ -n "${SSH_LOGIN:-}" ]] && ! Assert::ldapLogin "${SSH_LOGIN}"; then
    Log::displayError "SSH_LOGIN - invalid ldap login (format expected firstNameLastName) in ${BASH_DEV_ENV_ROOT_DIR}/.env file"
    ((errorCount++))
  fi

  if checkNotEmpty "GIT_USERNAME" && ! Assert::firstNameLastName "${GIT_USERNAME}"; then
    Log::displayError "GIT_USERNAME - invalid format, expected : firstName lastName"
    ((errorCount++))
  fi

  if checkNotEmpty "GIT_USER_MAIL" && ! Assert::emailAddress "${GIT_USER_MAIL}"; then
    Log::displayError "GIT_USER_MAIL - invalid email address"
    ((errorCount++))
  fi

  if checkNotEmpty "AWS_USER_MAIL" && ! Assert::emailAddress "${AWS_USER_MAIL}"; then
    Log::displayError "AWS_USER_MAIL - invalid email address"
    ((errorCount++))
  fi

  if ! checkIsArray "CONF_OVERRIDE_DIRS"; then
    Log::displayError "CONF_OVERRIDE_DIRS - invalid format, expected : array of strings"
    ((errorCount++))
  fi
  ((i = 0)) || true
  local dir
  for dir in "${CONF_OVERRIDE_DIRS[@]}"; do
    if [[ ! -d "${dir}" ]]; then
      Log::displayError "CONF_OVERRIDE_DIRS[${i}] - directory '${dir}' does not exist"
      ((errorCount++))
    fi
    if [[ ! -r "${dir}" ]]; then
      Log::displayError "CONF_OVERRIDE_DIRS[${i}] - directory '${dir}' is not readable"
      ((errorCount++))
    fi
    ((++i))
  done
  checkVarAndDir PROJECTS_DIR r || true
  checkVarAndDir BACKUP_DIR rw || true
  checkVarAndDir LOGS_DIR rw || true
  checkVarAndDir INSTALL_SCRIPTS_ROOT_DIR r || true
  checkVarAndDir HOME rw || true

  checkValidValues UPGRADE_UBUNTU_VERSION 0 lts dev
  checkValidValues PREFERRED_SHELL ShellBash ShellZsh
  checkValidValues ZSH_PREFERRED_THEME ohmyposh powerlevel10k/powerlevel10k sindresorhus/pure starship/starship

  checkValidValues SHOW_FORTUNES 0 1
  checkValidValues SHOW_MOTD 0 1
  checkValidValues OVERWRITE_CONFIG_FILES 0 1
  checkValidValues CHANGE_WINDOWS_FILES 0 1
  checkValidValues CAN_TALK_DURING_INSTALLATION 0 1
  checkValidValues INSTALL_INTERACTIVE 0 1

  checkNotEmpty WSLCONFIG_MAX_MEMORY
  checkValidValues WSLCONFIG_SWAP 0 1
  export CHECK_ENV=0
  return "${errorCount}"
}


# @description if .env does not exist, initialize it with .env.template
Engine::Config::createEnvFileFromTemplate() {
  local envFile="$1"
  local envFileTemplate="$2"

  if [[ ! -f "${envFile}" ]]; then
    echo "${envFileTemplate}" >"${envFile}"
    Log::displayError "a default env file has been created, please edit ${envFile}"
    return 1
  fi
}


# @description load .env file
# @arg $1 envFile:String the file to load
Engine::Config::loadConfig() {
  if [[ "${BASH_DEV_ENV_CONFIG_LOADED:-0}" = "1" ]]; then
    return 0
  fi
Linux::requireTarCommand
Compiler::Embed::extractFileFromBase64 \
  "${PERSISTENT_TMPDIR:-/tmp}/e45723bdbf29adda89f24f72a94da7e21df12389872dca4558684132a580a936/envFileTemplate" \
  "IyEvYmluL2Jhc2gKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CgojIC0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tCiMgR2VuZXJhbCBpbmZvcm1hdGlvbgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIHdz \
bCB1c2VybmFtZSB3aXRoIGRlZmF1bHQgcGFzc3dvcmQgd3NsClVTRVJOQU1FPSJ3c2wiCgpIT01F \
PSIvaG9tZS93c2wiCgpXSU5ET1dTX1VTRVJOQU1FPSJGcmFuY29pc0NoYXN0YW5ldCIKCiMgLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0KIyBHaXQgJiBTU0ggaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLQoKIyBpZiAxLCBpdCBpbmRpY2F0ZXMgeW91IGFjY2VwdCB0aGF0IHlvdXIgZ2l0IGtl \
eSB3aWxsIGJlIGxvYWRlZC4KIyBpZiAwLCBjb25maWd1cmF0aW9ucyB0aGF0IG5lZWQgdG8gYmUg \
YXV0aGVudGljYXRlZCB3aWxsIGJlIHNraXBwZWQuCiMgRGlzdHJvIG1vZGU6IGluIGFueSBjYXNl \
LCB5b3VyIGtleSBpcyBub3QgY29waWVkLgpBVVRIT1JJWkVfU1NIX0tFWV9VU0FHRT0xCgojIHlv \
dXIgbG9naW4gdG8gY29ubmVjdCB0byBzc2ggc2VydmVycyBpZiBhbnkKU1NIX0xPR0lOPSIiCgoj \
IHlvdXIgZ2l0IGZ1bGwgbmFtZSAnRmlyc3ROYW1lIExhc3ROYW1lJwpHSVRfVVNFUk5BTUU9IiIK \
CiMgZW1haWwgdXNlZCBmb3IgZ2l0ICdsZGFwQGRvbWFpbi5jb20nCkdJVF9VU0VSX01BSUw9IiIK \
CiMgZGVmYXVsdCBnaXQgbWVyZ2UgdG9vbCB0byB1c2UKR0lUX01FUkdFX1RPT0w9InZzY29kZSIK \
CiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBBV1MgaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLQoKIyBlbWFpbCB1c2VkIHRvIGNvbm5lY3QgdG8gYXdzCkFXU19VU0VSX01BSUw9ImZj \
aGFzdGFuZXRAZ21haWwuY29tIgoKIyBhcHAgaWQgdG8gY29ubmVjdCB0byBhd3MgYWNjb3VudApB \
V1NfQVBQX0lEPSIiCgpBV1NfUFJPRklMRT0iIgpBV1NfREVGQVVMVF9SRUdJT049IiIKQVdTX1RF \
U1RfU0VDUkVUX0lEPSIiCkFXU19ERUZBVUxUX0RPQ0tFUl9SRUdJU1RSWV9JRD0iIgoKIyB3aWxs \
IHVzZSBhd3MgY29uZmlndXJlIHNzbyB0byBjb25uZWN0IHRvIGF3cyAoaW5zdGVhZCBvZiBzYW1s \
MmF3cykKVVNFX0FXU19DT05GSUdVUkVfU1NPPTEKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBL \
OFMgaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBLdWJlRGVmYXVsdENvbmZp \
ZyB+Ly5rdWJlL2NvbmZpZyBnZW5lcmF0aW9uCiMgYXdzIHJlZ2lvbiBvZiB0aGUgY2x1c3RlciAo \
RWc6IHVzLWVhc3QtMSkKS1VCRV9DT05GSUdfUkVHSU9OX0NPREU9CgojIGF3cyBhcm4gb2YgdGhl \
IGNsdXN0ZXIuCiMgRWc6IGFybjphd3M6ZWNzOnJlZ2lvbjphd3NfYWNjb3VudF9pZDpjbHVzdGVy \
L015Q2x1c3RlcgpLVUJFX0NPTkZJR19DTFVTVEVSX0FSTj0KCiMgLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0KIyBEaXJlY3RvcmllcwojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIG92ZXJyaWRkZW4gY29u \
ZiBkaXJlY3RvcnkgdGhhdCB3aWxsIGJlIHVzZWQgdG8gb3ZlcnJpZGUKIyB0aGUgZGVmYXVsdCBj \
b25maWd1cmF0aW9uIHRoYXQgYXJlIGVtYmVkZGVkIGluIGJpbmFyaWVzCkNPTkZfT1ZFUlJJREVf \
RElSUz0oCiAgIiR7QkFTSF9ERVZfRU5WX1JPT1RfRElSfS9jb25mLm92ZXJyaWRlIgopCgojIHdo \
ZXJlIHRvIGluc3RhbGwgYmFzaC10b29scywgLi4uCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1 \
MwpQUk9KRUNUU19ESVI9IiR7SE9NRX0vcHJvamVjdHMiCgojIHdoZXJlIG92ZXJyaWRkZW4gY29u \
ZmlnIGZpbGVzIHdpbGwgYmUgYmFja2VkIHVwCkJBQ0tVUF9ESVI9IiR7QkFTSF9ERVZfRU5WX1JP \
T1RfRElSfS9iYWNrdXAiCiMgYmFja3VwIGZpbGVzL2RpcnMgYmVmb3JlIGluc3RhbGxpbmcgbmV3 \
IGZpbGUgKHVzdWFsbHkgMSwgYnV0IDAgaWYgdXNpbmcgZGlzdHJvKQpCQUNLVVBfQkVGT1JFX0lO \
U1RBTEw9MQoKIyBsb2dzIGRpcmVjdG9yeQpMT0dTX0RJUj0iJHtCQVNIX0RFVl9FTlZfUk9PVF9E \
SVJ9L2xvZ3MiCgojIGluc3RhbGxTY3JpcHRzIHJvb3QgZGlyCklOU1RBTExfU0NSSVBUU19ST09U \
X0RJUj0iJHtCQVNIX0RFVl9FTlZfUk9PVF9ESVJ9L2luc3RhbGxTY3JpcHRzIgoKIyAtLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLQojIEluc3RhbGxhdGlvbiBjb25maWd1cmF0aW9uCiMgLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0KCiMgQ29uZmlndXJhdGlvbiBmaWxlcyBhcmUgb3ZlcndyaXR0ZW4gZXZlbiBpZiBl \
eGlzdHMKIyAhISEhIEZpcnN0IHRpbWUgaW5pdGlhbGl6YXRpb246IGxldCB0aGlzIHZhbHVlIHRv \
IDEgISEhIQojIFZhbHVlIDA6CiMgLSBJZiB0YXJnZXQgY29uZmlndXJhdGlvbiBmaWxlIGV4aXN0 \
cywgZGlzcGxheXMgYSBtZXNzYWdlIGFuZCBkbyBub3Qgb3ZlcndyaXRlIHRoZSBmaWxlCiMgLSBJ \
ZiB0YXJnZXQgY29uZmlndXJhdGlvbiBmaWxlIGRvZXNuJ3QgZXhpc3QsIGluc3RhbGxzIHRoZSBm \
aWxlCiMgVmFsdWUgMQojIC0gaW5zdGFsbCBvciBvdmVyd3JpdGUgdGhlIGZpbGUgd2l0aG91dCBj \
aGVja2luZyBleGlzdGVuY2UKT1ZFUldSSVRFX0NPTkZJR19GSUxFUz0xCgojIFdpbmRvd3MgZmls \
ZXMgY2FuIGJlIG92ZXJyaWRkZW4gaWYgMQojIGlmIDAKIyAtIHNraXAgY2hhbmdlcyB0byAlVVNF \
UlBST0ZJTEUlLy53c2xjb25maWcKIyAtIHNraXAgY29weWluZyBmb250cwpDSEFOR0VfV0lORE9X \
U19GSUxFUz0xCgojIEluZGljYXRlIHRoYXQgaW5zdGFsbCBzY3JpcHQgY2FuIHdhcm4geW91IHVz \
aW5nIHNwZWFrZXIgd2hlbiB5b3VyIGlucHV0IGlzIG5lZWRlZApDQU5fVEFMS19EVVJJTkdfSU5T \
VEFMTEFUSU9OPTEKCiMgaWYgMCBpbnN0YWxsIHNjcmlwdCB3aWxsIHNraXAgYWxsIGludGVyYWN0 \
aXZlIGFjdGl2aXR5IChzYW1sMmF3cywgLi4uKSwKIyBzbyBkZXBlbmRlbnQgaW5zdGFsbGF0aW9u \
IHdpbGwgYmUgc2tpcHBlZCBhcyB3ZWxsCklOU1RBTExfSU5URVJBQ1RJVkU9MQoKIyBkaXNwbGF5 \
IGVsYXBzZWQgdGltZSBzaW5jZSBsYXN0IGxvZwpESVNQTEFZX0RVUkFUSU9OPTEKCiMgMCAgID0+ \
IG5vIHVwZ3JhZGUgYXQgYWxsCiMgbHRzID0+IFVQR1JBREUgdG8gbGF0ZXN0IHVidW50dSBsdHMg \
dmVyc2lvbgojIGRldiA9PiBVUEdSQURFIHRvIGxhdGVzdCB1YnVudHUgZGV2IHZlcnNpb24KIyBV \
c2UgaWYgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLAojIGNvdWxkIGNhdXNlIHNvbWUgcGFj \
a2FnZXMgdG8gbm90IGJlaW5nIGF2YWlsYWJsZSB5ZXQKVVBHUkFERV9VQlVOVFVfVkVSU0lPTj0w \
CgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgUHJvZmlsZSBjb25maWd1cmF0aW9uCiMgLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0KCiMgQ2hvb3NlIHlvdXIgcHJlZmVycmVkIHNoZWxsCiMgcG9zc2libGUg \
Y2hvaWNlczogU2hlbGxCYXNoIChMZWdhY3kgZXhwZXJpZW5jZSksIFNoZWxsWnNoIChSZWNvbW1l \
bmRlZCBleHBlcmllbmNlKQpQUkVGRVJSRURfU0hFTEw9IlNoZWxsWnNoIgoKIyBac2ggdGhlbWUg \
dG8gdXNlCiMgcG9zc2libGUgY2hvaWNlczogcG93ZXJsZXZlbDEway9wb3dlcmxldmVsMTBrLCBv \
aG15cG9zaCwgc2luZHJlc29yaHVzL3B1cmUsIHN0YXJzaGlwL3N0YXJzaGlwClpTSF9QUkVGRVJS \
RURfVEhFTUU9InBvd2VybGV2ZWwxMGsvcG93ZXJsZXZlbDEwayIKCiMgaWYgcHJlZmVycmVkIHRo \
ZW1lIGlzIG9obXlwb3NoLCB0aGUgcGF0aCB0byB0aGUgdGhlbWUgZmlsZQpQT1NIX1RIRU1FX1BB \
VEg9IiR7SE9NRX0vLmJhc2gtZGV2LWVudi90aGVtZXMuZC9vaG15cG9zaFRoZW1lcy9qYW5kZWRv \
YmJlbGVlci55YW1sIgoKIyBpZiBwcmVmZXJyZWQgdGhlbWUgaXMgc3RhcnNoaXAKU1RBUlNISVBf \
VEhFTUU9IiR7SE9NRX0vLmJhc2gtZGV2LWVudi90aGVtZXMuZC9zdGFyc2hpcFRoZW1lcy9kZWZh \
dWx0LnRvbWwiClNUQVJTSElQX0NBQ0hFPSIke0hPTUV9Ly5jYWNoZS8uc3RhcnNoaXAiCgojIERp \
c3BsYXkgRm9ydHVuZSB0b29sdGlwIGF0IGJhc2gvenNoIHNlc3Npb24gb3BlbgpTSE9XX0ZPUlRV \
TkVTPTEKCiMgRGlzcGxheSBNT1REIGF0IGJhc2gvenNoIHNlc3Npb24gb3BlbgpTSE9XX01PVEQ9 \
MQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIFdTTENPTkZJRwojIFRoZXNlIHBhcmFtZXRlcnMg \
YXV0b21hdGljYWxseSBjb25maWd1cmUgJVVTRVJQUk9GSUxFJS8ud3NsY29uZmlnIGZpbGUuCiMg \
QHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy93aW5kb3dzL3dzbC93c2wtY29u \
ZmlnCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgUmVjb21tZW5kZWQgNTAlIG9mIHRvdGFsIG1l \
bW9yeQpXU0xDT05GSUdfTUFYX01FTU9SWT04R0IKCiMgcGVyc29uYWxseSBJIHByZWZlciBydW4g \
b3V0IG9mIG1lbW9yeSBpbnN0ZWFkIG9mIGJlZ2lubmluZyBzd2FwcGluZwojIFNvIEkga25vdyBp \
bW1lZGlhdGVseSBpZiBzb21lIHByb2Nlc3NlcyBoYXZlIHRvIGJlIHN0b3BwZWQKV1NMQ09ORklH \
X1NXQVA9MAoKIyBpZiAxIGl0IHdpbGwgY29tcHV0ZSBhdXRvbWF0aWNhbGx5IHRoZSBtYXggdmhk \
IHNpemUKIyBkZWZhdWx0ICgxLzMgb2YgZGlzayBzaXplLCBtaW4gMTUwR0IpCiMgaWYgMCBpdCB3 \
aWxsIHVzZSB3c2wgZGVmYXVsdCB2YWx1ZSAoMVRCKQpXU0xDT05GSUdfQ09NUFVURV9NQVhfVkhE \
X1NJWkU9MQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIEhhY2tzCiMgb24gc29tZSBjb25maWd1 \
cmF0aW9ucyB3ZSBoYXZlIHRvIGZvcmNlIHBhdGggb2Ygc29tZSB3aW5kb3dzIGNvbW1hbmRzCiMg \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0KCiNQT1dFUlNIRUxMX0JJTj0vbW50L2MvV2luZG93cy9TeXN0 \
ZW0zMi9XaW5kb3dzUG93ZXJTaGVsbC92MS4wL3Bvd2Vyc2hlbGwuZXhlCiNJUENPTkZJR19CSU49 \
L21udC9jL1dpbmRvd3Mvc3lzdGVtMzIvaXBjb25maWcuZXhlCiNXU0xfRVhFX0JJTj0vbW50L2Mv \
V2luZG93cy9zeXN0ZW0zMi93c2wuZXhlCgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgR2VuZXJh \
bCBkaXN0cmlidXRpb24gaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBob3N0 \
bmFtZSBvZiB0aGUgZGlzdHJvCkRJU1RST19IT1NUTkFNRT0id3NsSG9zdCIK" \
  "755"

declare -gx embed_file_envFileTemplate="${PERSISTENT_TMPDIR:-/tmp}/e45723bdbf29adda89f24f72a94da7e21df12389872dca4558684132a580a936/envFileTemplate"

  local envFile="${BASH_DEV_ENV_ROOT_DIR}/.env"
  # shellcheck disable=SC2154
  Engine::Config::createEnvFileFromTemplate \
    "${envFile}" "${embed_file_envFileTemplate}" || exit 1
  set -o allexport
  # shellcheck source=/.env.template
  source <(echo "${embed_file_envFileTemplate}")
  # shellcheck source=/.env
  source "${BASH_DEV_ENV_ROOT_DIR}/.env"
  set +o allexport
  export STATS_DIR="${LOGS_DIR}/stats"
  if [[ ! -d "${STATS_DIR}" ]]; then
    mkdir -p "${STATS_DIR}" || true
  fi
  export LOGS_INSTALL_SCRIPTS_DIR="${LOGS_DIR}/installScripts"
  if [[ ! -d "${LOGS_INSTALL_SCRIPTS_DIR}" ]]; then
    mkdir -p "${LOGS_INSTALL_SCRIPTS_DIR}" || true
  fi

  # load environment variables ID, VERSION_CODENAME
  Engine::Config::loadOsRelease
  Engine::Config::loadUserVariables

  if ! Engine::Config::checkEnv "${BASH_DEV_ENV_ROOT_DIR}/.env"; then
    Log::displayError "one or more variables are invalid, check above logs and fix '${envFile}' file accordingly"
    return 1
  fi

  Engine::Config::loadHostIp

  Engine::Config::requireWslu

  #Linux::Wsl::initEnv
  Engine::Config::loadWslVariables

  Log::requireLoad

  Engine::Config::loadSshKey

  Engine::Config::loadLocaleConfig

  export BASH_DEV_ENV_CONFIG_LOADED=1
}


# @description deduce wsl host ip
# @set HOST_IP exported env containing the IP
Engine::Config::loadHostIp() {
  HOST_IP="$(/sbin/ip route | awk '/default/ { print $3 }')"

  export HOST_IP
}


# @description load locale configuration
Engine::Config::loadLocaleConfig() {
  if [[ "${BASH_DEV_ENV_CONFIG_LOADED:-0}" = "1" ]]; then
    return 0
  fi
  if [[ "${LOAD_LOCALE_CONFIG:-1}" = "1" && ! -f "${PERSISTENT_TMPDIR}/localeConfig.initialized" ]]; then
    Log::displayInfo "Initializing locale en_US.UTF-8"
    export PATH="${PATH}:${HOME}/.local/bin"
    sudo sed -E -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    echo 'LANG="en_US.UTF-8"' | sudo tee /etc/default/locale >/dev/null
    echo "LANG=en_US.UTF-8" | sudo tee /etc/locale.conf >/dev/null
    sudo locale-gen en_US.UTF-8
    sudo dpkg-reconfigure --frontend=noninteractive locales
    export LC_ALL=C
    export LANG=en_US.UTF-8
    export LC_MESSAGES=en_US.UTF-8
    touch "${PERSISTENT_TMPDIR}/localeConfig.initialized"
  fi
}


# @description load /etc/os-release file
# @set NAME
# @set VERSION
# @set ID
# @set ID_LIKE
# @set PRETTY_NAME
# @set VERSION_ID
# @set HOME_URL
# @set SUPPORT_URL
# @set BUG_REPORT_URL
# @set PRIVACY_POLICY_URL
# @set VERSION_CODENAME
# @set UBUNTU_CODENAME
Engine::Config::loadOsRelease() {
  if [[ ! -f /etc/os-release ]]; then
    Log::displayError "file /etc/os-release does not exists"
    return 1
  fi
  # This will load environment variables ID, VERSION_CODENAME, ...
  set -o allexport
  source /etc/os-release
  set +o allexport
}


# @description load pageant and ssh key
# you can provide ssh key by env variable SSH_PRIVATE_KEY
# or if empty, file ~/.ssh/id_rsa will be used if present
# @env SSH_PRIVATE_KEY ssh key provided by env variable
# @env AUTHORIZE_SSH_KEY_USAGE if 0, no ssh key is loaded
# @env LOAD_SSH_KEY feature flag used in distro mode
# @env SKIP_REQUIRES ignore loading if set to 1
Engine::Config::loadSshKey() {
  if [[ "${LOAD_SSH_KEY:-1}" = "0" || "${SKIP_REQUIRES:-0}" = "1" ]]; then
    # ignore in distro mode
    return 0
  fi
  if [[ "${AUTHORIZE_SSH_KEY_USAGE:-0}" = "0" ]]; then
    Log::displaySkipped "Ssh key will not be loaded as you set AUTHORIZE_SSH_KEY_USAGE to 0"
    return 0
  fi
  if [[ -n "${SSH_AUTH_SOCK}" && -n "${SSH_AGENT_PID}" ]]; then
    Log::displaySkipped "Ssh agent skipped as variables SSH_AUTH_SOCK and SSH_AGENT_PID are set"
    return 0
  fi

  if [[ -z "${SSH_PRIVATE_KEY}" && ! -f "${HOME}/.ssh/id_rsa" ]]; then
    Log::displayError "File '${HOME}/.ssh/id_rsa' is missing and env variable SSH_PRIVATE_KEY is empty"
    return 1
  fi
  local errorCode=0
  ssh-add -l &>/dev/null || errorCode=$?
  if [[ "${errorCode}" = "2" ]]; then
    # ssh agent is not started
    Log::displayInfo "Starting ssh agent"
    eval "$(ssh-agent)" || return 2
    export SSH_AUTH_SOCK
    export SSH_AGENT_PID
  fi

  if [[ -n "${SSH_PRIVATE_KEY}" ]]; then
    base64 -d <<<"${SSH_PRIVATE_KEY}" >"${HOME}/.ssh/id_rsa" || {
      Log::displayError "Failed to decode SSH_PRIVATE_KEY"
      return 2
    }
    chmod 600 "${HOME}/.ssh/id_rsa" || {
      Log::displayError "Failed to set permissions on SSH key"
      return 3
    }
  fi
  ssh-keygen -f ~/.ssh/id_rsa -y >~/.ssh/id_rsa.pub || {
    Log::displayError "Failed to generate public key from private key"
    return 4
  }
  ssh-add "${HOME}/.ssh/id_rsa" || return 5

  # Check key has been added to ssh agent
  ssh-add -l &>/dev/null || {
    Log::displayError "Your ssh key has not been loaded"
    return 6
  }
}


# @description deduce HOME, USER_ID, USERGROUP_ID and USERGROUP from USERNAME
# @env USERNAME String the name of the user
# @set USER_ID String
# @set USERGROUP String
# @set USERGROUP_ID String
# @set USER_SHELL String current user shell
# @set HOME String
# @env REMOTE String prefix command to run commands remotely
Engine::Config::loadUserVariables() {
  # deduce user home and group
  local -a split
  local IFS=':'
  # shellcheck disable=SC2207
  split=($(${REMOTE:-} getent passwd "${USERNAME}"))
  USER_ID="${split[2]}"
  USERGROUP_ID="${split[3]}"
  HOME="${split[5]}"
  USER_SHELL="${split[6]}"
  USERGROUP="$(${REMOTE:-} id -gn "${USERNAME}")"

  if [[ -z "${USERGROUP}" || -z "${HOME}" ]]; then
    Log::displayError "USERNAME - unable to deduce USERGROUP, HOME from USERNAME"
    return 1
  fi

  export HOME
  export USER_ID
  export USERGROUP_ID
  export USERGROUP
  export USER_SHELL
}


# @description load wsl env variables
# @set BASE_MNT_C
# @set WINDOWS_DIR
# @set WINDOWS_PROFILE_DIR
# @set LOCAL_APP_DATA
# @set WINDOW_PATH
# @set WSL_EXE_BIN
# @set IPCONFIG_BIN
# @set POWERSHELL_BIN
# @env WSL_EXE_BIN
# @env IPCONFIG_BIN
# @env POWERSHELL_BIN
Engine::Config::loadWslVariables() {
  if ! Assert::wsl; then
    # skip
    return 0
  fi

  local IFS=' '
  local -a split=()
  # shellcheck disable=SC2207
  split=($(grep -m 1 -E 'C:\\[^ ]+ ([^ ]+) ' /proc/mounts 2>/dev/null)) || {
    # probably not wsl after all
    return 0
  }
  # shellcheck disable=SC1003
  BASE_MNT_C="${split[1]}"
  export BASE_MNT_C

  Linux::Wsl::cachedWslpathFromWslVar2 WINDOWS_DIR SystemRoot
  WINDOWS_DIR="${WINDOWS_DIR:-${BASE_MNT_C:-/mnt/c}/Windows}"
  export WINDOWS_DIR

  Linux::Wsl::cachedWslpathFromWslVar2 WINDOWS_PROFILE_DIR USERPROFILE
  WINDOWS_PROFILE_DIR="${WINDOWS_PROFILE_DIR:-${BASE_MNT_C:-/mnt/c}/Users/${WINDOWS_USERNAME}}"
  export WINDOWS_PROFILE_DIR

  Linux::Wsl::cachedWslpathFromWslVar2 LOCAL_APP_DATA LOCALAPPDATA
  export LOCAL_APP_DATA

  # WINDOW_PATH
  Linux::Wsl::cachedWslvar2 WINDOW_PATH PATH
  WINDOW_PATH="${WINDOW_PATH//;/:}"
  WINDOW_PATH="${WINDOW_PATH//\\//}"
  WINDOW_PATH="${WINDOW_PATH//C:/${BASE_MNT_C:-/mnt/c}}"

  deduceBin() {
    local var="$1"
    local expectedFullPath="$2"
    local expectedBin="$3"
    if [[ -z "${!var+xxx}" ]]; then
      eval "${var}=${expectedFullPath}"
      if ! command -v "${!var}" >/dev/null 2>&1; then
        eval "${var}=$(command -v "${expectedBin}" 2>/dev/null)"
      fi
    fi
    if [[ -z "${!var:-}" ]] || ! command -v "${!var}" >/dev/null 2>&1; then
      Log::fatal "variable ${var} - command ${expectedBin} not found"
    fi
    # shellcheck disable=SC2163
    export "${var}"
  }

  checkBinary() {
    local var="$1"
    if [[ -z "${var}" || ! -x "${!var}" ]]; then
      Log::displayError "variable ${var} - binary '${!var}' does not exist or not executable"
      ((errorCount++))
    fi
  }

  local errorCount=0
  # IPCONFIG_BIN - which ipconfig.exe does not work when executed as root
  deduceBin IPCONFIG_BIN "${WINDOWS_DIR}/System32/ipconfig.exe" "ipconfig.exe"
  checkBinary IPCONFIG_BIN

  deduceBin WSL_EXE_BIN "${WINDOWS_DIR}/System32/wsl.exe" "wsl.exe"
  checkBinary WSL_EXE_BIN

  deduceBin POWERSHELL_BIN "${WINDOWS_DIR}/System32/WindowsPowerShell/v1.0/powershell.exe" "powershell.exe"
  checkBinary POWERSHELL_BIN

  return "${errorCount}"
}


# @description install apt wslu if necessary providing wslvar, wslpath
Engine::Config::requireWslu() {
  if [[ "${LOAD_WSLU:-1}" = "0" ]]; then
    return 0
  fi
  if ! command -v wslvar &>/dev/null; then
    Log::displayInfo "Installing pre-requisite Wslu : wslvar, wslpath, ... commands"
    Linux::Apt::installIfNecessary --no-install-recommends wslu

    # Fix WSL2 interop issue
    # @see https://github.com/microsoft/WSL/issues/7181
    sudo systemctl mask systemd-binfmt.service
    sudo update-binfmts --enable
  fi
}


# @description default env file with all default values
# @stdout the default env filepath
Env::createDefaultEnvFile() {
  local envFile
  envFile="$(Framework::createTempFile "createDefaultEnvFileEnvFile")" || return 2

  (
    echo "BASH_FRAMEWORK_THEME=${BASH_FRAMEWORK_THEME:-default}"
    echo "BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL:-${__LEVEL_OFF}}"
    echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL:-${__LEVEL_INFO}}"
    # shellcheck disable=SC2016
    echo 'BASH_FRAMEWORK_LOG_FILE="${BASH_FRAMEWORK_LOG_FILE:-"${FRAMEWORK_ROOT_DIR}/logs/${SCRIPT_NAME}.log"}"'
    echo "BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION=${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION:-5}"
  ) >"${envFile}"
  echo "${envFile}"
}


# @description prepend directories to the PATH environment variable
# @arg $@ args:String[] list of directories to prepend
# @set PATH update PATH with the directories prepended
Env::pathPrepend() {
  local arg
  for arg in "$@"; do
    if [[ -d "${arg}" && ":${PATH}:" != *":${arg}:"* ]]; then
      PATH="$(realpath "${arg}"):${PATH}"
    fi
  done
}


# @description ensure env files are loaded
# @arg $@ list of default files to load at the end
# @exitcode 1 if one of env files fails to load
# @stderr diagnostics information is displayed
# shellcheck disable=SC2120
Env::requireLoad() {
  export REQUIRE_FUNCTION_ENV_REQUIRE_LOAD_LOADED=1

  local -a defaultFiles=("$@")
  # get list of possible config files
  local -a configFiles=()
  local defaultEnvFile
  defaultEnvFile="$(Env::createDefaultEnvFile)" || return 1
  configFiles+=("${defaultEnvFile}")
  if [[ -n "${BASH_FRAMEWORK_ENV_FILES[0]+1}" ]]; then
    # BASH_FRAMEWORK_ENV_FILES is an array
    configFiles+=("${BASH_FRAMEWORK_ENV_FILES[@]}")
  fi
  if [[ -f "${FRAMEWORK_ROOT_DIR}/.framework-config" ]]; then
    configFiles+=("${FRAMEWORK_ROOT_DIR}/.framework-config")
  fi
  local localFrameworkConfigFile
  BASH_FRAMEWORK_DISPLAY_LEVEL="${__LEVEL_INFO}" \
    BASH_FRAMEWORK_LOG_LEVEL="${__LEVEL_OFF}" \
    Conf::loadNearestFile ".framework-config" localFrameworkConfigFile "$(pwd)" || true
  if [[ -f "${localFrameworkConfigFile}" ]]; then
    configFiles+=("${localFrameworkConfigFile}")
  fi
  configFiles+=("${optionEnvFiles[@]}")
  configFiles+=("${defaultFiles[@]}")

  while IFS='' read -r file; do
    # shellcheck source=/src/Env/createDefaultEnvFile.sh
    CURRENT_LOADED_ENV_FILE="${file}" source "${file}" || {
      Log::displayError "while loading config file: ${file}"
      return 1
    }
  done < <(printf '%s\n' "${configFiles[@]}" | awk '!x[$0]++')
}


# @description get number of seconds since last modification of the file
# @arg $1 file:String file path
# @exitcode 1 if file does not exist
# @stdout number of seconds since last modification of the file
File::elapsedTimeSinceLastModification() {
  local file="$1"
  if [[ ! -f "${file}" ]]; then
    return 1
  fi
  local lastModificationTimeSeconds diff
  lastModificationTimeSeconds="$(stat -c %Y "${file}")"
  ((diff = $(date +%s) - lastModificationTimeSeconds))
  echo -n "${diff}"
}


# @description delete files older than n days in given path
# @warning use this function with caution as it will delete all files in given path without any prompt
# @arg $1 path:String the directory in which files will be deleted or the file to delete
# @arg $2 mtime:String expiration time in days (eg: 1 means 1 day) (default value: 1). Eg: +1 match files that have been accessed at least two days ago (rounding effect)
# @arg $3 maxdepth:int Descend at most levels (a non-negative integer) levels of directories below the starting-points. (default value: 1)
# @exitcode 1 if path not provided or empty
# @exitcode * find command failure code
# @stderr find output on error or diagnostics logs
# @see man find atime
File::garbageCollect() {
  local path="$1"
  local mtime="$2"
  local maxdepth="${3:-1}"

  if [[ -z "${path}" ]]; then
    return 1
  fi

  if [[ ! -e "${path}" ]]; then
    # path already removed
    return 0
  fi

  Log::displayInfo "Garbage collect files older than ${mtime} days in path ${path} with max depth ${maxdepth}"
  find "${path}" -depth -maxdepth "${maxdepth}" -type f -mtime "${mtime}" -print -delete
}


# @description print the resolved path relative to DIR
# do not check for path existence
# @arg $1 srcFile:String the file to resolve
# @arg $2 relativeTo:String the directory
# @stdout the resolved path relative to DIR
File::relativeToDir() {
  local srcFile="$1"
  local relativeTo="$2"

  realpath -m --relative-to="${relativeTo}" "${srcFile}"
}


# @description search a file in parent directories
#
# @arg $1 fromPath:String path
# @arg $2 fileName:String
# @arg $3 untilInclusivePath:String (optional) find for given file until reaching this folder (default value: /)
# @arg $@ untilInclusivePaths:String[] list of untilInclusivePath
# @stdout The filename if found
# @exitcode 1 if the command failed or file not found
File::upFind() {
  local fromPath="$1"
  shift || true
  local fileName="$1"
  shift || true
  local untilInclusivePath="${1:-/}"
  shift || true

  if [[ -f "${fromPath}" ]]; then
    fromPath="${fromPath%/*}"
  fi
  while true; do
    if [[ -f "${fromPath}/${fileName}" ]]; then
      echo "${fromPath}/${fileName}"
      return 0
    fi
    if Array::contains "${fromPath}" "${untilInclusivePath}" "$@" "/"; then
      return 1
    fi
    fromPath="$(readlink -f "${fromPath}"/..)"
  done
  return 1
}

# shellcheck disable=SC2120

# @description uniq command need input file to be sorted
# here We are using awk that do not need file to be sorted
# to get uniq values
# iterates over each file and prints (default awk behavior)
# each unique line; only takes first value and ignores duplicates
# Note ! be careful of memory usage as each unique $0 is stored in an array
# @exitcode * if one of the filter command fails
# @stdin you can use stdin as alternative to str argument
# @stdout the filtered content
# shellcheck disable=SC2120
Filters::uniqUnsorted() {
  awk '!seen[$0]++' "$@"
}


# @description create a temp file using default TMPDIR variable
# @env TMPDIR String (default value /tmp)
# @arg $1 templateName:String template name to use(optional)
Framework::createTempFile() {
  mktemp -p "${TMPDIR:-/tmp}" -t "${1:-}.XXXXXXXXXXXX"
}


# @description installs file to given directory
#
# callbacks parameters `${fromFile} ${targetFile} $@`
# @arg $1 fromFile - original file to copy
# @arg $2 targetFile - target file
# @arg $3 userName:String (optional) (default: ${USERNAME}) the user name that will be used to set target files ownership
# @arg $4 userGroup:String (optional) (default: ${USERNAME}) the group name that will be used to set target files ownership
# @arg $5 successCallback:Function the callback to call when file is installed successfully, by default setUserRights callback is called
# @arg $6 failureCallback:Function the callback to call when file installation has failed, by default unableToCopyCallback callback is called
# @arg $@ callbacksParams:String[] additional parameters passed to callbacks
# @exitcode 1 if fromFile is not readable
# @exitcode 2 if backup file failure
# @exitcode 3 if copy failure
# @exitcode 0 on success or if OVERWRITE_CONFIG_FILES=0
# @exitcode 0 on success or if CHANGE_WINDOWS_FILES=0 and target file is a windows file
# @env OVERWRITE_CONFIG_FILES Boolean (default:0) if 1 will overwrite existing directory
# @env CHANGE_WINDOWS_FILES Boolean (default:0) if 1 and target file is in windows file system, overwrite it
# @env USERNAME (default: root) the user name that will be used to set target files ownership
# @env USERGROUP (default: root) the group name that will be used to set target files ownership
# @env BASE_MNT_C String windows C drive base PATH
# @env FRAMEWORK_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @env SUDO String allows to use custom sudo prefix command
# @env BACKUP_BEFORE_INSTALL Boolean (default: 1) backup file before installing the file
Install::file() {
  local fromFile="$1"
  local targetFile="$2"
  local userName="${3:-${USERNAME:-root}}"
  local userGroup="${4:-${USERGROUP:-root}}"
  local successCallback=${5:-Install::setUserRightsCallback}
  local failureCallback=${6:-Install::unableToCopyCallback}
  shift 6 || true

  if [[ ! -f "${fromFile}" || ! -r "${fromFile}" ]]; then
    Log::displayError "cannot read source file '${fromFile}'"
    return 1
  fi

  # skip if OVERWRITE_CONFIG_FILES is 0 and target file exists
  if [[ "${OVERWRITE_CONFIG_FILES}" = "0" && -f "${targetFile}" ]]; then
    Log::displayWarning "File '${targetFile}' exists - Skip install (because OVERWRITE_CONFIG_FILES=0 in .env file)"
    return 0
  fi

  # skip if CHANGE_WINDOWS_FILES is 0 and target dir is c drive
  if [[ "${CHANGE_WINDOWS_FILES}" = "0" && "${targetFile}" =~ ^${BASE_MNT_C} ]]; then
    Log::displayWarning "File '${targetFile}' - Skip install (because CHANGE_WINDOWS_FILES=0 in .env file)"
    return 0
  fi

  local targetDir="${targetFile%/*}"
  if ! ${SUDO} test -d "${targetDir}"; then
    ${SUDO:-} mkdir -p "${targetDir}"
    ${SUDO:-} chown "${userName}":"${userGroup}" "${targetDir}"
  fi
  local fromDir="${fromFile%/*}"
  local fromFilename="${fromFile##*/}"

  local prettyFromDir
  # shellcheck disable=SC2295
  prettyFromDir="${fromDir#${PRETTY_ROOT_DIR:-${FRAMEWORK_ROOT_DIR}}/}"
  if diff -q "${fromFile}" "${targetFile}" &>/dev/null; then
    Log::displayStatus "No changes detected. No need to update '${targetFile}' from '${prettyFromDir}/${fromFilename}'"
    return 0
  fi

  if [[ "${BACKUP_BEFORE_INSTALL:-1}" = "1" ]]; then
    Backup::file "${targetFile}" || return 2
  fi

  if ${SUDO:-} cp "${fromFile}" "${targetFile}"; then
    # shellcheck disable=SC2295
    Log::displaySuccess "Installed file '${targetFile}' from '${prettyFromDir}/${fromFilename}'"
    ${successCallback} "${fromFile}" "${targetFile}" "${userName}" "${userGroup}" "${prettyFromDir}" "${fromFilename}"
  else
    # shellcheck disable=SC2295
    Log::displayError "unable to copy file '${targetFile}' from '${fromDir#${FRAMEWORK_ROOT_DIR}/}/${fromFilename}'"
    ${failureCallback} "${fromFile}" "${targetFile}" "${userName}" "${userGroup}" "${prettyFromDir}" "${fromFilename}"
    return 3
  fi
}


# @description install callback
#   set file with root ownership and execution bit
# @arg $1 fromFile:String
# @arg $2 targetFile:String
# @arg $3 userName:String (optional) (default: ${USERNAME}) the user name that will be used to set target files ownership
# @arg $4 userGroup:String (optional) (default: ${USERNAME}) the group name that will be used to set target files ownership
# @env USERNAME (default: root) the user name that will be used to set target files ownership
# @env USERGROUP (default: root) the group name that will be used to set target files ownership
# @env SUDO String allows to use custom sudo prefix command
# @exitcode 1 on any failure
# @see Install::file
Install::setUserRightsCallback() {
  # shellcheck disable=SC2034 # $1 not used
  local fromFile="$1"
  local targetFile="$2"
  local userName="${3:-${USERNAME:-root}}"
  local userGroup="${4:-${USERGROUP:-root}}"

  ${SUDO:-} chown "${userName}":"${userGroup}" "${targetFile}"
}


# @description install callback
#   default callback used called when file copy has failed
# @arg $1 fromFile:String
# @arg $2 targetFile:String
# @env FRAMEWORK_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @exitcode 1 always fail
# @stderr diagnostics information is displayed
# @see Install::file
Install::unableToCopyCallback() {
  local fromDir="$1"
  local fileName="$2"
  local targetFile="$3"
  Log::fatal "unable to copy file '${fromDir#"${FRAMEWORK_ROOT_DIR}/"}/${fileName}' to '${targetFile}'"
}


# @description the command launch different actions(install, configure, test)
# depending on the options selected
# @env SKIP_INSTALL
# @env SKIP_CONFIGURE
# @env SKIP_TEST
# @env STATS_DIR
# @env LOGS_INSTALL_SCRIPTS_DIR
InstallScripts::command() {
  local logsDir="${LOGS_INSTALL_SCRIPTS_DIR:-#}"
  local statsDir="${STATS_DIR:-#}"
  local fullScriptName
  fullScriptName="$(fullScriptName)"
  local scriptName="${fullScriptName//\//@}"
  rm -f "${statsDir}/${scriptName}-"* || true

  # shellcheck disable=SC2317
  onInterrupt() {
    Log::displayError "${scriptName} aborted"
    exit 1
  }
  trap onInterrupt INT TERM ABRT

  local startDate logFile statsFile
  local installStatus="0"
  sourceHook() {
    local hookName="$1"
    local configDir
    # shellcheck disable=SC2154
    local -a overriddenDirs=()
    # shellcheck disable=SC2154
    if [[ -d "${embed_dir_hooks_dir}" ]]; then
      overriddenDirs+=("${embed_dir_hooks_dir}")
    fi
    local dir
    for dir in "${CONF_OVERRIDE_DIRS[@]}"; do
      overriddenDirs+=("${dir}/${scriptName//\//@}")
    done
    configDir="$(Conf::getOverriddenDir "${overriddenDirs[@]}")" || return 0

    # ensure necessary functions are imported
    # Assert::dirExists
    # Assert::fileExists
    hook="${configDir}/${hookName}.sh"
    if [[ -n "${hook}" && -f "${hook}" && -x "${hook}" ]]; then
      Log::displayInfo "Running hook ${hook}"
      # shellcheck source=src/_installScripts/_Defaults/SimpleTest-hooks/preInstall.sh
      source "${hook}" || {
        Log::displayError "${scriptName} - unable to load hook '${hook}'"
        exit 1
      }
    fi
  }
  local globalStatsFile="${statsDir}/${scriptName}-global.stat"
  local hook
  if [[ "${SKIP_INSTALL}" = "0" ]] && ! InstallScripts::scriptFunctionEmpty install; then
    LOG_CONTEXT="${scriptName} - " Log::headLine "INSTALL" "Installing ${scriptName}"
    logFile="${logsDir}/${scriptName}-install.log"
    statsFile="${statsDir}/${scriptName}-install.stat"

    # break at first install error
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        LOG_CONTEXT="${scriptName} - " Stats::statusLine "${statsFile}" "Installation"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preInstall || ((++failures))
      install || ((++failures))
      sourceHook postInstall || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}"
  fi

  local testInstallStatus="0"
  if [[ "${SKIP_TEST}" = "0" && "${installStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty testInstall; then
    Log::headLine "TEST" "Testing ${scriptName} installation"
    logFile="${logsDir}/${scriptName}-test-install.log"
    statsFile="${statsDir}/${scriptName}-test-install.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Test Install ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preTestInstall || ((++failures))
      testInstall || ((++failures))
      sourceHook postTestInstall || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || testInstallStatus="$?" || true
    if [[ "${testInstallStatus}" != "0" ]] && breakOnTestFailure; then
      # break if test script error
      exit "${testInstallStatus}"
    fi
  fi

  local configStatus="0"
  if [[ "${SKIP_CONFIGURE}" = "0" && "${installStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty configure; then
    Log::headLine "CONFIG" "Configuring ${scriptName}"
    logFile="${logsDir}/${scriptName}-config.log"
    statsFile="${statsDir}/${scriptName}-config.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Configuration ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preConfigure || ((++failures))
      configure || ((++failures))
      sourceHook postConfigure || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || configStatus="$?" || true

    if [[ "${configStatus}" != "0" ]] && breakOnConfigFailure; then
      # break if config script error
      exit "${configStatus}"
    fi
  fi

  local testConfigStatus="0"
  if [[ "${SKIP_TEST}" = "0" && "${installStatus}" = "0" && "${configStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty configure; then
    Log::headLine "TEST" "Testing ${scriptName} configuration"
    logFile="${logsDir}/${scriptName}-test-configuration.log"
    statsFile="${statsDir}/${scriptName}-test-configuration.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Test Configuration ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preTestConfigure || ((++failures))
      testConfigure || ((++failures))
      sourceHook postTestConfigure || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || testConfigStatus="$?" || true
    if [[ "${testConfigStatus}" != "0" ]] && breakOnTestFailure; then
      # break if test script error
      exit "${testConfigStatus}"
    fi
  fi

  local cleanBeforeExportStatus="0"
  if [[ "${PREPARE_EXPORT}" = "1" && "${installStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty cleanBeforeExport; then
    Log::headLine "CLEAN" "Cleaning ${scriptName}"
    logFile="${logsDir}/${scriptName}-clean-before-export.log"
    statsFile="${statsDir}/${scriptName}-clean-before-export.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Cleaning ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      if ! InstallScripts::scriptFunctionEmpty cleanBeforeExport; then
        cleanBeforeExport || ((++failures))
        if [[ "${failures}" = "0" ]] && ! InstallScripts::scriptFunctionEmpty testCleanBeforeExport; then
          testCleanBeforeExport || ((++failures))
        fi
      fi
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || cleanBeforeExportStatus="$?" || true

    if [[ "${cleanBeforeExportStatus}" != "0" ]]; then
      # break if config script error
      exit "${cleanBeforeExportStatus}"
    fi
  fi
}


# @description check that function is implemented
InstallScripts::isFunctionImplemented() {
  local functionName="$1"
  if ! Assert::functionExists "${functionName}"; then
    Log::displayError "$(scriptName) - Function ${functionName} is not implemented"
    return 1
  fi
}


# @description check that all needed functions are implemented
InstallScripts::isInterfaceMandatoryFunctionImplemented() {
  local -i failures=0
  InstallScripts::isFunctionImplemented helpDescription || ((++failures))
  InstallScripts::isFunctionImplemented helpLongDescription || ((++failures))
  InstallScripts::isFunctionImplemented scriptName || ((++failures))
  InstallScripts::isFunctionImplemented dependencies || ((++failures))
  InstallScripts::isFunctionImplemented listVariables || ((++failures))
  InstallScripts::isFunctionImplemented fortunes || ((++failures))
  InstallScripts::isFunctionImplemented helpVariables || ((++failures))
  InstallScripts::isFunctionImplemented defaultVariables || ((++failures))
  InstallScripts::isFunctionImplemented checkVariables || ((++failures))
  InstallScripts::isFunctionImplemented breakOnConfigFailure || ((++failures))
  InstallScripts::isFunctionImplemented breakOnTestFailure || ((++failures))
  InstallScripts::isFunctionImplemented install || ((++failures))
  InstallScripts::isFunctionImplemented testInstall || ((++failures))
  InstallScripts::isFunctionImplemented configure || ((++failures))
  InstallScripts::isFunctionImplemented testConfigure || ((++failures))
  return "${failures}"
}


# @description check if function is empty
# @arg $1 function:Function
# @exitcode 0 if function is considered empty (body with : or true)
InstallScripts::scriptFunctionEmpty() {
  local pattern="^[ \t]+(:|true)"
  if ! declare -f "$1" &>/dev/null; then
    return 0
  fi
  local functionBody
  functionBody=$(declare -f "$1")
  local line3 line4
  line3=$(sed '3q;d' <<<"${functionBody}")
  line4=$(sed '4q;d' <<<"${functionBody}")
  [[ "${line3}" =~ ${pattern} && "${line4}" = "}" ]]
}


# @description apt-get install
# @arg $@ softwares:String[] list of softwares to install
# @feature Retry::default
# Linux::requireSudoCommand
# @stdout diagnostics logs
Linux::Apt::install() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  Log::displayInfo "Apt install $*"
  Retry::default sudo apt-get install -y -q "$@"
}


# @description apt-get install if package is not installed yet
# @arg $@ packages:String[] list of packages to install
# @feature Retry::default
# Linux::requireSudoCommand
# @env SKIP_APT_GET_UPDATE
# @stdout diagnostics logs
Linux::Apt::installIfNecessary() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  local -a packages=("$@")
  local package
  local -i installNeeded=0
  for package in "${packages[@]}"; do
    if [[ "${package}" =~ ^[-]{1,2} ]]; then
      continue
    fi
    if ! Linux::Apt::isPackageInstalled "${package}"; then
      Log::displayInfo "Package ${package} is not installed"
      installNeeded=1
    fi
  done
  if ((installNeeded == 1)); then
    if [[ "${SKIP_APT_GET_UPDATE:-0}" = "0" ]]; then
      Linux::Apt::update
    fi
    Linux::Apt::install "${packages[@]}"
    for package in "${packages[@]}"; do
      if [[ "${package}" =~ ^-- ]]; then
        continue
      fi
      if ! Linux::Apt::isPackageInstalled "${package}"; then
        Log::displayWarning "Package ${package} does not appear to have been installed, check if you could have chosen the wrong package name (Eg: python3.9-distutils instead of python3-distutils)"
      fi
    done
  else
    Log::displayInfo "Apt install avoided as packages are already installed : ${packages[*]}"
  fi
}


# @description check if apt package is installed
# @arg $1 package:String the package name to check
# @stdout diagnostics logs
Linux::Apt::isPackageInstalled() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  local package="$1"
  dpkg -l "${package}" | grep -Eq "^ii  ${package}"
}


# @description update apt packages list
# @feature Retry::default
# Linux::requireSudoCommand
# @stdout diagnostics logs
Linux::Apt::update() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  Log::displayInfo "Apt update ..."
  Retry::default sudo apt-get update -y --fix-missing -o Acquire::ForceIPv4=true
}


declare -Agx bash_tools_wslpath=()
# @description retrieve wslpath using cache (cache is refreshed every day)
# @arg $@ args:String[] arguments to pass to wslpath
# @env WSL_TMPDIR String temp directory to store the wslpath cache (default value: PERSISTENT_TMPDIR), you can use TMPDIR instead
# @exitcode * if Linux::Wsl::originalWslpath cannot find the path
# @stderr diagnostics information is displayed
# @feature cache
Linux::Wsl::cachedWslpath2() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  # shellcheck disable=SC2034
  local -n cachedWslpath2_value=$1
  shift || true
  local tempEnvFile key
  tempEnvFile="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_tools_wslpath"

  key="$(Linux::Wsl::getKeyFromWslpathOptions "$@")"
  Cache::getPropertyValue2 \
    "${tempEnvFile}" \
    bash_tools_wslpath \
    cachedWslpath2_value \
    "${key}" \
    Linux::Wsl::originalWslpath "$@"
}


# @description retrieve path from wslvar and then use wslpath to resolve it
# using cache (cache is refreshed every day)
# @arg $1 var:String the var to retrieve using wslvar
# @arg $@ args:String[] (optional) additional arguments to pass to wslvar
# @env WSL_TMPDIR String temp directory to store the wslpath cache (default value: PERSISTENT_TMPDIR), you can use TMPDIR instead
# @exitcode 1 if var cannot be found in cache nor using Linux::Wsl::originalWslvar
# @exitcode 2 if path cannot be found in cache nor using Linux::Wsl::originalWslpath
# @stderr diagnostics information is displayed
# @feature cache
Linux::Wsl::cachedWslpathFromWslVar2() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  # shellcheck disable=SC2034
  local -n cachedWslpathFromWslVar2_value=$1
  shift || true
  local value
  Linux::Wsl::cachedWslvar2 value "$@" || return 1
  Linux::Wsl::cachedWslpath2 cachedWslpathFromWslVar2_value "${value}" || return 2
}


declare -Agx bash_tools_wslvar=()
# @description retrieve wslvar using cache (cache is refreshed every day)
# @arg $1 cachedWslvar2_var:&String the variable to set by reference if the value is found
# @arg $@ args:String[] arguments to pass to wslvar
# @env WSL_TMPDIR String temp directory to store the wslvar cache (default value: PERSISTENT_TMPDIR), you can use TMPDIR instead
# @exitcode * if Linux::Wsl::originalWslvar cannot find the variable
# @stderr diagnostics information is displayed
# @feature cache
Linux::Wsl::cachedWslvar2() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  # shellcheck disable=SC2034
  local -n cachedWslvar2_var="$1"
  shift || true
  local -a args=("$@")
  local tempWslvarFile="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_tools_wslvar"
  local key
  key="$(Linux::Wsl::getKeyFromWslpathOptions "${args[@]}")"
  Cache::getPropertyValue2 \
    "${tempWslvarFile}" \
    bash_tools_wslvar \
    cachedWslvar2_var \
    "${key}" \
    Linux::Wsl::originalWslvar "${args[@]}"
}


# @description Compute a cache from wslpath options
# @arg $@ args:String[] arguments passed to wslpath
# @stderr diagnostics information is displayed
# @stdout the cache key deduced from the options
# @feature cache
# @internal
Linux::Wsl::getKeyFromWslpathOptions() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  local options
  options=$(getopt -o "auwm" -- "$@" 2>/dev/null) || {
    Log::displayError "invalid options specified"
    return 1
  }
  local key="wslpath"
  eval set -- "${options}"
  while true; do
    case "$1" in
      -a | -u | -w | -m)
        key="${key}$1"
        ;;
      --)
        shift || true
        break
        ;;
      *)
        shift || true
        Log::displayWarning "Unknown key $1"
        ;;
    esac
    shift || true
  done
  key="${key}_$1"
  # replace some characters \:/
  key="${key//\\//}"
  key="${key//:/_}"
  key="${key////_}"
  echo "${key}"
}


# @description call simply original wslpath command
# @arg $@ args:String[] args to pass to wslpath
# @exitcode * wslpath exit code
# @stdout wslpath stdout
Linux::Wsl::originalWslpath() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  wslpath "$@" | sed -z '$ s/[\r\n]$//'
}


# @description call simply original wslvar command
# @arg $@ args:String[] args to pass to wslvar
# @exitcode * wslvar exit code
# @stdout wslvar stdout
Linux::Wsl::originalWslvar() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  wslvar "$@" | sed -z '$ s/[\r\n]$//'
}


# @description ensure linux runs under wsl
# @env WSL_GARBAGE_COLLECT int 0 to disable garbage collect of cache files
# @exitcode 1 if linux does not run under wsl
Linux::Wsl::requireWsl() {
  export REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED=1

  Assert::wsl || return 1
  if [[ "${WSL_GARBAGE_COLLECT:-1}" = "1" ]]; then
    local tempEnvDir
    tempEnvDir="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}"
    File::garbageCollect "${tempEnvDir}/bash_tools_wslpath_${USER_ID:-$(id -un)}" "1"
    tempEnvDir="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}"
    File::garbageCollect "${tempEnvDir}/bash_tools_wslvar_${USER_ID:-$(id -un)}" "1"
  fi
}


# @description retrieve linux distributor id
# @noargs
# @exitcode 1 if lsb_release fails or not found
# @stdout the linux distributor id
Linux::getDistributorId() {
  (
    source /etc/os-release
    echo "${ID}"
  )
}


# @description ensure command tar is available
# @exitcode 1 if tar command not available
# @stderr diagnostics information is displayed
Linux::requireTarCommand() {
  export REQUIRE_FUNCTION_LINUX_REQUIRE_TAR_COMMAND_LOADED=1

  Assert::commandExists tar
}


# @description ensure linux distribution is ubuntu
# @exitcode 1 if linux distribution is not ubuntu
Linux::requireUbuntu() {
  export REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED=1

  if ! Array::contains "$(Linux::getDistributorId)" "ubuntu" "debian"; then
    Log::fatal "this script should be executed under Ubuntu or Debian OS"
  fi
}


declare -g FIRST_LOG_DATE LOG_LAST_LOG_DATE LOG_LAST_LOG_DATE_INIT LOG_LAST_DURATION_STR
FIRST_LOG_DATE="${EPOCHREALTIME/[^0-9]/}"
LOG_LAST_LOG_DATE="${FIRST_LOG_DATE}"
LOG_LAST_LOG_DATE_INIT=1
LOG_LAST_DURATION_STR=""

# @description compute duration since last call to this function
# the result is set in following env variables.
# in ss.sss (seconds followed by milliseconds precision 3 decimals)
# @noargs
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @set LOG_LAST_LOG_DATE_INIT int (default 1) set to 0 at first call, allows to detect reference log
# @set LOG_LAST_DURATION_STR String the last duration displayed
# @set LOG_LAST_LOG_DATE String the last log date that will be used to compute next diff
Log::computeDuration() {
  if ((${DISPLAY_DURATION:-0} == 1)); then
    local -i duration=0
    local -i delta=0
    local durationStr deltaStr
    local -i currentLogDate
    currentLogDate="${EPOCHREALTIME/[^0-9]/}"
    if ((LOG_LAST_LOG_DATE_INIT == 1)); then
      LOG_LAST_LOG_DATE_INIT=0
      LOG_LAST_DURATION_STR="Ref"
    else
      duration=$(((currentLogDate - FIRST_LOG_DATE) / 1000000))
      delta=$(((currentLogDate - LOG_LAST_LOG_DATE) / 1000000))
      if ((duration > 59)); then
        durationStr=$(date -ud "@${duration}" +'%H:%M:%S')
      else
        durationStr="${duration}s"
      fi
      if ((delta > 59)); then
        deltaStr=$(date -ud "@${delta}" +'%H:%M:%S')
      else
        deltaStr="${delta}s"
      fi
      LOG_LAST_DURATION_STR="${durationStr}/+${deltaStr}"
    fi
    LOG_LAST_LOG_DATE="${currentLogDate}"
    # shellcheck disable=SC2034
    local microSeconds="${EPOCHREALTIME#*.}"
    LOG_LAST_DURATION_STR="$(printf '%(%T)T.%03.0f\n' "${EPOCHSECONDS}" "${microSeconds:0:3}")(${LOG_LAST_DURATION_STR}) - "
  else
    # shellcheck disable=SC2034
    LOG_LAST_DURATION_STR=""
  fi
}


# @description Display message using debug color (gray)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayDebug() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_DEBUG)); then
    Log::computeDuration
    echo -e "${__DEBUG_COLOR}DEBUG   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logDebug "$1"
}


# @description Display message using error color (red)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayError() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_ERROR)); then
    Log::computeDuration
    echo -e "${__ERROR_COLOR}ERROR   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logError "$1"
}


# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayInfo() {
  local type="${2:-INFO}"
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    Log::computeDuration
    echo -e "${__INFO_COLOR}${type}    - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logInfo "$1" "${type}"
}


# @description Display message using skip color (yellow)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displaySkipped() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    Log::computeDuration
    echo -e "${__SKIPPED_COLOR}SKIPPED - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logSkipped "$1"
}


# @description Display message using info color (blue) but warning level
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayStatus() {
  local type="${2:-STATUS}"
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_WARNING)); then
    Log::computeDuration
    echo -e "${__INFO_COLOR}${type}  - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logStatus "$1" "${type}"
}


# @description Display message using success color (bg green/fg white)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displaySuccess() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    Log::computeDuration
    echo -e "${__SUCCESS_COLOR}SUCCESS - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logSuccess "$1"
}


# @description Display message using warning color (yellow)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayWarning() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_WARNING)); then
    Log::computeDuration
    echo -e "${__WARNING_COLOR}WARN    - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logWarning "$1"
}


# @description Display message using error color (red) and exit immediately with error status 1
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::fatal() {
  Log::computeDuration
  echo -e "${__ERROR_COLOR}FATAL   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  Log::logFatal "$1"
  exit 1
}


# @description Get the text representation of a log level
# @arg $1 level:String the log level to convert
# @exitcode 1 if the level is invalid
Log::getLevelText() {
  local level="$1"
  case "${level}" in
    "${__LEVEL_OFF}")
      echo OFF
      ;;
    "${__LEVEL_ERROR}")
      echo ERROR
      ;;
    "${__LEVEL_WARNING}")
      echo WARNING
      ;;
    "${__LEVEL_INFO}")
      echo INFO
      ;;
    "${__LEVEL_DEBUG}")
      echo DEBUG
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${level}"
      return 1
      ;;
  esac
}


# @description Display given text on full line with TEST_COLOR style
# @arg $1 text:String text to display
Log::headLine() {
  local type="$1"
  local text="$2"
  local message="${type}   - ${text}"
  if [[ -z "${type}" ]]; then
    message="${text}"
  else
    Log::computeDuration
    message="$(printf '%-7s - %s%s' "${type}" "${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}" "${text}")"
  fi
  echo -e "${__TEST_COLOR}$(UI::textLine "${message}" " ")${__RESET_COLOR}" >&2
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logDebug() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_DEBUG)); then
    Log::logMessage "${2:-DEBUG}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logError() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_ERROR)); then
    Log::logMessage "${2:-ERROR}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logFatal() {
  Log::logMessage "${2:-FATAL}" "$1"
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logInfo() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-INFO}" "$1"
  fi
}


# @description Internal: common log message
# @example text
#   [date]|[levelMsg]|message
#
# @example text
#   2020-01-19 19:20:21|ERROR  |log error
#   2020-01-19 19:20:21|SKIPPED|log skipped
#
# @arg $1 levelMsg:String message's level description (eg: STATUS, ERROR, ...)
# @arg $2 msg:String the message to display
# @env BASH_FRAMEWORK_LOG_FILE String log file to use, do nothing if empty
# @env BASH_FRAMEWORK_LOG_LEVEL int log level log only if > OFF or fatal messages
# @stderr diagnostics information is displayed
Log::logMessage() {

  if [[ "${REQUIRE_FUNCTION_ENV_REQUIRE_LOAD_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Env::requireLoad has not been loaded"
    exit 1
  fi

  if [[ "${REQUIRE_FUNCTION_LOG_REQUIRE_LOAD_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Log::requireLoad has not been loaded"
    exit 1
  fi

  local levelMsg="$1"
  local msg="$2"
  local date

  if [[ -n "${BASH_FRAMEWORK_LOG_FILE}" ]] && ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    date="$(date '+%Y-%m-%d %H:%M:%S')"
    touch "${BASH_FRAMEWORK_LOG_FILE}"
    printf "%s|%7s|%s\n" "${date}" "${levelMsg}" "${msg}" >>"${BASH_FRAMEWORK_LOG_FILE}"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logSkipped() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-SKIPPED}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logStatus() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_WARNING)); then
    Log::logMessage "${2:-STATUS}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logSuccess() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-SUCCESS}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logWarning() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_WARNING)); then
    Log::logMessage "${2:-WARNING}" "$1"
  fi
}


# @description activate or not Log::display* and Log::log* functions
# based on BASH_FRAMEWORK_DISPLAY_LEVEL and BASH_FRAMEWORK_LOG_LEVEL
# environment variables loaded by Env::requireLoad
# try to create log file and rotate it if necessary
# @noargs
# @set BASH_FRAMEWORK_LOG_LEVEL int to OFF level if BASH_FRAMEWORK_LOG_FILE is empty or not writable
# @env BASH_FRAMEWORK_DISPLAY_LEVEL int
# @env BASH_FRAMEWORK_LOG_LEVEL int
# @env BASH_FRAMEWORK_LOG_FILE String
# @env BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION int do log rotation if > 0
# @exitcode 0 always successful
# @stderr diagnostics information about log file is displayed
Log::requireLoad() {
  export REQUIRE_FUNCTION_LOG_REQUIRE_LOAD_LOADED=1


  if [[ "${REQUIRE_FUNCTION_ENV_REQUIRE_LOAD_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Env::requireLoad has not been loaded"
    exit 1
  fi

  if [[ "${REQUIRE_FUNCTION_UI_REQUIRE_THEME_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement UI::requireTheme has not been loaded"
    exit 1
  fi

  if [[ -z "${BASH_FRAMEWORK_LOG_FILE:-}" ]]; then
    BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
    export BASH_FRAMEWORK_LOG_LEVEL
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    if [[ ! -f "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      if [[ ! -d "${BASH_FRAMEWORK_LOG_FILE%/*}" ]]; then
        if ! mkdir -p "${BASH_FRAMEWORK_LOG_FILE%/*}" 2>/dev/null; then
          BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
          echo -e "${__ERROR_COLOR}ERROR   - directory ${BASH_FRAMEWORK_LOG_FILE%/*} is not writable${__RESET_COLOR}" >&2
        fi
      elif ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null; then
        BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
        echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
      fi
    elif [[ ! -w "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
    fi
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    # will always be created even if not in info level
    Log::logMessage "INFO" "Logging to file ${BASH_FRAMEWORK_LOG_FILE} - Log level ${BASH_FRAMEWORK_LOG_LEVEL}"
    if ((BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION > 0)); then
      Log::rotate "${BASH_FRAMEWORK_LOG_FILE}" "${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION}"
    fi
  fi
}


# @description To be called before logging in the log file
# @arg $1 file:string log file name
# @arg $2 maxLogFilesCount:int maximum number of log files
Log::rotate() {
  local file="$1"
  local maxLogFilesCount="${2:-5}"

  if [[ ! -f "${file}" ]]; then
    Log::displayDebug "Log file ${file} doesn't exist yet"
    return 0
  fi
  local i
  for ((i = maxLogFilesCount - 1; i > 0; i--)); do
    Log::displayInfo "Log rotation ${file}.${i} to ${file}.$((i + 1))"
    mv "${file}."{"${i}","$((i + 1))"} &>/dev/null || true
  done
  if cp "${file}" "${file}.1" &>/dev/null; then
    echo >"${file}" # reset log file
    Log::displayInfo "Log rotation ${file} to ${file}.1"
  fi
}


declare -Ag allDepsResultSeen=()
declare -ag allDepsResult=()

# @description get recursively all the dependencies of each config from configs arg
#
# The parent argument must be set to "your software selection" when you call it,
# then the value will change when this function will be called recursively with the
# parent dependency
#
# Algorithm
#   For each config in configs
#     - load config definition
#     - mark this config as seen to avoid to recompute it later, in the case where another
#       definition depends on it
#     - call installScripts_${config}_dependencies function if exists (skipped if not)
#     - add these new dependencies if any to current dependencies list
#     - call recursively Profiles::allDepsRecursive with these dependencies
#     - add in allDepsResult the current config if it was not seen yet
#   This has constructed a tree with the most deep dependency present in the first items
#
# @warning allDepsResultSeen and allDepsResult global variables have to reset to empty array every time you call this function
#
# @arg $1 scriptsDir:String base directory where dependencies can be retrieved
# @arg $2 parent:String set to "your software selection" when you call it
# @arg $@ configs:String[] list of configurations to load, each config can depend on an other one
# @exitcode 1 if one of the dependency cannot be found
# @exitcode 2 if error while loading one of the dependency definition
# @exitcode 3 if error while calling dependencies function of the dependency's definition
# @set allDepsResultSeen String[] list of dependencies already seen
# @set allDepsResult String[] the final list of dependencies sorted by the most to less dependent
# @stderr diagnostics information is displayed
Profiles::allDepsRecursive() {
  local scriptsDir="$1"
  local parent="$2"
  shift 2 || true
  local i
  local addDep=0
  local -a deps=()
  local -a newDeps

  for i in "$@"; do
    if [[ "${allDepsResultSeen["${i}"]}" = 'stored' ]]; then
      continue
    fi
    if [[ ! -f "${scriptsDir}/${i}" ]]; then
      Log::displayError "Dependency ${i} doesn't exist"
      return 1
    fi

    if ! readarray -t newDeps < <(SKIP_REQUIRES=1 "${scriptsDir}/${i}" dependencies); then
      Log::displayError "Dependency ${i} - ${scriptsDir}/${i} dependencies failure"
      return 3
    fi
    if [[ -z "${allDepsResultSeen[${i}]+exists}" ]]; then
      addDep=1
      allDepsResultSeen["${i}"]='stored'
    fi
    # remove duplicates from deps preserving order
    mapfile -t deps < <(
      IFS=$'\n'
      printf "%s\n" "${deps[@]}" | awk '!x[$0]++'
    )
    if ((${#newDeps} > 0)); then
      Log::displayInfo "${i} depends on ${newDeps[*]}"
      Profiles::allDepsRecursive "${scriptsDir}" "${i}" "${newDeps[@]}" || return $?
    fi
    if [[ "${addDep}" = "1" ]]; then
      Log::displayInfo "${i} is a dependency of ${parent}"
      allDepsResult+=("${i}")
    fi
    addDep=0
  done
}


# @description deduce profile path from given profile name
# if 2 profiles are named identically the first existing profile
# will be used beginning with srcAlt profiles
# @arg $1 profileName:String
# @stdout the path of the profile, no output if profile not found
# @exitcode 1 if profile not found
Profiles::getProfilePath() {
  local profileName="$1"
  local dir
  for dir in "${BASH_DEV_ENV_ROOT_DIR}/srcAlt/"*; do
    profilePath="${dir}/profiles/profile.${profileName}.sh"
    if [[ -f "${profilePath}" ]]; then
      echo "${profilePath}"
      return 0
    fi
  done
  local profilePath="${BASH_DEV_ENV_ROOT_DIR}/profiles/profile.${profileName}.sh"
  if [[ -f "${profilePath}" ]]; then
    echo "${profilePath}"
    return 0
  fi

  return 1
}


# @description load profile file based on profileFile argument
# The profile file is profileDir/profile.profile.sh
# This file should define the variable CONFIG_LIST with array type
# @arg $1 profileFile:String full profile path
# @exitcode 1 if argument is not provided
# @exitcode 2 if profile not found
# @exitcode 3 if profile found but CONFIG_LIST variable unset
# @exitcode 4 if profile found but CONFIG_LIST variable empty
# @exitcode 5 if error occurs during profile loading
# @stderr diagnostics information is displayed
# @see Profiles::allDepsRecursive in order to load all the dependencies recursively based on this list
# @set CONFIG_LIST
Profiles::loadProfile() {
  local profileFile="$1"

  if [[ -z "${profileFile}" ]]; then
    Log::displayError "This method needs exactly 1 parameter"
    return 1
  fi

  # load the profile
  Log::displayInfo "Loading profile '${profileFile}'"
  if [[ ! -f "${profileFile}" ]]; then
    Log::displayError "profile ${profileFile} not found"
    return 2
  fi

  # shellcheck source=src/Profiles/testsData/profile.test1.sh
  source "${profileFile}" || return 5

  if [[ ! -v CONFIG_LIST ]]; then
    Log::displayError "Profile ${profileFile} missing variable CONFIG_LIST"
    return 3
  fi
  if [[ ${#CONFIG_LIST[@]} -eq 0 ]]; then
    Log::displayError "Profile ${profileFile} variable CONFIG_LIST cannot be empty"
    return 4
  fi

  # remove duplicates from profile preserving order
  mapfile -t CONFIG_LIST < <(
    IFS=$'\n' printf '%s\n' "${CONFIG_LIST[@]}" | Filters::uniqUnsorted
  )
}


# @description Retry a command 5 times with a delay of 15 seconds between each attempt
# @arg $@ command:String[] the command to run
# @exitcode 0 on success
# @exitcode 1 if max retries count reached
# @env RETRY_MAX_RETRY int max retries
# @env RETRY_DELAY_BETWEEN_RETRIES int delay between attempts
Retry::default() {
  Retry::parameterized "${RETRY_MAX_RETRY:-5}" "${RETRY_DELAY_BETWEEN_RETRIES:-15}" "" "$@"
}


# @description Retry a command several times depending on parameters
# @arg $1 maxRetries:int    $1 max retries
# @arg $2 delay:int between attempt
# @arg $3 message:String to display to describe the attempt
# @arg $@ rest of parameters, the command to run
# @exitcode 0 on success
# @exitcode 1 if max retries count reached
# @exitcode 2 if maxRetries invalid value
Retry::parameterized() {
  local maxRetries=$1
  shift || true
  local delayBetweenTries=$1
  shift || true
  local message="$1"
  shift || true
  local retriesCount=1
  if [[ "${maxRetries}" -lt 1 ]]; then
    Log::displayError "invalid maxRetry value"
    return 2
  fi

  while true; do
    Log::displayInfo "Attempt ${retriesCount}/${maxRetries}: ${message}"
    if "$@"; then
      break
    elif [[ "${retriesCount}" -lt "${maxRetries}" ]]; then
      Log::displayDebug "Command failed. Wait for ${delayBetweenTries} seconds"
      ((retriesCount++))
      sleep "${delayBetweenTries}"
    else
      Log::displayError "The command has failed after ${retriesCount} attempts."
      return 1
    fi
  done
  return 0
}


# @description aggregate number of skip/error/... log messages
# and export the result in aggregateStatFile
# @arg $1 statFile:String the current stat file to add to aggregateStatFile
# @arg $2 appCount:int number of app requested to be installed
# @arg $@ statFiles:String[] the files in which each step stats have been aggregated aggregated
# if it doesn't exist, the file is created with needed variables set to 0
# stats will be saved
Stats::aggregateGlobalStats() {
  local aggregateStatFile="$1"
  local appCount="$2"
  shift 2 || true
  local -a statFiles=("$@")

  (
    if [[ ! -f "${aggregateStatFile}" ]]; then
      Stats::aggregateStatsInitialContent "${appCount}" >"${aggregateStatFile}"
    fi
    # shellcheck source=src/Stats/aggregateStats.example
    source "${aggregateStatFile}"

    local -i globalError=0
    local -i globalWarning=0
    local -i globalSkipped=0
    local -i globalHelp=0
    local -i globalSuccess=0
    local -i globalStatus=0
    ((globalDuration = duration)) || true
    for statFile in "${statFiles[@]}"; do
      if [[ ! -f "${statFile}" ]]; then
        continue
      fi
      # shellcheck source=src/Stats/logStats.example
      source "${statFile}"

      # all statuses need to be 0 for global status to be O
      globalError=$((globalError || error))
      globalWarning=$((globalWarning || warning))
      globalSkipped=$((globalSkipped || skipped))
      globalHelp=$((globalHelp || help))
      globalSuccess=$((globalSuccess || success))
      globalStatus=$((globalStatus || status))
      globalDuration=$((globalDuration + duration))
    done
    # shellcheck source=src/Stats/aggregateStats.example
    source "${aggregateStatFile}"
    ((count++)) || true
    if ((globalStatus == 0)); then
      ((statusSuccess++)) || true
    fi
    if ((globalStatus > 0 || globalError > 0)); then
      ((error++)) || true
    fi
    if ((globalWarning > 0)); then
      ((warning++)) || true
    fi
    if ((globalSkipped > 0)); then
      ((skipped++)) || true
    fi
    if ((globalHelp > 0)); then
      ((help++)) || true
    fi
    if ((globalSuccess > 0)); then
      ((success++)) || true
    fi
    (
      echo "count=${count}"
      echo "appCount=${appCount}"
      echo "error=${error}"
      echo "warning=${warning}"
      echo "skipped=${skipped}"
      echo "help=${help}"
      echo "success=${success}"
      echo "duration=${globalDuration}"
      echo "statusSuccess=${statusSuccess}"
    ) >"${aggregateStatFile}"
  )
}


# @description default aggregateStats file Content
Stats::aggregateStatsInitialContent() {
  local appCount="$1"
  echo "count=0"
  echo "appCount=${appCount}"
  echo "error=0"
  echo "warning=0"
  echo "skipped=0"
  echo "help=0"
  echo "success=0"
  echo "duration=0"
  echo "statusSuccess=0"
}


# @description extract stats form log
# @arg $1 logFile:String the log file to parse
# @arg $2 status:int the status of the command associated to that log file
# @arg $3 statsFile:String where to write stats
# @arg $4 startDate:String date at which log started
# @stdout output with the format provided by this example src/Stats/aggregateStats.example
# @see src/Stats/aggregateStats.example
Stats::computeFromLog() {
  local logFile="$1"
  local status="$2"
  local statsFile="$3"
  local startDate="$4"
  local endDate
  endDate="$(date +%s)"
  local duration="$((endDate - startDate))"

  local logStatsAwkScript
  logStatsAwkScript="$(
    cat <<'EOF'
BEGIN {
  error=0
  warning=0
  skipped=0
  help=0
  success=0
}
{
  buffer = substr($0, 1, 20)
  if(match(buffer, /(ERROR)[ ]+- /, arr) != 0) {
    error+=1
  } else if(match(buffer, /(WARNING)[ ]+- /, arr) != 0) {
    warning+=1
  } else if(match(buffer, /(SKIPPED)[ ]+- /, arr) != 0) {
    skipped+=1
  } else if(match(buffer, /(ERROR)[ ]+- /, arr) != 0) {
    error+=1
  } else if(match(buffer, /(HELP)[ ]+- /, arr) != 0) {
    help+=1
  } else if(match(buffer, /(SUCCESS)[ ]+- /, arr) != 0) {
    success+=1
  }

}
END {
  error = (stat != 0) || error
  print "error=" error
  print "warning=" warning
  print "skipped=" skipped
  print "help=" help
  success = (stat == 0) || success
  print "success=" success
}

EOF
  )"

  (
    if [[ -f "${logFile}" ]]; then
      awk -v status="${status}" --source "${logStatsAwkScript}" "${logFile}"
      echo "status=${status}"
      echo "duration=${duration}"
    else
      # not executed
      echo "status=-1"
    fi
  ) >"${statsFile}"
}


# @description display message to reflect last installation status
# @arg $1:statFile
# @arg $2:msg
Stats::statusLine() {
  local statFile="$1"
  local msg="$2"
  if [[ ! -f "${statFile}" ]]; then
    return 0
  fi
  Log::computeDuration
  (
    # shellcheck source=src/Stats/logStats.example
    source "${statFile}" || exit 1

    local color="${__TEST_ERROR_COLOR}"
    local statusMsg
    if [[ "${status}" = "0" ]]; then
      if [[ "${skipped}" = "0" ]]; then
        color="${__SUCCESS_COLOR}"
        statusMsg="SUCCESS - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR}${msg} successful"
      fi
    elif [[ "${status}" = "-1" ]]; then
      statusMsg="ABORTED - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR}${msg} not executed"
    else
      statusMsg="ERROR   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR}${msg} in error"
    fi
    # overwrite final TEST line
    echo -e "${color}${statusMsg}${__RESET_COLOR}"
  )
}


# @description draw a line with the character passed in parameter repeated depending on terminal width
# @arg $1 character:String character to use as separator (default value #)
UI::drawLine() {
  local character="${1:-#}"
  local -i width=${COLUMNS:-0}
  if ((width == 0)) && [[ -t 1 ]]; then
    width=$(tput cols)
  fi
  if ((width == 0)); then
    width=80
  fi
  printf -- "${character}%.0s" $(seq "${COLUMNS:-$([[ -t 1 ]] && tput cols || echo '80')}")
  echo
}


# @description load color theme
# @noargs
# @env BASH_FRAMEWORK_THEME String theme to use
# @env LOAD_THEME int 0 to avoid loading theme
# @exitcode 0 always successful
UI::requireTheme() {
  export REQUIRE_FUNCTION_UI_REQUIRE_THEME_LOADED=1

  if [[ "${LOAD_THEME:-1}" = "1" ]]; then
    UI::theme "${BASH_FRAMEWORK_THEME-default}"
  fi
}


# @description Display given text and complete the rest of the line with given character
# @arg $1 text:String text to display
# @arg $2 character:String (default:#) character to use to complete the line
UI::textLine() {
  local text="$1"
  local character="${2:-#}"
  ((textSize = ${#text}))
  ((fullWith = $(tput cols)))
  ((remainingWidth = $((fullWith - textSize))))
  echo -n "${text}"
  printf '%*s\n' "${remainingWidth}" '' | tr ' ' "${character}"
}


# @description load colors theme constants
# @warning if tty not opened, noColor theme will be chosen
# @arg $1 theme:String the theme to use (default, noColor)
# @arg $@ args:String[]
# @set __ERROR_COLOR String indicate error status
# @set __INFO_COLOR String indicate info status
# @set __SUCCESS_COLOR String indicate success status
# @set __WARNING_COLOR String indicate warning status
# @set __SKIPPED_COLOR String indicate skipped status
# @set __DEBUG_COLOR String indicate debug status
# @set __HELP_COLOR String indicate help status
# @set __TEST_COLOR String not used
# @set __TEST_ERROR_COLOR String not used
# @set __HELP_TITLE_COLOR String used to display help title in help strings
# @set __HELP_OPTION_COLOR String used to display highlight options in help strings
#
# @set __RESET_COLOR String reset default color
#
# @set __HELP_EXAMPLE String to remove
# @set __HELP_TITLE String to remove
# @set __HELP_NORMAL String to remove
# shellcheck disable=SC2034
UI::theme() {
  local theme="${1-default}"
  if [[ ! "${theme}" =~ -force$ ]] && ! Assert::tty; then
    theme="noColor"
  fi
  case "${theme}" in
    default | default-force)
      theme="default"
      ;;
    noColor) ;;
    *)
      Log::fatal "invalid theme provided"
      ;;
  esac
  if [[ "${theme}" = "default" ]]; then
    BASH_FRAMEWORK_THEME="default"
    # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
    __ERROR_COLOR='\e[31m'         # Red
    __INFO_COLOR='\e[44m'          # white on lightBlue
    __SUCCESS_COLOR='\e[32m'       # Green
    __WARNING_COLOR='\e[33m'       # Yellow
    __SKIPPED_COLOR='\e[33m'       # Yellow
    __DEBUG_COLOR='\e[37m'         # Gray
    __HELP_COLOR='\e[7;49;33m'     # Black on Gold
    __TEST_COLOR='\e[100m'         # Light magenta
    __TEST_ERROR_COLOR='\e[41m'    # white on red
    __HELP_TITLE_COLOR="\e[1;37m"  # Bold
    __HELP_OPTION_COLOR="\e[1;34m" # Blue
    # Internal: reset color
    __RESET_COLOR='\e[0m' # Reset Color
    # shellcheck disable=SC2155,SC2034
    __HELP_EXAMPLE="$(echo -e "\e[2;97m")"
    # shellcheck disable=SC2155,SC2034
    __HELP_TITLE="$(echo -e "\e[1;37m")"
    # shellcheck disable=SC2155,SC2034
    __HELP_NORMAL="$(echo -e "\033[0m")"
  else
    BASH_FRAMEWORK_THEME="noColor"
    # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
    __ERROR_COLOR=''
    __INFO_COLOR=''
    __SUCCESS_COLOR=''
    __WARNING_COLOR=''
    __SKIPPED_COLOR=''
    __DEBUG_COLOR=''
    __HELP_COLOR=''
    __TEST_COLOR=''
    __TEST_ERROR_COLOR=''
    __HELP_TITLE_COLOR=''
    __HELP_OPTION_COLOR=''
    # Internal: reset color
    __RESET_COLOR=''
    __HELP_EXAMPLE=''
    __HELP_TITLE=''
    __HELP_NORMAL=''
  fi
}
# FUNCTIONS

# shellcheck disable=SC2034
declare commandFunctionName="installScriptCommand"

defaultBeforeParseCallback() {
  Env::requireLoad
  UI::requireTheme
  Log::requireLoad
  Linux::requireUbuntu
  Linux::Wsl::requireWsl
  InstallScripts::isInterfaceMandatoryFunctionImplemented
}

scriptName() {
  echo "VsCodeConfig"
}

beforeParseCallback() {
  defaultBeforeParseCallback
}

commandHelpFunction() {
  echo "Available commands:"
  echo ""
}

listOrNone() {
  local string="$1"
  if [[ -z "${string:-}" ]]; then
    echo -e "${__HELP_EXAMPLE}None${__HELP_NORMAL}" | sed 's/^/    /'
  else
    echo -ne "${__HELP_OPTION_COLOR}"
    echo -e "${string}" | sed 's/^/    - /'
    echo -ne "${__HELP_NORMAL}"
  fi
}

helpDescriptionFunction() {
  helpDescription
  echo
}

helpLongDescription() {
  helpDescription
}

helpLongDescriptionFunction() {
  helpLongDescription | sed 's/^/  /'
  echo
  echo -e "  ${__HELP_TITLE}List of needed variables:${__HELP_NORMAL}"
  listOrNone "$(listVariables)"
  echo
  local variables
  variables="$(helpVariables)"
  if [[ -n "${variables}" ]]; then
    echo -e "${variables}" | sed 's/^/    /'
    echo
  fi
  echo -e "  ${__HELP_TITLE}List of dependencies:${__HELP_NORMAL}"
  listOrNone "$(dependencies)"
}

isInstallImplemented() {
  ! InstallScripts::scriptFunctionEmpty install
}

isTestInstallImplemented() {
  ! InstallScripts::scriptFunctionEmpty testInstall
}

isConfigureImplemented() {
  ! InstallScripts::scriptFunctionEmpty configure
}

isTestConfigureImplemented() {
  ! InstallScripts::scriptFunctionEmpty testConfigure
}

isCleanBeforeExportImplemented() {
  ! InstallScripts::scriptFunctionEmpty cleanBeforeExport
}

fullScriptName() {
  File::relativeToDir "${REAL_SCRIPT_FILE}" "${BASH_DEV_ENV_ROOT_DIR}"
}

fullScriptOverrideDir() {
  local confDir
  confDir="$(fullScriptName)"
  local dir
  for dir in "${CONF_OVERRIDE_DIRS[@]}"; do
    if [[ -d "${dir}/${confDir//\//@}" ]]; then
      echo "${dir}/${confDir//\//@}"
      return
    fi
  done
  echo "${CONF_OVERRIDE_DIRS[0]}/${confDir//\//@}"
}

argsInstallScriptCommandCallback() {
  if [[ -n "${command}" ]]; then
    case "${command}" in
      isInterfaceImplemented)
        InstallScripts::isInterfaceMandatoryFunctionImplemented
        exit $?
        ;;
      install | testInstall | configure | testConfigure)
        afterParseCallback
        ;;
      *) ;;
    esac
    "${command}"
    exit $?
  fi
}



declare -a BASH_FRAMEWORK_ARGV_FILTERED=()

beforeParseCallback() {
  Env::requireLoad
  UI::requireTheme
  Log::requireLoad
}

copyrightCallback() {
  #
  # shellcheck disable=SC2155,SC2154,SC2250
  echo "Copyright (c) 2024-now François Chastanet"
}

# shellcheck disable=SC2317 # if function is overridden
updateArgListInfoVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(--verbose)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListDebugVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(-vv)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListTraceVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(-vvv)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListEnvFileCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListLogLevelCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListDisplayLevelCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListNoColorCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(--no-color)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListThemeCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListQuietCallback() { :; }

# shellcheck disable=SC2317 # if function is overridden
optionHelpCallback() {
  Log::displayError "optionHelpCallback needs to be overridden"
  exit 0
}

# shellcheck disable=SC2317 # if function is overridden
optionVersionCallback() {
  # shellcheck disable=SC2154
  echo "${SCRIPT_NAME} version 3.0"
  exit 0
}

# shellcheck disable=SC2317 # if function is overridden
optionInfoVerboseCallback() {
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='--verbose'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_INFO}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_INFO}" >>"${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionDebugVerboseCallback() {
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='-vv'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_DEBUG}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_DEBUG}" >>"${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionTraceVerboseCallback() {
  # shellcheck disable=SC2034
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='-vvv'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_TRACE}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_DEBUG}" >>"${overrideEnvFile}"
}

getLevel() {
  local levelName="$1"
  case "${levelName^^}" in
    OFF)
      echo "${__LEVEL_OFF}"
      ;;
    ERR | ERROR)
      echo "${__LEVEL_ERROR}"
      ;;
    WARN | WARNING)
      echo "${__LEVEL_WARNING}"
      ;;
    INFO)
      echo "${__LEVEL_INFO}"
      ;;
    DEBUG | TRACE)
      echo "${__LEVEL_DEBUG}"
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${levelName}"
      return 1
      ;;
  esac
}

getVerboseLevel() {
  local levelName="$1"
  case "${levelName^^}" in
    OFF)
      echo "${__VERBOSE_LEVEL_OFF}"
      ;;
    ERR | ERROR | WARN | WARNING | INFO)
      echo "${__VERBOSE_LEVEL_INFO}"
      ;;
    DEBUG)
      echo "${__VERBOSE_LEVEL_DEBUG}"
      ;;
    TRACE)
      echo "${__VERBOSE_LEVEL_TRACE}"
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${level}"
      return 1
      ;;
  esac
}

# shellcheck disable=SC2317 # if function is overridden
optionDisplayLevelCallback() {
  local level="$2"
  local logLevel verboseLevel
  logLevel="$(getLevel "${level}")"
  verboseLevel="$(getVerboseLevel "${level}")"
  BASH_FRAMEWORK_ARGS_VERBOSE=${verboseLevel}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${logLevel}" >>"${overrideEnvFile}"
}

optionDisplayLevelDefaultValueFunction() {
  Log::getLevelText "${BASH_FRAMEWORK_DISPLAY_LEVEL:-${__LEVEL_INFO}}"
}

# shellcheck disable=SC2317 # if function is overridden
optionLogLevelCallback() {
  local level="$2"
  local logLevel verboseLevel
  logLevel="$(getLevel "${level}")"
  verboseLevel="$(getVerboseLevel "${level}")"
  # shellcheck disable=SC2034
  BASH_FRAMEWORK_ARGS_VERBOSE=${verboseLevel}
  echo "BASH_FRAMEWORK_LOG_LEVEL=${logLevel}" >>"${overrideEnvFile}"
}

optionLogLevelDefaultValueFunction() {
  Log::getLevelText "${BASH_FRAMEWORK_LOG_LEVEL:-${__LEVEL_OFF}}"
}

# shellcheck disable=SC2317 # if function is overridden
optionLogFileCallback() {
  local logFile="$2"
  echo "BASH_FRAMEWORK_LOG_FILE='${logFile}'" >>"${overrideEnvFile}"
}

optionLogFileDefaultValueFunction() {
  # shellcheck disable=SC2016
  echo "${BASH_FRAMEWORK_LOG_FILE:-"${FRAMEWORK_ROOT_DIR}/logs/${SCRIPT_NAME}.log"}"
}

# shellcheck disable=SC2317 # if function is overridden
optionQuietCallback() {
  echo "BASH_FRAMEWORK_QUIET_MODE=1" >>"${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionNoColorCallback() {
  UI::theme "noColor"
}

# shellcheck disable=SC2317 # if function is overridden
optionThemeCallback() {
  UI::theme "$2"
}

displayConfig() {
  echo "Config"
  UI::drawLine "-"
  local var
  while read -r var; do
    printf '%-40s = %s\n' "${var}" "$(declare -p "${var}" | sed -E -e 's/^[^=]+=(.*)/\1/')"
  done < <(typeset -p | awk 'match($3, "^(BASH_FRAMEWORK_[^=]+)=", m) { print m[1] }' | sort)
  exit 0
}

optionBashFrameworkConfigCallback() {
  if [[ ! -f "$2" ]]; then
    Log::fatal "Command ${SCRIPT_NAME} - Bash framework config file '$2' does not exists"
  fi
}

overrideEnvFile="$(Framework::createTempFile "overrideEnvFile")"

commandOptionParseFinished() {
  # shellcheck disable=SC2154
  if [[ -f "${optionBashFrameworkConfig}" ]]; then
    files+=("${optionBashFrameworkConfig}")
  fi
  files+=("${overrideEnvFile}")
  Env::requireLoad "${files[@]}"
  Log::requireLoad
  # shellcheck disable=SC2154
  if [[ "${optionConfig}" = "1" ]]; then
    displayConfig
  fi
}


Linux::requireTarCommand
Compiler::Embed::extractDirFromBase64 \
  "${PERSISTENT_TMPDIR:-/tmp}/5f3003fa82c6acea2945d5a200993a6e6257aadc1350a6b133c23cad07ae57a5/conf_dir" \
  "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 \
2tgiRyUi200XdLc/Bys+TreyiCspBmeQh1umGgetDrViwy7qcGHvr93Auz7u/ZECOFBU89xarol1 \
CY6PFIyyNc4Ov4u4kDr1zWyNXpWcEecLlYXr59cvXxz1/EA3NyZ4b9R0MuJI6T8AGxJ1UNANtemJ \
vv3d6mdOC+fqy2v08uUszQ3atpVzFzcP4JJmjFm87a5p38qlc+7FtL0+Xg+dDdVmaZ2oE2VpdWyC \
9atQipiBbpOdLp8aGn2naxebcND4qMph4RFqjeFBDJmxrLUffmftz1vgpl6XU3UBBN+ygnEdNURf \
8cxAdNXsUrZHoYuqKmV+UHFCimzYmNSWr82K0Zc4W1nGPXWLzgsmDk6GV509nSd4MJ4io5qqh8tr \
T9U85NYl/ZtRs484rOb08QA0Ut5mKd8Oaixi7MT14US7P9esiXXwGY6pjvk1xfAsrxaf/Ez3YmJc \
pMnJuoT460D9PXXD3Dh5fDKZynaKQ1y7b3xbJ7L13vjQXnJq8FTefzPc/j6UzeWSqjlnZqp65oLs \
SVonifo5uLjrvrXXWN2H0VWU/v5J9/yQKKPwv26Np3NktWehvzVZxqhbTNY/i1tprXbfxWS1pw+/ \
OVmXzCzuBh6H/5pZC2cWF5yx/4/MrIO4yr0/3Ifu26vWM868SD7wiDPE9FXLznu5fUrUF3bhbE6i \
eFuHSVxuZTFo1MhkDXbTiN2v4s02iTdbEy2mbUyrcG9Y3oR93kp+G2Yf7bB9CfX+6ndeqP4ard+k \
IA8Zvx2yGUn1d1jjhORpasRN+s8bPbxxlj4bIXWYIwgagLxKhUyrv9WxkAMKUGM2QPV3prZp6dkY \
xofq75CosiWmY9aYKiaEF0XY01D6nlwUWX5Ee+CEThMRq38rqTNSHTEPQp9x44FWxkI+Y8W7uErk \
EQtD/UfXi9O8roam1ctRXeapv419l9ZHbWIXu3hQfiRl9J++vDPAxx0lrvo7aGgwb8Zl5dxIQ+gH \
zeQoK1bV5TNWvKrkrnGBHXcu0n9mq4+xIy/AbnMplxVVacc8S7+t0zRON2/NVfm4BcejpMmZ2gzJ \
TTMt9C31xBCaPycgBnwxzHVMCuWKhQ1jpBhTjvWfo2rT/GCwq5iwsnqr3yc+m2tWz9zRAnzFs/QE \
r7vXw5es3PtYbJQBNaDDgQ50ULc2FHjRxM074oATOIw0No1+mNi7nhufUpaKtyyRVSXtXVHbnPFt \
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 \
HXTTVBZyqpf45l5uskQ3i8ids75TWb2r6P1s1J9LlBeDN0dtsdUr791TbEfh55vvrv/2/ruXv4wa \
37m2XfyjLNffm23y9m7U6PW5rla6aPTYoa0ZCz/quumPPMUCj4j6ay+zwr5yDrWtO+0b2/X85uUx \
qrNkhLNV1M5Z4/bZ6GKZ7T38bO6LvWeiyz1fr3+82Qf78ubjTVvWek/eiRPZ6anfHhDny+fpn/70 \
9LcPummbJ635/+dT57jTbrYlqiEC1pa8ftkzOWZxWYy0jrVqdZ2pPDTfnWvgUXtE2nS9P2dWf7AB \
JRfNqnx4bf3GPe/f6u/27F11zR2ZuWhD2yflnbnNMILGoZ5+0I07F7CjYM9JWze9/f63WFVmHHxe \
/NpMDsp+3QezWKvqSTD6tM6Kxa/N1qdk0e7S+nS6wHYP0IRS2/jI3e4B/rPxpz/1r/J78N6hSg/t \
v4R5Gd/Zz0+CR1Vbe+i7J0FVVGuXZWaqJ0G0cTnbZ4i2pza6HpHtPxnobRYala8Xn7ozR5sMI9W4 \
/f+nyU5ua6l03nSe7Xz29/3jQlbVpsjaoZhF96W25lZ7UP40UP/9b4afQq31ZzO4XMbOPny91m23 \
4+isGacdK8pVogfCOxvV9iFbjrP2Ldpm7ku1s5HfHh8jy/1WL2vV6qSb8f3ubOEmZd9xf7r5fqwi \
7sHu7y9HeKPq2DtHG7J2K8Oub6MZeQy2tbEz04PvpL7wcHB8M2z0Po8kdO3sM4J3dbmu2p1iuy3A \
aJcZ2BbUxf0zU4ms/nx7e3t789gU9t7UJOJ1stCf9BZzh7BavcZoC2nA+WWrcqo7Lf3lVJ3jdbK/ \
sjbirmpWR6U7AO0jYdt4npCun5l6/fT6h5dvf7qZVvehyb+wumP7vRGv+7q42Q2+78JxPb4u3tmn \
8n2Q+33Xv0s7lq3t+ge1bH5a6eLdxvXLrTEysc8p9CcbfMZHHLCmrKON0Baqd8Qf2hfQzcJFDf7u \
0L3ikcvD5n66wxv0iQMZnfKwP/vDarOOmkUS7c8+7wJ1O/vjx+rRTo4fPx5grXo0usbHzsjq/LvF \
tC6LVhfJXrhp95g0gvs1nWWt87JJp/czc7Knj3rtxmftG0VVGX9Mc9WsrpXfxnwh7RPV8g+v/FP7 \
PQwcQpz0XQP1+bb4fPXk6k4/RmYm6wxoxh+sPdjTp8E7M3yCx3JTB3f6Meiyg6wI2lXWBGYtCNoy \
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 \
yAqzGyCn7CFP4GGsVEi0HupQIxuljqBqcXtIrOpmNVvI0CB5Y2tAP/BiRZT0mKicAdvnibpapyEN \
FfUapYFcFzuBRVaI2Pc6ZEUKqOeagZVmPEBwaIdqRa3GAySdtQdbx5DqPI8WYjH806+PXgD3+1/m \
i7nf3Ae/ma3ny2VOzX3g28v7OZo9Fy3J4aGbd/Nt+4bY040kSp0+P3zI8fiU6XMyPr9H5WNvThnh \
+plFHR4yfOat5tt1Xiym82VZXfNqWXxT0b9eltVVZz9a9O/zzZe/rMdPfVxg8NKl8h1f2+0+ty/U \
jJxwf8LfMVnz98itxfFuNl+u97vm0onPYvvU1tEx0b7NZzfz3ewmL5sX6143+7m7F2d+fPXrr69+ \
/T/+y//+N/qvvwDgd991L5quUp52Hz9WGUopxYjNb6XUw99asVbSf2u/a2St/stEfSwGxv7ttzu/ \
+S/qg8t6XLn/j/z7R3N3wKtPX7Xt/+qT4ZqGV5+++sePy8nkcHHDj68+nTSf6sf+2oi42Kd8lFLT \
/vVff/fzz+v75mm1n3+uic31AU36r5/0OXS7RY+uHGjuDnrT3QD26eTHV7f3YdPe8dXR1OHebN3c \
3L25X8aK1RmWDqF7aad7bGm2X8539e/2qGLqWbmE/tmmre1fDnWavhvYaMDtA3D2MHH9APzXmuW/ \
ztb3D77+8Lr91H75aWCpuzztbr6c3/n1LB84f1jTNC/lyw7X//J6dbfe75qtsj80b61+OlEV89cf \
l7+++uToVOWrT1+1Cj0vd/Myb2zx0eVTf92/y5u4ae7KW6TpYtvelLLfdwhkqfpxNJXi9RSN8VPr \
U55qo3wNy0SJa8+Lpvl2vfD33/ZXU7Q5Tvoc/Xq96K/9iav10dufn5xnL+6Kat+E6h8tnS47czdw \
CEYwotipYYdT5FCmHpRMa7jugY0JXp3msHlBatKdzZn8y7f5/W/PstpcojHC6UMz9ZjDiD7nPC0W \
cYompmkgk6daa5PRmqI9n+awfft58voo1w9nbjq4hQOHkqMkzjwN1uUpxkhTTy5ME0dMYCwgl2s4 \
nAwvQb+EzduQl4v+XO/TZ9EGbktxXHTAqcdgp0i5TG2OZRrBQFQxCEV7mtsf8nY36d+Ymfzx65f3 \
zMMjX2Hh49tpWW3u/G73mFVLLjOqOI2aZIqS/NSyc1OnrApWR2tEn2b185rt5KsH2X4gp83L0a1W \
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 \
pV7RNvO0NuxPfKMRb4/87gM632rg7twjeheSnMexe/a9D8zz+jqtmqe59vFU9dA/4/IIrdtptWmz \
L4+jqj/Gv+qkc2eu/n65fs4sJWuqsnMvP17bx9G8ll/pcpt3OonGL61GdaPbcAwzlNkX8dXVu9ID \
nGm1mvzu4XEUa70tU92Ed14v436e1zbYDv901pWdcaapuldFoeJLxTWzLmv95Uru57XHr23lz/Jc \
M1TMrES/ctA6vzS61/GjjUtt1+T14zhqlbVb1yrTvJ5n3/511uPRRFRuV7p75Nn9qlGquNs89hqC \
Oxf1OCsI/SP6/drLi+vXXuA8f7ctys9XCmxey+9uYj5KEX7XsN7aefM/tpfPP2a2/e021k2pO90+ \
ng9RfjFue1sVF3u58+pQVqmO+hhVj+IqhoAERkiP5I72d0XTlY76w0rXjCbzSgsTnMcZq7Ji211u \
UmbO9LdtnkRdvnkkdVKjXc5vTrwOXtX7pvoYDqR98yVVY0DSa8eNmYvcNozgFc0wz2r0a8F59Tgt \
sVG32kwyP382CVePSfNGwf519UdtkCODxuOs+di1vMfxO8u8rq8ZieZNMvrH3zajownfvJDEaNbX \
adXkYr2/j3EhyZn7ZKpT0X2jylVh3ed8o5pL52TzdGg/lu03GIOceHYuhFywSjFJtNH1xQQnNxhG \
d16++UpKXFTJbbJWeXn1xGFeb31Z1x90qTZ65NxfWqV5evl3F3Dnz3nbtY+7dVvVumzbtT/ccu2S \
18zVZoj7w3CPI7ZtGU7ofHMzV6hOP9LSZlelFw/68/Zb6nv1OH3OGM4wS3gch8X4W23XaLWJ1HCQ \
4ZFcO7fUVKj4Uu25YJz/iuWTeY1y7d7NzAaB0TB7vtp/nLsv1ekvkVWwdVV/RfvPXfZXd1WTd7qN \
rjgUME96RbWybfNY+wlDFa414rNnWoWKo/4k+eP0x7Xq+jHWeMc3fTjhb796tl/Uq7xNqubS/bGZ \
DoSq642qH2cJQv2WVl81F8LzykFRUlTb9MO2vNoGzK3QttFRXRV58kjbJLvbSmGj4QoLimYfTSj0 \
xUst83Qrr8o81VHWrlVzqYqheXOY9l6tVrpZb+PHod+p9rbvi5eWMM8fWuVtV6tLe/dM9r3T/mH/ \
LPw3H4gfv4QjVXnkFSPszMrzOn/kgoLXevU4eZHLt3Mt5Jv3+SZP8+3Fx0dnH6yu6osHkXn6RVxr \
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 \
/8t//18AAAD//5BzpY8A+AwA"

declare -gx embed_dir_conf_dir="${PERSISTENT_TMPDIR:-/tmp}/5f3003fa82c6acea2945d5a200993a6e6257aadc1350a6b133c23cad07ae57a5/conf_dir"


helpDescription() {
  echo "VsCode default configuration"
}

dependencies() {
  # needs nodes with hjson package
  echo "installScripts/NodeDependencies"
}

fortunes() {
  echo -e "${__INFO_COLOR}$(scriptName)${__RESET_COLOR} -- code -- will launch visual studio code."
  echo "%"
}

# jscpd:ignore-start
listVariables() { :; }
helpVariables() { :; }
defaultVariables() { :; }
checkVariables() { :; }
breakOnConfigFailure() { :; }
breakOnTestFailure() { :; }
# jscpd:ignore-end

install() {
  if ! command -v code &>/dev/null; then
    Log::displaySkipped "You must install vscode in windows before running that script"
    return 0
  fi
  # vscode is preinstalled
  Log::displayInfo "Make vscode download vscode server"
  code --help >/dev/null
}

testInstall() {
  if ! command -v code &>/dev/null; then
    Log::displaySkipped "You must install vscode in windows before running that script"
    return 0
  fi
  Assert::commandExists code
}

installVsCodeExtension() {
  local extensions=("$@")
  local -i batchSize=10
  local -i total=${#extensions[@]}
  local -i i=0
  local -i currentBatchNumber=1

  while ((i < total)); do
    local batch=("${extensions[@]:${i}:${batchSize}}")
    local -a cmd=(code)
    for extension in "${batch[@]}"; do
      cmd+=(--install-extension "${extension}")
    done
    Log::displayInfo "Installing VSCode extensions batch ${currentBatchNumber} ${i}-$((i + batchSize)) of ${total}: ${batch[*]} ..."
    if Retry::parameterized \
      "${RETRY_MAX_RETRY:-5}" \
      "batch ${i}-$((i + batchSize)) of ${total}" \
      "${RETRY_DELAY_BETWEEN_RETRIES:-15}" \
      "${cmd[@]}"; then
      Log::displaySuccess "VSCode extensions batch ${currentBatchNumber} successfully installed"
    else
      Log::displayError "Something went wrong while installing VS code extensions '${batch[*]}'"
    fi
    ((i += batchSize))
    ((++currentBatchNumber))
  done
}

configure() {
  if ! command -v code &>/dev/null; then
    Log::displaySkipped "You must install vscode in windows before running that script"
    return 0
  fi
  local installedExtensions
  installedExtensions="$(code --list-extensions | tr '[:upper:]' '[:lower:]' | sort)"

  local configDir
  # shellcheck disable=SC2154
  configDir="$(Conf::getOverriddenDir "${embed_dir_conf_dir}" "$(fullScriptOverrideDir)")"

  local extensions extensionsCount
  # shellcheck disable=SC2154
  extensions="$(
    awk \
      '!/^#/{for(i=1;i<=NF;i++)if($i!="")names[$i]++}END{for(n in names)print n}' \
      "${configDir}/vscode-extensions-by-profile"/*.md |
      tr '[:upper:]' '[:lower:]' |
      sort
  )"
  extensionsCount="$(echo "${extensions}" | grep -c -v -e '^$')" || true

  local diffInstalledExtensions diffInstalledExtensionsCount
  diffInstalledExtensions="$(comm -12 <(echo "${installedExtensions}") <(echo "${extensions}"))"
  diffInstalledExtensionsCount="$(echo "${diffInstalledExtensions}" | grep -c -v -e '^$')" || true
  if ((diffInstalledExtensionsCount > 0)); then
    Log::displayInfo "${diffInstalledExtensionsCount}/${extensionsCount} extensions already installed:"
    echo "${diffInstalledExtensions}" | paste -s -d, -
  fi

  # Get extensions to install
  local -a toInstallArray
  mapfile -t toInstallArray < <(
    comm -13 <(echo "${installedExtensions}") <(echo "${extensions}")
  )
  installVsCodeExtension "${toInstallArray[@]}"

  local vsCodeSettingsDir
  if Assert::wsl; then
    # ability to mount wsl folder inside windows visual studio code
    Retry::default installVsCodeExtension "ms-vscode-remote.remote-wsl"
    vsCodeSettingsDir="${HOME}/.vscode-server/data/Machine"
  else
    vsCodeSettingsDir="${HOME}/.config/Code/User"
  fi

  BACKUP_BEFORE_INSTALL=1 Install::file \
    "${configDir}/keybindings.json" "${vsCodeSettingsDir}/keybindings.json"
  BACKUP_BEFORE_INSTALL=1 Install::file \
    "${configDir}/settings.json" "${vsCodeSettingsDir}/settings.json"

  sed -i -E \
    "s/\"jenkins.pipeline.linter.connector.user\": \"[^\"]*\",/\"jenkins.pipeline.linter.connector.user\": \"${LDAP_LOGIN}\",/g" \
    "${vsCodeSettingsDir}/settings.json"

  code --update-extensions
}

testConfigure() {
  if ! command -v code &>/dev/null; then
    Log::displaySkipped "You must install vscode in windows before running that script"
    return 0
  fi
  local -i failures=0

  local vsCodeSettingsDir
  if Assert::wsl; then
    vsCodeSettingsDir="${HOME}/.vscode-server/data/Machine"
  else
    vsCodeSettingsDir="${HOME}/.config/Code/User"
  fi
  Assert::fileExists "${vsCodeSettingsDir}/keybindings.json" || ((++failures))
  Assert::fileExists "${vsCodeSettingsDir}/settings.json" || ((++failures))

  exit "${failures}"
}



softwareArgHelpFunction() {
  echo "    List of softwares to install (--profile option cannot be used in this case)"
  echo "    See below for complete list of softwares available"
}

profileHelpFunction() {
  echo "    Profile name to use that contains all the softwares to install"
}

profilesHelpList() {
  echo -e "  ${__HELP_TITLE_COLOR}Available profiles:${__RESET_COLOR}"
  (
    Conf::list "${BASH_DEV_ENV_ROOT_DIR}/profiles" "profile." ".sh" "-type f" "    - "
    local dir
    for dir in "${BASH_DEV_ENV_ROOT_DIR}/srcAlt/"*; do
      if [[ -d "${dir}/profiles" ]]; then
        Conf::list "${dir}/profiles" "profile." ".sh" "-type f" "    - "
      fi
    done
  ) | sort | uniq
}

validateProfile() {
  local profileName="$2"
  if ! Profiles::getProfilePath "${profileName}" &>/dev/null; then
    Log::fatal "Profile file profile.${profileName}.sh doesn't exist in any profiles directory"
  fi
}

commandCallback() {
  if ((${#CONFIG_LIST} > 0)); then
    if [[ -n "${PROFILE}" ]]; then
      Log::fatal "You cannot combine profile and softwares"
    fi
    # check if each Softwares exists
    local software
    for software in "${CONFIG_LIST[@]}"; do
      if [[ ! -f "${BASH_DEV_ENV_ROOT_DIR}/${software}" ]]; then
        Log::fatal "Software ${software} configuration does not exists"
      fi
    done
  elif [[ -z "${PROFILE}" ]]; then
    Log::fatal "You must specify either a list of softwares, either a profile name"
  else
    # get profile path
    local profilePath
    profilePath="$(Profiles::getProfilePath "${PROFILE}")" # should succeed as it was tested by option
    # load selected profile
    Profiles::loadProfile "${profilePath}"
  fi
  if [[ "${SKIP_DEPENDENCIES:-0}" = "0" ]]; then
    CONFIG_LIST=("${CONFIG_LIST[@]}")

    declare rootDependency="your software selection"
    if [[ -n "${PROFILE}" ]]; then
      rootDependency="profile ${PROFILE}"
    fi
    # deduce dependencies
    declare -ag allDepsResult=()
    # shellcheck disable=SC2034
    declare -Ag allDepsResultSeen=()
    Profiles::allDepsRecursive \
      "${BASH_DEV_ENV_ROOT_DIR}" "${rootDependency}" "${CONFIG_LIST[@]}"

    CONFIG_LIST=("${allDepsResult[@]}")
  fi
  if ((${#CONFIG_LIST} == 0)); then
    Log::fatal "Softwares list is empty"
  fi
}

export CONFIG_LIST
export PROFILE



generateSoftwaresList() {
  local directory="$1"
  local relativeDir="$2"
  local description list softName

  list="$(
    Conf::list "${directory}" "" "" "-type f" "" |
      grep -v -E '^(_.*|MandatorySoftwares)$' || true
  )"
  local -i maxLineLength
  maxLineLength="$(wc -L <<<"${list}")"
  ((maxLineLength += 1 + ${#relativeDir}))
  while read -r soft; do
    softName="${soft}"
    description="$(SKIP_REQUIRES=1 "${directory}/${soft}" helpDescription 2>/dev/null)"
    if [[ -z "${description}" ]]; then
      description="<No description available>"
    fi
    description="$(printf -- '_%.0s' $(seq "$((maxLineLength - ${#softName} - 1 - ${#relativeDir} + 1))")) ${description}"
    description="  - ${__HELP_TITLE_COLOR}${relativeDir}/${softName} ${__HELP_EXAMPLE}${description}${__RESET_COLOR}"
    echo -e " ${description}" | sed '2,$s/^/      /'
  done <<<"${list}"
}

softwaresListCacheFile() {
  local relativeDir="$1"
  directoryName="$(sed -E 's#/#_#g' <<<"${relativeDir}")"
  echo "${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_dev_env_${directoryName}_arg_help_cache"
}

generateSoftwaresListCache() {
  local directory="$1"
  local relativeDir="$2"
  local softwaresListHelpTempFile="$3"

  if [[ ! -f "${softwaresListHelpTempFile}" ]] ||
    (($(File::elapsedTimeSinceLastModification "${softwaresListHelpTempFile}") > help_cache_max_duration)); then
    echo >&2 -n "Generating softwares list cache (directory ${relativeDir}) ..."
    generateSoftwaresList "${directory}" "${relativeDir}" >"${softwaresListHelpTempFile}" || rm -f "${softwaresListHelpTempFile}"
    echo >&2 -e "\033[2K" # erase line (Generating softwares list cache ...)
  fi
}

displayAvailableSoftwares() {
  local directory="$1"

  local relativeDir
  relativeDir="$(File::relativeToDir "${directory}" "${BASH_DEV_ENV_ROOT_DIR}")"
  local softwaresListHelpTempFile
  softwaresListHelpTempFile="$(softwaresListCacheFile "${relativeDir}")"
  generateSoftwaresListCache "${directory}" "${relativeDir}" "${softwaresListHelpTempFile}"
  echo -e "  ${__HELP_TITLE_COLOR}Available Softwares (directory ${relativeDir}):${__RESET_COLOR}"
  cat "${softwaresListHelpTempFile}"
}

declare -i help_cache_max_duration=86400



optionHelpCallback() {
  "VsCodeConfigCommandHelp"
  exit 0
}

defaultBeforeParseCallback() {
  Env::requireLoad
  UI::requireTheme
  Log::requireLoad
  Linux::requireUbuntu
  Linux::Wsl::requireWsl
}

beforeParseCallback() {
  defaultBeforeParseCallback
}

defaultAfterParseCallback() {
  Engine::Config::loadConfig
}

afterParseCallback() {
  defaultAfterParseCallback
}


# ------------------------------------------
# Command VsCodeConfigCommand
# ------------------------------------------

# options variables initialization
declare SKIP_CONFIGURE="0"
declare SKIP_INSTALL="0"
declare SKIP_TEST="0"
declare SKIP_DEPENDENCIES="0"
declare PREPARE_EXPORT="0"
declare PROFILE=""
declare optionHelp="0"
declare optionConfig="0"
declare optionBashFrameworkConfig=""
declare optionInfoVerbose="0"
declare optionDebugVerbose="0"
declare optionTraceVerbose="0"
declare optionLogLevel="optionLogLevelDefaultValueFunction"
declare optionLogFile="optionLogFileDefaultValueFunction"
declare optionDisplayLevel="optionDisplayLevelDefaultValueFunction"
declare optionNoColor="0"
declare optionTheme="default"
declare optionVersion="0"
declare optionQuiet="0"
# arguments variables initialization
declare command="install"
# @description parse command options and arguments for VsCodeConfigCommand
VsCodeConfigCommandParse() {
  Log::displayDebug "Command ${SCRIPT_NAME} - parse arguments: ${BASH_FRAMEWORK_ARGV[*]}"
  Log::displayDebug "Command ${SCRIPT_NAME} - parse filtered arguments: ${BASH_FRAMEWORK_ARGV_FILTERED[*]}"
  SKIP_CONFIGURE="0"
  local -i options_parse_optionParsedCountSKIP_CONFIGURE
  ((options_parse_optionParsedCountSKIP_CONFIGURE = 0)) || true
  SKIP_INSTALL="0"
  local -i options_parse_optionParsedCountSKIP_INSTALL
  ((options_parse_optionParsedCountSKIP_INSTALL = 0)) || true
  SKIP_TEST="0"
  local -i options_parse_optionParsedCountSKIP_TEST
  ((options_parse_optionParsedCountSKIP_TEST = 0)) || true
  SKIP_DEPENDENCIES="0"
  local -i options_parse_optionParsedCountSKIP_DEPENDENCIES
  ((options_parse_optionParsedCountSKIP_DEPENDENCIES = 0)) || true
  PREPARE_EXPORT="0"
  local -i options_parse_optionParsedCountPREPARE_EXPORT
  ((options_parse_optionParsedCountPREPARE_EXPORT = 0)) || true
  PROFILE=""
  local -i options_parse_optionParsedCountPROFILE
  ((options_parse_optionParsedCountPROFILE = 0)) || true
  optionHelp="0"
  local -i options_parse_optionParsedCountOptionHelp
  ((options_parse_optionParsedCountOptionHelp = 0)) || true
  optionConfig="0"
  local -i options_parse_optionParsedCountOptionConfig
  ((options_parse_optionParsedCountOptionConfig = 0)) || true
  optionBashFrameworkConfig=""
  local -i options_parse_optionParsedCountOptionBashFrameworkConfig
  ((options_parse_optionParsedCountOptionBashFrameworkConfig = 0)) || true
  optionInfoVerbose="0"
  local -i options_parse_optionParsedCountOptionInfoVerbose
  ((options_parse_optionParsedCountOptionInfoVerbose = 0)) || true
  optionDebugVerbose="0"
  local -i options_parse_optionParsedCountOptionDebugVerbose
  ((options_parse_optionParsedCountOptionDebugVerbose = 0)) || true
  optionTraceVerbose="0"
  local -i options_parse_optionParsedCountOptionTraceVerbose
  ((options_parse_optionParsedCountOptionTraceVerbose = 0)) || true
  optionLogLevel="optionLogLevelDefaultValueFunction"
  local -i options_parse_optionParsedCountOptionLogLevel
  ((options_parse_optionParsedCountOptionLogLevel = 0)) || true
  optionLogFile="optionLogFileDefaultValueFunction"
  local -i options_parse_optionParsedCountOptionLogFile
  ((options_parse_optionParsedCountOptionLogFile = 0)) || true
  optionDisplayLevel="optionDisplayLevelDefaultValueFunction"
  local -i options_parse_optionParsedCountOptionDisplayLevel
  ((options_parse_optionParsedCountOptionDisplayLevel = 0)) || true
  optionNoColor="0"
  local -i options_parse_optionParsedCountOptionNoColor
  ((options_parse_optionParsedCountOptionNoColor = 0)) || true
  optionTheme="default"
  local -i options_parse_optionParsedCountOptionTheme
  ((options_parse_optionParsedCountOptionTheme = 0)) || true
  optionVersion="0"
  local -i options_parse_optionParsedCountOptionVersion
  ((options_parse_optionParsedCountOptionVersion = 0)) || true
  optionQuiet="0"
  local -i options_parse_optionParsedCountOptionQuiet
  ((options_parse_optionParsedCountOptionQuiet = 0)) || true

  command="install"

  local -i options_parse_argParsedCountCommand
  ((options_parse_argParsedCountCommand = 0)) || true


  # shellcheck disable=SC2034
  local -i options_parse_parsedArgIndex=0
  while (($# > 0)); do
    local options_parse_arg="$1"
    local argOptDefaultBehavior=0
    case "${options_parse_arg}" in
      # Option 1/19
      # SKIP_CONFIGURE alts --skip-config|--skip-configure|--skip-configuration|-sc
      # type: Boolean min 0 max 1
      --skip-config | --skip-configure | --skip-configuration | -sc)
        # shellcheck disable=SC2034
        SKIP_CONFIGURE="1"

        if ((options_parse_optionParsedCountSKIP_CONFIGURE >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_CONFIGURE))
        ;;

      # Option 2/19
      # SKIP_INSTALL alts --skip-install|--skip-installation|-si
      # type: Boolean min 0 max 1
      --skip-install | --skip-installation | -si)
        # shellcheck disable=SC2034
        SKIP_INSTALL="1"

        if ((options_parse_optionParsedCountSKIP_INSTALL >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_INSTALL))
        ;;

      # Option 3/19
      # SKIP_TEST alts --skip-test|--skip-tests|-st
      # type: Boolean min 0 max 1
      --skip-test | --skip-tests | -st)
        # shellcheck disable=SC2034
        SKIP_TEST="1"

        if ((options_parse_optionParsedCountSKIP_TEST >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_TEST))
        ;;

      # Option 4/19
      # SKIP_DEPENDENCIES alts --skip-deps|--skip-dependencies|-sd
      # type: Boolean min 0 max 1
      --skip-deps | --skip-dependencies | -sd)
        # shellcheck disable=SC2034
        SKIP_DEPENDENCIES="1"

        if ((options_parse_optionParsedCountSKIP_DEPENDENCIES >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_DEPENDENCIES))
        ;;

      # Option 5/19
      # PREPARE_EXPORT alts --prepare-export|-e
      # type: Boolean min 0 max 1
      --prepare-export | -e)
        # shellcheck disable=SC2034
        PREPARE_EXPORT="1"

        if ((options_parse_optionParsedCountPREPARE_EXPORT >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountPREPARE_EXPORT))
        ;;

      # Option 6/19
      # PROFILE alts --profile|-p
      # type: String min 0 max 1
      --profile | -p)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi

        if ((options_parse_optionParsedCountPROFILE >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountPROFILE))
        # shellcheck disable=SC2034
        PROFILE="$1"
        validateProfile "${options_parse_arg}" "${PROFILE}"

        ;;

      # Option 7/19
      # optionHelp alts --help|-h
      # type: Boolean min 0 max 1
      --help | -h)
        # shellcheck disable=SC2034
        optionHelp="1"

        if ((options_parse_optionParsedCountOptionHelp >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionHelp))
        optionHelpCallback "${options_parse_arg}" "${optionHelp}"

        ;;

      # Option 8/19
      # optionConfig alts --config
      # type: Boolean min 0 max 1
      --config)
        # shellcheck disable=SC2034
        optionConfig="1"

        if ((options_parse_optionParsedCountOptionConfig >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionConfig))
        ;;

      # Option 9/19
      # optionBashFrameworkConfig alts --bash-framework-config
      # type: String min 0 max 1
      --bash-framework-config)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionBashFrameworkConfig >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionBashFrameworkConfig))
        # shellcheck disable=SC2034
        optionBashFrameworkConfig="$1"
        optionBashFrameworkConfigCallback "${options_parse_arg}" "${optionBashFrameworkConfig}"

        ;;

      # Option 10/19
      # optionInfoVerbose alts --verbose|-v
      # type: Boolean min 0 max 1
      --verbose | -v)
        # shellcheck disable=SC2034
        optionInfoVerbose="1"

        if ((options_parse_optionParsedCountOptionInfoVerbose >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionInfoVerbose))
        optionInfoVerboseCallback "${options_parse_arg}" "${optionInfoVerbose}"

        updateArgListInfoVerboseCallback "${options_parse_arg}" "${optionInfoVerbose}"

        ;;

      # Option 11/19
      # optionDebugVerbose alts -vv
      # type: Boolean min 0 max 1
      -vv)
        # shellcheck disable=SC2034
        optionDebugVerbose="1"

        if ((options_parse_optionParsedCountOptionDebugVerbose >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionDebugVerbose))
        optionDebugVerboseCallback "${options_parse_arg}" "${optionDebugVerbose}"

        updateArgListDebugVerboseCallback "${options_parse_arg}" "${optionDebugVerbose}"

        ;;

      # Option 12/19
      # optionTraceVerbose alts -vvv
      # type: Boolean min 0 max 1
      -vvv)
        # shellcheck disable=SC2034
        optionTraceVerbose="1"

        if ((options_parse_optionParsedCountOptionTraceVerbose >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionTraceVerbose))
        optionTraceVerboseCallback "${options_parse_arg}" "${optionTraceVerbose}"

        updateArgListTraceVerboseCallback "${options_parse_arg}" "${optionTraceVerbose}"

        ;;

      # Option 13/19
      # optionLogLevel alts --log-level
      # type: String min 0 max 1
      # authorizedValues: OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE
      --log-level)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi
        if [[ ! "$1" =~ OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(OFF, ERR, ERROR, WARN, WARNING, INFO, DEBUG, TRACE)"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionLogLevel >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionLogLevel))
        # shellcheck disable=SC2034
        optionLogLevel="$1"
        optionLogLevelCallback "${options_parse_arg}" "${optionLogLevel}"

        updateArgListLogLevelCallback "${options_parse_arg}" "${optionLogLevel}"

        ;;

      # Option 14/19
      # optionLogFile alts --log-file
      # type: String min 0 max 1
      --log-file)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionLogFile >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionLogFile))
        # shellcheck disable=SC2034
        optionLogFile="$1"
        optionLogFileCallback "${options_parse_arg}" "${optionLogFile}"

        updateArgListLogFileCallback "${options_parse_arg}" "${optionLogFile}"

        ;;

      # Option 15/19
      # optionDisplayLevel alts --display-level
      # type: String min 0 max 1
      # authorizedValues: OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE
      --display-level)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi
        if [[ ! "$1" =~ OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(OFF, ERR, ERROR, WARN, WARNING, INFO, DEBUG, TRACE)"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionDisplayLevel >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionDisplayLevel))
        # shellcheck disable=SC2034
        optionDisplayLevel="$1"
        optionDisplayLevelCallback "${options_parse_arg}" "${optionDisplayLevel}"

        updateArgListDisplayLevelCallback "${options_parse_arg}" "${optionDisplayLevel}"

        ;;

      # Option 16/19
      # optionNoColor alts --no-color
      # type: Boolean min 0 max 1
      --no-color)
        # shellcheck disable=SC2034
        optionNoColor="1"

        if ((options_parse_optionParsedCountOptionNoColor >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionNoColor))
        optionNoColorCallback "${options_parse_arg}" "${optionNoColor}"

        updateArgListNoColorCallback "${options_parse_arg}" "${optionNoColor}"

        ;;

      # Option 17/19
      # optionTheme alts --theme
      # type: String min 0 max 1
      # authorizedValues: default|default-force|noColor
      --theme)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi
        if [[ ! "$1" =~ default|default-force|noColor ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(default, default-force, noColor)"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionTheme >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionTheme))
        # shellcheck disable=SC2034
        optionTheme="$1"
        optionThemeCallback "${options_parse_arg}" "${optionTheme}"

        updateArgListThemeCallback "${options_parse_arg}" "${optionTheme}"

        ;;

      # Option 18/19
      # optionVersion alts --version
      # type: Boolean min 0 max 1
      --version)
        # shellcheck disable=SC2034
        optionVersion="1"

        if ((options_parse_optionParsedCountOptionVersion >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionVersion))
        optionVersionCallback "${options_parse_arg}" "${optionVersion}"

        ;;

      # Option 19/19
      # optionQuiet alts --quiet|-q
      # type: Boolean min 0 max 1
      --quiet | -q)
        # shellcheck disable=SC2034
        optionQuiet="1"

        if ((options_parse_optionParsedCountOptionQuiet >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionQuiet))
        optionQuietCallback "${options_parse_arg}" "${optionQuiet}"

        updateArgListQuietCallback "${options_parse_arg}" "${optionQuiet}"

        ;;

      -*)
        if [[ "${argOptDefaultBehavior}" = "0" ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Invalid option ${options_parse_arg}"
          return 1
        fi
        ;;
      *)
        ((minParsedArgIndex0 = 0)) || true
        ((maxParsedArgIndex0 = 0)) || true
        ((minParsedArgIndex1 = minParsedArgIndex0 + 0)) || true
        ((maxParsedArgIndex1 = maxParsedArgIndex0 + 1)) || true
        ((incrementArg = 1 ))
        if ((0)); then
          # Technical if - never reached
          :

        # Argument 1/1 - command
        # Argument command min 0 max 1
        # Argument command authorizedValues: isInterfaceImplemented|helpDescription|scriptName|dependencies|listVariables|fortunes|helpVariables|defaultVariables|checkVariables|breakOnConfigFailure|breakOnTestFailure|isInstallImplemented|install|isTestInstallImplemented|testInstall|isConfigureImplemented|configure|isTestConfigureImplemented|testConfigure|isCleanBeforeExportImplemented
        elif (( options_parse_parsedArgIndex >= minParsedArgIndex0 &&
          options_parse_parsedArgIndex < maxParsedArgIndex1 )); then
          if [[ ! "${options_parse_arg}" =~ isInterfaceImplemented|helpDescription|scriptName|dependencies|listVariables|fortunes|helpVariables|defaultVariables|checkVariables|breakOnConfigFailure|breakOnTestFailure|isInstallImplemented|install|isTestInstallImplemented|testInstall|isConfigureImplemented|configure|isTestConfigureImplemented|testConfigure|isCleanBeforeExportImplemented ]]; then
            Log::displayError "Command ${SCRIPT_NAME} - Argument command - value '${options_parse_arg}' is not part of authorized values(isInterfaceImplemented, helpDescription, scriptName, dependencies, listVariables, fortunes, helpVariables, defaultVariables, checkVariables, breakOnConfigFailure, breakOnTestFailure, isInstallImplemented, install, isTestInstallImplemented, testInstall, isConfigureImplemented, configure, isTestConfigureImplemented, testConfigure, isCleanBeforeExportImplemented)"
            return 1
          fi
          if ((options_parse_argParsedCountCommand >= 1 )); then
            Log::displayError "Command ${SCRIPT_NAME} - Argument command - Maximum number of argument occurrences reached(1)"
            return 1
          fi
          ((++options_parse_argParsedCountCommand))
          # shellcheck disable=SC2034
          command="${options_parse_arg}"
          argsInstallScriptCommandCallback "${command}" -- "${@:2}"


        # else too much args
        else


          if [[ "${argOptDefaultBehavior}" = "0" ]]; then
            # too much args and no unknownArgumentCallbacks configured
            Log::displayError "Command ${SCRIPT_NAME} - Argument - too much arguments provided: $*"
            return 1
          fi

        fi
        if ((incrementArg == 1)); then
          ((++options_parse_parsedArgIndex))
        fi
        ;;
    esac
    shift || true
  done || return $?

  commandOptionParseFinished

}

# @description display command options and arguments help for VsCodeConfigCommand
VsCodeConfigCommandHelp() {
  echo -e "${__HELP_TITLE_COLOR}SYNOPSIS:${__RESET_COLOR}"
  helpDescriptionFunction


  # ------------------------------------------
  # usage section
  # ------------------------------------------
  Array::wrap2 " " 80 2 "${__HELP_TITLE_COLOR}USAGE:${__RESET_COLOR}" "VsCodeConfig [OPTIONS] [ARGUMENTS]"
  echo
  # ------------------------------------------
  # usage/options section
  # ------------------------------------------
  optionsAltList=("[--skip-config|--skip-configure|--skip-configuration|-sc]" "[--skip-install|--skip-installation|-si]" "[--skip-test|--skip-tests|-st]" "[--skip-deps|--skip-dependencies|-sd]" "[--prepare-export|-e]" "[--profile|-p <profile>]" "[--help|-h]" "[--config]" "[--bash-framework-config <bash-framework-config>]" "[--verbose|-v]" "[-vv]" "[-vvv]" "[--log-level <log-level>]" "[--log-file <log-file>]" "[--display-level <display-level>]" "[--no-color]" "[--theme <theme>]" "[--version]" "[--quiet|-q]"
  )
  Array::wrap2 " " 80 2 "${__HELP_TITLE_COLOR}USAGE:${__RESET_COLOR}" \
    "VsCodeConfig" "${optionsAltList[@]}"
  echo

  # ------------------------------------------
  # usage/arguments section
  # ------------------------------------------
  echo
  echo -e "${__HELP_TITLE_COLOR}ARGUMENTS:${__RESET_COLOR}"

  Array::wrap2 " " 80 2 "  [${__HELP_OPTION_COLOR}command${__HELP_NORMAL} {single}]"
  Array::wrap2 ' ' 76 4 "    " "The command to run on this install script."
  echo

  echo "    Possible values:"
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}isInterfaceImplemented:${__RESET_COLOR} Check if all commands below are available"
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}helpDescription:${__RESET_COLOR} Show help description of this install script."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}scriptName:${__RESET_COLOR} Show the internal name of this install script."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}dependencies:${__RESET_COLOR} Show this install scripts's dependencies."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}listVariables:${__RESET_COLOR} Show the variables needed to execute this
  install script."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}fortunes:${__RESET_COLOR} Show the fortunes sentences that this
  install script can generate."
  echo
  echo -e "      - ${__OPTION_COLOR}helpVariables${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}defaultVariables${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}checkVariables${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}breakOnConfigFailure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}breakOnTestFailure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isInstallImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}install${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isTestInstallImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}testInstall${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isConfigureImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}configure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isTestConfigureImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}testConfigure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isCleanBeforeExportImplemented${__RESET_COLOR}"


  Array::wrap2 ' ' 76 6 "    Default value: " "install"
  echo

  # ------------------------------------------
  # options section
  # ------------------------------------------
  echo
  echo -e "${__HELP_TITLE_COLOR}SKIP OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--skip-config${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-configure${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-configuration${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-sc${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Skip software configuration."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--skip-install${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-installation${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-si${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Skip software installation."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--skip-test${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-tests${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-st${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Skip software installation test."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--skip-deps${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-dependencies${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-sd${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Install the software requested without resolving dependencies."
  echo

  echo
  echo -e "${__HELP_TITLE_COLOR}EXPORT OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--prepare-export${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-e${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "prepare the wsl installation for export (remove all sensitive files)"
  echo

  echo
  echo -e "${__HELP_TITLE_COLOR}INSTALL OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--profile${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-p <profile>${__HELP_NORMAL} {single}"
  profileHelpFunction


  echo
  echo -e "${__HELP_TITLE_COLOR}GLOBAL OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--help${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-h${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Displays this command help"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--config${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Displays configuration"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--bash-framework-config <bash-framework-config>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Use alternate bash framework configuration."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--verbose${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-v${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Info level verbose mode (alias of --display-level INFO)"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}-vv${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Debug level verbose mode (alias of --display-level DEBUG)"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}-vvv${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Trace level verbose mode (alias of --display-level TRACE)"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--log-level <log-level>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Set log level"
  echo

  echo "    Possible values: "
  echo -e "      - ${__OPTION_COLOR}OFF${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERROR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARN${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARNING${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}INFO${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}DEBUG${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}TRACE${__RESET_COLOR}"

  Array::wrap2 ' ' 76 6 "    Default value: " "$(optionLogLevelDefaultValueFunction)"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--log-file <log-file>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Set log file"
  echo


  Array::wrap2 ' ' 76 6 "    Default value: " "$(optionLogFileDefaultValueFunction)"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--display-level <display-level>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Set display level"
  echo

  echo "    Possible values: "
  echo -e "      - ${__OPTION_COLOR}OFF${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERROR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARN${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARNING${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}INFO${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}DEBUG${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}TRACE${__RESET_COLOR}"

  Array::wrap2 ' ' 76 6 "    Default value: " "$(optionDisplayLevelDefaultValueFunction)"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--no-color${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Produce monochrome output. alias of --theme noColor."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--theme <theme>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Choose color theme - default-force means colors will be produced even if command is piped."
  echo

  echo "    Possible values: "
  echo -e "      - ${__OPTION_COLOR}default${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}default-force${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}noColor${__RESET_COLOR}"

  Array::wrap2 ' ' 76 6 "    Default value: " "default"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--version${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Print version information and quit."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--quiet${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-q${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Quiet mode, doesn't display any output."
  echo

  # ------------------------------------------
  # longDescription section
  # ------------------------------------------
  echo
  echo
  echo -e "${__HELP_TITLE_COLOR}DESCRIPTION:${__RESET_COLOR}"
  helpLongDescriptionFunction
  # ------------------------------------------
  # version section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}VERSION: ${__RESET_COLOR}"
  echo "3.0"
  # ------------------------------------------
  # author section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}AUTHOR: ${__RESET_COLOR}"
  echo "[François Chastanet](https://github.com/fchastanet)"
  # ------------------------------------------
  # sourceFile section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}SOURCE FILE: ${__RESET_COLOR}"
  echo "https://github.com/fchastanet/bash-dev-env/tree/master/src/_installScripts/_Configs/VsCodeConfig-binary.yaml"
  # ------------------------------------------
  # license section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}LICENSE: ${__RESET_COLOR}"
  echo "MIT License"
  # ------------------------------------------
  # copyright section
  # ------------------------------------------
  Array::wrap2 ' ' 76 0 "$(copyrightCallback)"
}


beforeParseCallback

VsCodeConfigCommandParse "$@"
MAIN_FUNCTION_NAME="main"
main() {

afterParseCallback
InstallScripts::command

}

# if file is sourced avoid calling main function
# shellcheck disable=SC2178
BASH_SOURCE=".$0" # cannot be changed in bash
# shellcheck disable=SC2128
if test ".$0" == ".${BASH_SOURCE}"; then
  if [[ "${BASH_FRAMEWORK_QUIET_MODE:-0}" = "1" ]]; then
    main "$@" &>/dev/null
  else
    main "$@"
  fi
fi
