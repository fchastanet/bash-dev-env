#!/usr/bin/env bash
###############################################################################
# GENERATED FACADE FROM https://github.com/fchastanet/bash-dev-env/tree/master/src/_binaries/installScripts/Fzf.sh
# DO NOT EDIT IT
# @generated
###############################################################################
# shellcheck disable=SC2288,SC2034
# BIN_FILE=${BASH_DEV_ENV_ROOT_DIR}/installScripts/Fzf

# ensure that no user aliases could interfere with
# commands used in this script
unalias -a || true
shopt -u expand_aliases

# shellcheck disable=SC2034
((failures = 0)) || true

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# Command Substitution can inherit errexit option since bash v4.4
shopt -s inherit_errexit || true

# if set, and job control is not active, the shell runs the last command
# of a pipeline not executed in the background in the current shell
# environment.
shopt -s lastpipe

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file
# matches the wildcard
shopt -s nullglob

# ensure regexp are interpreted without accentuated characters
export LC_ALL=POSIX

export TERM=xterm-256color

# avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# store command arguments for later usage
# shellcheck disable=SC2034
declare -a BASH_FRAMEWORK_ARGV=("$@")
# shellcheck disable=SC2034
declare -a ORIGINAL_BASH_FRAMEWORK_ARGV=("$@")

# @see https://unix.stackexchange.com/a/386856
# shellcheck disable=SC2317
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT
SCRIPT_NAME=${0##*/}
REAL_SCRIPT_FILE="$(readlink -e "$(realpath "${BASH_SOURCE[0]}")")"
if [[ -n "${EMBED_CURRENT_DIR}" ]]; then
  CURRENT_DIR="${EMBED_CURRENT_DIR}"
else
  CURRENT_DIR="$(cd "$(readlink -e "${REAL_SCRIPT_FILE%/*}")" && pwd -P)"
fi

################################################
# Temp dir management
################################################

KEEP_TEMP_FILES="${KEEP_TEMP_FILES:-0}"
export KEEP_TEMP_FILES

# PERSISTENT_TMPDIR is not deleted by traps
PERSISTENT_TMPDIR="${TMPDIR:-/tmp}/bash-framework"
export PERSISTENT_TMPDIR
mkdir -p "${PERSISTENT_TMPDIR}"

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${PERSISTENT_TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
# shellcheck disable=SC2317
cleanOnExit() {
  if [[ "${KEEP_TEMP_FILES:-0}" = "1" ]]; then
    Log::displayInfo "KEEP_TEMP_FILES=1 temp files kept here '${TMPDIR}'"
  elif [[ -n "${TMPDIR+xxx}" ]]; then
    Log::displayDebug "KEEP_TEMP_FILES=0 removing temp files '${TMPDIR}'"
    rm -Rf "${TMPDIR:-/tmp/fake}" >/dev/null 2>&1
  fi
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @description concat each element of an array with a separator
# but wrapping text when line length is more than provided argument
# The algorithm will try not to cut the array element if it can.
# - if an arg can be placed on current line it will be,
#   otherwise current line is printed and arg is added to the new
#   current line
# - Empty arg is interpreted as a new line.
# - Add \r to arg in order to force break line and avoid following
#   arg to be concatenated with current arg.
#
# @arg $1 glue:String
# @arg $2 maxLineLength:int
# @arg $3 indentNextLine:int
# @arg $@ array:String[]
Array::wrap2() {
  local glue="${1-}"
  local -i glueLength="${#glue}"
  shift || true
  local -i maxLineLength=$1
  shift || true
  local -i indentNextLine=$1
  shift || true
  local indentStr=""
  if ((indentNextLine > 0)); then
    indentStr="$(head -c "${indentNextLine}" </dev/zero | tr '\0' " ")"
  fi
  if (($# == 0)); then
    return 0
  fi

  printCurrentLine() {
    if ((isNewline == 0)) || ((previousLineEmpty == 1)); then
      echo
    fi
    ((isNewline = 1))
    echo -en "${indentStr}"
    ((currentLineLength = indentNextLine)) || true
  }
  appendToCurrentLine() {
    local text="$1"
    local -i length=$2
    ((currentLineLength += length)) || true
    ((isNewline = 0)) || true
    if [[ "${text: -1}" = $'\r' ]]; then
      text="${text:0:-1}"
      echo -en "${text%%+([[:blank:]])}"
      printCurrentLine
    else
      echo -en "${text%%+([[:blank:]])}"
    fi
  }

  (
    local currentLine
    local -i currentLineLength=0 isNewline=1 argLength=0
    local -a additionalLines
    local -i previousLineEmpty=0
    local arg=""

    while (($# > 0)); do
      arg="$1"
      shift || true

      # replace tab by 2 spaces
      arg="${arg//$'\t'/  }"
      # remove trailing spaces
      arg="${arg%[[:blank:]]}"
      if [[ "${arg}" = $'\n' || -z "${arg}" ]]; then
        printCurrentLine
        ((previousLineEmpty = 1))
        continue
      else
        if ((previousLineEmpty == 1)); then
          printCurrentLine
        fi
        ((previousLineEmpty = 0)) || true
      fi
      # convert eol to args
      mapfile -t additionalLines <<<"${arg}"
      if ((${#additionalLines[@]} > 1)); then
        set -- "${additionalLines[@]}" "$@"
        continue
      fi

      ((argLength = ${#arg})) || true

      # empty arg
      if ((argLength == 0)); then
        if ((isNewline == 0)); then
          # isNewline = 0 means currentLine is not empty
          printCurrentLine
        fi
        continue
      fi

      if ((isNewline == 0)); then
        glueLength="${#glue}"
      else
        glueLength="0"
      fi
      if ((currentLineLength + argLength + glueLength > maxLineLength)); then
        if ((argLength + glueLength > maxLineLength)); then
          # arg is too long to even fit on one line
          # we have to split the arg on current and next line
          local -i remainingLineLength
          ((remainingLineLength = maxLineLength - currentLineLength - glueLength))
          appendToCurrentLine "${glue:0:${glueLength}}${arg:0:${remainingLineLength}}" "$((glueLength + remainingLineLength))"
          printCurrentLine
          arg="${arg:${remainingLineLength}}"
          # remove leading spaces
          arg="${arg##[[:blank:]]}"

          set -- "${arg}" "$@"
        else
          # the arg can fit on next line
          printCurrentLine
          appendToCurrentLine "${arg}" "${argLength}"
        fi
      else
        appendToCurrentLine "${glue:0:${glueLength}}${arg}" "$((glueLength + argLength))"
      fi
    done
    if [[ "${currentLine}" != "" ]] && [[ ! "${currentLine}" =~ ^[\ \t]+$ ]]; then
      printCurrentLine
    fi
  ) | sed -E -e 's/[[:blank:]]+$//'
}

# @description checks if function name provided exists
# @arg $1 functionName:String
# @exitcode 1 if function name doesn't exist
Assert::functionExists() {
  declare -F "$1" >/dev/null
}

# @description convert base64 encoded back to target file
# if target file is executable prepend dir of target
# file to PATH to make binary available everywhere
# it is advised to include in the path of the target file
# the md5sum of the binFile
#
# @arg $1 targetFile:String the file to write
# @arg $2 binFileBase64:String the base64 encoded file
# @arg $3 fileMode:String the chmod to set on the file
# @set PATH String prepend target embedded file binary directory to PATH variable if binary executable
Compiler::Embed::extractFileFromBase64() {
  local targetFile="$1"
  local binFileBase64="$2"
  local fileMode="${3:-+x}"

  if [[ ! -f "${targetFile}" ]]; then
    mkdir -p "$(dirname "${targetFile}")"
    base64 -d >"${targetFile}" <<<"${binFileBase64}"
    chmod "${fileMode}" "${targetFile}"
  fi

  if [[ -x "${targetFile}" ]]; then
    Env::pathPrepend "$(dirname "${targetFile}")"
  fi
}

envFileTemplate="$(
  cat <<'EOF'
# shellcheck disable=SC2034
# wsl username
USERNAME="wsl"
USERGROUP="wsl"
USER_HOME="/home/wsl"

# your login to connect to ssh servers if any
SSH_LOGIN=""

# your git full name 'FirstName LastName'
GIT_USERNAME=""
# email used for git 'ldap@domain.com'
GIT_USER_MAIL=""
# email used to connect to aws
AWS_USER_MAIL="fchastanet@gmail.com"
# app id to connect to aws account
AWS_APP_ID=""
AWS_PROFILE=""
AWS_DEFAULT_REGION=""
AWS_TEST_SECRET_ID=""
AWS_DEFAULT_DOCKER_REGISTRY_ID=""

# hostname of the distro
DISTRO_HOSTNAME="wslHost"

# conf files that will be used to configure the different tools
CONF_DIR="${BASH_DEV_ENV_ROOT_DIR}/conf"

# conf files that will be used to configure the different tools
# some tools configuration will use CONF_DIR as template and
# copy files into this directory
CONF_OVERRIDE_DIR="${BASH_DEV_ENV_ROOT_DIR}/conf.override"

# where to install bash-tools, ...
# shellcheck disable=SC2153
PROJECTS_DIR="${USER_HOME}/projects"

# where overridden config files will be backed up
BACKUP_DIR="${BASH_DEV_ENV_ROOT_DIR}/backup"
# logs CONF_DIR
LOGS_DIR="${BASH_DEV_ENV_ROOT_DIR}/logs"
# installScripts dir
INSTALL_SCRIPTS_DIR="${BASH_DEV_ENV_ROOT_DIR}/installScripts"

# 0   => no upgrade at all
# lts => UPGRADE to latest ubuntu lts version
# dev => UPGRADE to latest ubuntu dev version
# Use if you know what you are doing,
# could cause some packages to not being available yet
UPGRADE_UBUNTU_VERSION=0

# -----------------------------------------
# PROFILES options

# Choose your AWS authenticator tool
# possible choices: Saml2Aws, Awsume
AWS_AUTHENTICATOR="Saml2Aws"

# Choose your preferred shell
# possible choices: ShellBash (Legacy experience), ShellZsh (Recommended experience)
PREFERRED_SHELL="ShellBash"

# Display Fortune tooltip at bash/zsh session open
SHOW_FORTUNES=1

# Display MOTD at bash/zsh session open
SHOW_MOTD=1

# Install Docker inside wsl
DOCKER_INSIDE_WSL=1

# Configuration files are overwritten even if exists
# !!!! First time initialization: let this value to 1 !!!!
# Value 0:
# - If target configuration file exists, displays a message and do not overwrite the file
# - If target configuration file doesn't exist, installs the file
# Value 1
# - install or overwrite the file without checking existence
OVERWRITE_CONFIG_FILES=1

# Windows files can be overridden if 1
# if 0
# - skip changes to %USERPROFILE%/.wslconfig
# - skip copying fonts
CHANGE_WINDOWS_FILES=1

# Indicate that install script can warn you using speaker when your input is needed
CAN_TALK_DURING_INSTALLATION=${CAN_TALK_DURING_INSTALLATION:-1}

# if 0 install script will skip all interactive activity (saml2aws, ...),
# so dependent installation will be skipped as well
INSTALL_INTERACTIVE=${INSTALL_INTERACTIVE:-1}

# display elapsed time since last log
DISPLAY_DURATION=1

# -----------------------------------------
# WSLCONFIG - these parameters will help to automatically
# configure %USERPROFILE%/.wslconfig file
# Adjust these values to your needs
# @see https://docs.microsoft.com/en-us/windows/wsl/wsl-config
# Recommended 50% of total memory
WSLCONFIG_MAX_MEMORY=8GB
# personally I prefer run out of memory instead of beginning swapping
# So I know immediately if some processes have to be stopped
WSLCONFIG_SWAP=0

# -----------------------------------------
# Hacks
# on some configurations we have to force path of some windows commands
#POWERSHELL_BIN=/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe
#IPCONFIG_BIN=/mnt/c/Windows/system32/ipconfig.exe
#WSL_EXE_BIN=/mnt/c/Windows/system32/wsl.exe

# -----------------------------------------
# Distro
# Only necessary when using the script distro
# to create or update a wsl distribution

# The name of the distro displayed in `wsl -l -v` command
DISTRO_NAME="UbuntuTest"
# where to download the distribution
DISTRO_URL="https://aka.ms/wslubuntu2004"
# Profile to use with install command
DISTRO_INSTALL_PROFILE="default"
# The path where bash-dev-env project will be copied into target distro
DISTRO_BASH_DEV_ENV_TARGET_DIR="${BASH_DEV_ENV_ROOT_DIR}"
EOF
)"

# @description load .env file
# @arg $1 envFile:String the file to load
Engine::Config::loadConfig() {
  if [[ "${BASH_DEV_ENV_CONFIG_LOADED:-}" = "1" ]]; then
    return 0
  fi
  local envFile="${BASH_DEV_ENV_ROOT_DIR}/.env"
  Engine::Config::createEnvFileFromTemplate \
    "${envFile}" "${envFileTemplate}" || exit 1
  set -o allexport
  # shellcheck source=/.env.template
  source <(echo "${envFileTemplate}")
  # shellcheck source=/.env
  source "${BASH_DEV_ENV_ROOT_DIR}/.env"
  set +o allexport

  # load environment variables ID, VERSION_CODENAME
  Engine::Config::loadOsRelease

  if ! Engine::Config::checkEnv; then
    Log::displayError "one or more variables are invalid, check above logs and fix '${envFile}' file accordingly"
    return 1
  fi

  Engine::Config::loadUserVariables
  Engine::Config::loadHostIp

  Engine::Config::requireWslu

  #Linux::Wsl::initEnv
  Engine::Config::loadWslVariables

  Engine::Config::installBashDevEnv "${CONF_DIR}" "${LDAP_LOGIN}" "${WINDOWS_PROFILE_DIR}"

  Log::requireLoad

  export BASH_DEV_ENV_CONFIG_LOADED=1
}

# @description ensure env files are loaded
# @arg $@ list of default files to load at the end
# @exitcode 1 if one of env files fails to load
# @stderr diagnostics information is displayed
# shellcheck disable=SC2120
Env::requireLoad() {
  local -a defaultFiles=("$@")
  # get list of possible config files
  local -a configFiles=()
  if [[ -n "${BASH_FRAMEWORK_ENV_FILES[0]+1}" ]]; then
    # BASH_FRAMEWORK_ENV_FILES is an array
    configFiles+=("${BASH_FRAMEWORK_ENV_FILES[@]}")
  fi
  if [[ -f "$(pwd)/.framework-config" ]]; then
    configFiles+=("$(pwd)/.framework-config")
  fi
  if [[ -f "${FRAMEWORK_ROOT_DIR}/.framework-config" ]]; then
    configFiles+=("${FRAMEWORK_ROOT_DIR}/.framework-config")
  fi
  configFiles+=("${optionEnvFiles[@]}")
  configFiles+=("${defaultFiles[@]}")

  for file in "${configFiles[@]}"; do
    # shellcheck source=/.framework-config
    CURRENT_LOADED_ENV_FILE="${file}" source "${file}" || {
      Log::displayError "while loading config file: ${file}"
      return 1
    }
  done
}

# @description create a temp file using default TMPDIR variable
# initialized in _includes/_commonHeader.sh
# @env TMPDIR String (default value /tmp)
# @arg $1 templateName:String template name to use(optional)
Framework::createTempFile() {
  mktemp -p "${TMPDIR:-/tmp}" -t "${1:-}.XXXXXXXXXXXX"
}

# @description clone the repository if not done yet, else pull it if no change in it
# @arg $1 dir:String directory in which repository is installed or will be cloned
# @arg $2 repo:String repository url
# @arg $3 cloneCallback:Function callback on successful clone
# @arg $4 pullCallback:Function callback on successful pull
# @env GIT_CLONE_OPTIONS:String additional options to pass to git clone command
# @env SUDO String allows to use custom sudo prefix command
# @exitcode 0 on successful pulling/cloning, 1 on failure
Git::cloneOrPullIfNoChanges() {
  local dir="$1"
  shift || true
  local repo="$1"
  shift || true
  local cloneCallback=${1:-}
  shift || true
  local pullCallback=${1:-}
  shift || true

  if [[ -d "${dir}/.git" ]]; then
    if ! Git::pullIfNoChanges "${dir}"; then
      return 1
    fi
    # shellcheck disable=SC2086
    if [[ "$(type -t ${pullCallback})" = "function" ]]; then
      ${pullCallback} "${dir}"
    fi
  else
    Log::displayInfo "cloning ${repo} ..."
    ${SUDO:-} mkdir -p "$(${SUDO:-} dirname "${dir}")"
    # shellcheck disable=SC2086,SC2248
    if ${SUDO:-} git clone ${GIT_CLONE_OPTIONS} --progress "$@" "${repo}" "${dir}"; then
      # shellcheck disable=SC2086
      if [[ "$(type -t ${cloneCallback})" = "function" ]]; then
        ${cloneCallback} "${dir}"
      fi
    else
      Log::displayError "Cloning '${repo}' on '${dir}' failed"
      return 1
    fi
  fi
}

# @description the command launch different actions(install, configure, test)
# depending on the options selected
# @see src/_includes/install.skip.options.tpl
# @env SKIP_INSTALL
# @env SKIP_CONFIGURE
# @env SKIP_TEST
# @env LOGS_DIR
InstallScripts::command() {
  local logsDir="${LOGS_DIR:-#}"
  local scriptName
  scriptName="$(scriptName)"
  rm -f "${logsDir}/${scriptName}-.*" || true

  # shellcheck disable=SC2317
  onInterrupt() {
    Log::displayError "${scriptName} aborted"
    exit 1
  }
  trap onInterrupt INT TERM ABRT

  local startDate logFile statsFile
  local installStatus="0"
  if [[ "${SKIP_INSTALL}" = "0" ]]; then
    Log::headLine "INSTALL - Installing ${scriptName}"
    logFile="${logsDir}/${scriptName}-install.log"
    statsFile="${logsDir}/${scriptName}-install.stat"

    # break at first install error
    (
      startDate="$(date +%s)"
      trap 'Stats::computeStatsTrap "Installation ${scriptName}" "${logFile}" "${statsFile}" "${startDate}"' EXIT INT TERM ABRT

      install 2>&1 | tee "${logFile}"
    )
  fi

  local configStatus="0"
  if [[ "${SKIP_CONFIGURE}" = "0" && "${installStatus}" = "0" ]]; then
    Log::headLine "CONFIG  - Configuring ${scriptName}"
    logFile="${logsDir}/${scriptName}-config.log"
    statsFile="${logsDir}/${scriptName}-config.stat"
    (
      startDate="$(date +%s)"
      trap 'Stats::computeStatsTrap "Configuration ${scriptName}" "${logFile}" "${statsFile}" "${startDate}"' EXIT INT TERM ABRT

      configure 2>&1 | tee "${logFile}"
    ) || configStatus="$?" || true

    if [[ "${configStatus}" != "0" ]] && breakOnConfigFailure; then
      # break if config script error
      exit "${configStatus}"
    fi
  fi

  local testInstallStatus="0"
  if [[ "${SKIP_TEST}" = "0" && "${installStatus}" = "0" ]]; then
    Log::headLine "TEST    - Testing ${scriptName} installation"
    logFile="${logsDir}/${scriptName}-test-install.log"
    statsFile="${logsDir}/${scriptName}-test-install.stat"
    (
      startDate="$(date +%s)"
      trap 'Stats::computeStatsTrap "Test ${scriptName}" "${logFile}" "${statsFile}" "${startDate}"' EXIT INT TERM ABRT

      testInstall 2>&1 | tee "${logFile}"
    ) || testInstallStatus="$?" || true
    if [[ "${testInstallStatus}" != "0" ]] && breakOnTestFailure; then
      # break if test script error
      exit "${testInstallStatus}"
    fi
  fi

  local testConfigStatus="0"
  if [[ "${SKIP_TEST}" = "0" && "${installStatus}" = "0" && "${configStatus}" = "0" ]]; then
    Log::headLine "TEST    - Testing ${scriptName} configuration"
    logFile="${logsDir}/${scriptName}-test-configuration.log"
    statsFile="${logsDir}/${scriptName}-test-configuration.stat"
    (
      startDate="$(date +%s)"
      trap 'Stats::computeStatsTrap "Test ${scriptName}" "${logFile}" "${statsFile}" "${startDate}"' EXIT INT TERM ABRT

      testConfigure 2>&1 | tee "${logFile}"
    ) || testConfigStatus="$?" || true
    if [[ "${testConfigStatus}" != "0" ]] && breakOnTestFailure; then
      # break if test script error
      exit "${testConfigStatus}"
    fi
  fi
}

# @description apt-get install
# @arg $@ softwares:String[] list of softwares to install
# @feature Retry::default
# Linux::requireSudoCommand
# @require Linux::requireUbuntu
# @stdout diagnostics logs
Linux::Apt::install() {
  Log::displayInfo "Apt install $*"
  Retry::default sudo apt-get install -y -q "$@"
}

# @description update apt packages list
# @feature Retry::default
# Linux::requireSudoCommand
# @require Linux::requireUbuntu
# @stdout diagnostics logs
Linux::Apt::update() {
  Log::displayInfo "Apt update ..."
  Retry::default sudo apt-get update -y --fix-missing -o Acquire::ForceIPv4=true
}

# @description Log namespace provides 2 kind of functions
# - Log::display* allows to display given message with
#   given display level
# - Log::log* allows to log given message with
#   given log level
# Log::display* functions automatically log the message too
# @see Env::requireLoad to load the display and log level from .env file

# @description log level off
export __LEVEL_OFF=0
# @description log level error
export __LEVEL_ERROR=1
# @description log level warning
export __LEVEL_WARNING=2
# @description log level info
export __LEVEL_INFO=3
# @description log level success
export __LEVEL_SUCCESS=3
# @description log level debug
export __LEVEL_DEBUG=4

# @description verbose level off
export __VERBOSE_LEVEL_OFF=0
# @description verbose level info
export __VERBOSE_LEVEL_INFO=1
# @description verbose level info
export __VERBOSE_LEVEL_DEBUG=2
# @description verbose level info
export __VERBOSE_LEVEL_TRACE=3

# @description Display message using debug color (grey)
# @arg $1 message:String the message to display
Log::displayDebug() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_DEBUG)); then
    echo -e "${__DEBUG_COLOR}DEBUG   - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logDebug "$1"
}

# @description Display message using error color (red)
# @arg $1 message:String the message to display
Log::displayError() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_ERROR)); then
    echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logError "$1"
}

FIRST_LOG_DATE="$(date '+%s%3N')"
LOG_LAST_LOG_DATE="${FIRST_LOG_DATE}"
LOG_LAST_LOG_DATE_INIT=1

# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
Log::displayInfo() {
  local type="${2:-INFO}"
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    local durationMsg=""
    if ((DISPLAY_DURATION == 1)); then
      local duration
      local -i currentLogDate
      currentLogDate="$(date '+%s%3N')"
      if ((LOG_LAST_LOG_DATE_INIT == 1)); then
        LOG_LAST_LOG_DATE_INIT=0
        duration="Ref"
      else
        duration="$(( (currentLogDate - FIRST_LOG_DATE) /1000 ))s/+$(( (currentLogDate - LOG_LAST_LOG_DATE) /1000 ))s"
      fi
      LOG_LAST_LOG_DATE="${currentLogDate}"
      durationMsg="$(date '+%H:%M:%S.%3N')(${duration}) - "
    fi
    echo -e "${__INFO_COLOR}${type}    - ${durationMsg}${1}${__RESET_COLOR}" >&2
  fi
  Log::logInfo "$1" "${type}"
}

# @description Display message using warning color (yellow)
# @arg $1 message:String the message to display
Log::displayWarning() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_WARNING)); then
    echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logWarning "$1"
}

# @description Display message using error color (red) and exit immediately with error status 1
# @arg $1 message:String the message to display
Log::fatal() {
  echo -e "${__ERROR_COLOR}FATAL   - ${1}${__RESET_COLOR}" >&2
  Log::logFatal "$1"
  exit 1
}

# @description activate or not Log::display* and Log::log* functions
# based on BASH_FRAMEWORK_DISPLAY_LEVEL and BASH_FRAMEWORK_LOG_LEVEL
# environment variables loaded by Env::requireLoad
# try to create log file and rotate it if necessary
# @noargs
# @set BASH_FRAMEWORK_LOG_LEVEL int to OFF level if BASH_FRAMEWORK_LOG_FILE is empty or not writable
# @env BASH_FRAMEWORK_DISPLAY_LEVEL int
# @env BASH_FRAMEWORK_LOG_LEVEL int
# @env BASH_FRAMEWORK_LOG_FILE String
# @env BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION int do log rotation if > 0
# @exitcode 0 always successful
# @stderr diagnostics information about log file is displayed
# @require Env::requireLoad
# @require UI::requireTheme
Log::requireLoad() {
  if [[ -z "${BASH_FRAMEWORK_LOG_FILE:-}" ]]; then
    BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
    export BASH_FRAMEWORK_LOG_LEVEL
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    if [[ ! -f "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      if
        ! mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" 2>/dev/null ||
          ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null
      then
        BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
        echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
      fi
    elif [[ ! -w "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
    fi

  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    # will always be created even if not in info level
    Log::logMessage "INFO" "Logging to file ${BASH_FRAMEWORK_LOG_FILE} - Log level ${BASH_FRAMEWORK_LOG_LEVEL}"
    if ((BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION > 0)); then
      Log::rotate "${BASH_FRAMEWORK_LOG_FILE}" "${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION}"
    fi
  fi
}

# @description draw a line with the character passed in parameter repeated depending on terminal width
# @arg $1 character:String character to use as separator (default value #)
UI::drawLine() {
  local character="${1:-#}"
  printf -- "${character}%.0s" $(seq "${COLUMNS:-$([[ -t 0 ]] && tput cols || echo '80')}")
}

# @description load colors theme constants
# @warning if tty not opened, noColor theme will be chosen
# @arg $1 theme:String the theme to use (default, noColor)
# @arg $@ args:String[]
# @set __ERROR_COLOR String indicate error status
# @set __INFO_COLOR String indicate info status
# @set __SUCCESS_COLOR String indicate success status
# @set __WARNING_COLOR String indicate warning status
# @set __SKIPPED_COLOR String indicate skipped status
# @set __DEBUG_COLOR String indicate debug status
# @set __HELP_COLOR String indicate help status
# @set __TEST_COLOR String not used
# @set __TEST_ERROR_COLOR String not used
# @set __HELP_TITLE_COLOR String used to display help title in help strings
# @set __HELP_OPTION_COLOR String used to display highlight options in help strings
#
# @set __RESET_COLOR String reset default color
#
# @set __HELP_EXAMPLE String to remove
# @set __HELP_TITLE String to remove
# @set __HELP_NORMAL String to remove
# shellcheck disable=SC2034
UI::theme() {
  local theme="${1-default}"
  if [[ ! "${theme}" =~ -force$ ]] && ! Assert::tty; then
    theme="noColor"
  fi
  case "${theme}" in
    default | default-force)
      theme="default"
      ;;
    noColor) ;;
    *)
      Log::fatal "invalid theme provided"
      ;;
  esac
  if [[ "${theme}" = "default" ]]; then
    BASH_FRAMEWORK_THEME="default"
    # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
    __ERROR_COLOR='\e[31m'         # Red
    __INFO_COLOR='\e[44m'          # white on lightBlue
    __SUCCESS_COLOR='\e[32m'       # Green
    __WARNING_COLOR='\e[33m'       # Yellow
    __SKIPPED_COLOR='\e[33m'       # Yellow
    __DEBUG_COLOR='\e[37m'         # Grey
    __HELP_COLOR='\e[7;49;33m'     # Black on Gold
    __TEST_COLOR='\e[100m'         # Light magenta
    __TEST_ERROR_COLOR='\e[41m'    # white on red
    __HELP_TITLE_COLOR="\e[1;37m"  # Bold
    __HELP_OPTION_COLOR="\e[1;34m" # Blue
    # Internal: reset color
    __RESET_COLOR='\e[0m' # Reset Color
    # shellcheck disable=SC2155,SC2034
    __HELP_EXAMPLE="$(echo -e "\e[2;97m")"
    # shellcheck disable=SC2155,SC2034
    __HELP_TITLE="$(echo -e "\e[1;37m")"
    # shellcheck disable=SC2155,SC2034
    __HELP_NORMAL="$(echo -e "\033[0m")"
  else
    BASH_FRAMEWORK_THEME="noColor"
    # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
    __ERROR_COLOR=''
    __INFO_COLOR=''
    __SUCCESS_COLOR=''
    __WARNING_COLOR=''
    __SKIPPED_COLOR=''
    __DEBUG_COLOR=''
    __HELP_COLOR=''
    __TEST_COLOR=''
    __TEST_ERROR_COLOR=''
    __HELP_TITLE_COLOR=''
    __HELP_OPTION_COLOR=''
    # Internal: reset color
    __RESET_COLOR=''
    __HELP_EXAMPLE=''
    __HELP_TITLE=''
    __HELP_NORMAL=''
  fi
}

# @description Check that command version is greater than expected minimal version
# display warning if command version greater than expected minimal version
# display error if command version less than expected minimal version and exit 1
# @arg $1 commandName:String command path
# @arg $2 argVersion:String command line parameters to launch to get command version
# @arg $3 minimalVersion:String expected minimal command version
# @arg $4 parseVersionCallback:Function
# @arg $5 help:String optional help message to display if command does not exist
# @exitcode 0 if command version greater or equal to expected minimal version
# @exitcode 1 if command version less than expected minimal version
# @exitcode 2 if command does not exist
Version::checkMinimal() {
  local commandName="$1"
  local argVersion="$2"
  local minimalVersion="$3"
  local parseVersionCallback=${4:-Version::parse}
  local help="${5:-}"

  Assert::commandExists "${commandName}" "${help}" || return 2

  # shellcheck disable=SC2034
  local status=0
  # shellcheck disable=SC2034
  local -a pipeStatus=()
  local version
  version="$("${commandName}" "${argVersion}" 2>&1 | ${parseVersionCallback} || Bash::handlePipelineFailure status pipeStatus)"

  Log::displayDebug "check ${commandName} version ${version} against minimal ${minimalVersion}"

  Version::compare "${version}" "${minimalVersion}" || {
    local result=$?
    if [[ "${result}" = "1" ]]; then
      Log::displayDebug "${commandName} version is ${version} greater than ${minimalVersion}, OK let's continue"
    elif [[ "${result}" = "2" ]]; then
      Log::displayError "${commandName} minimal version is ${minimalVersion}, your version is ${version}"
      return 1
    fi
    return 0
  }

}

# @description extract software version number
# @arg $1 command:String the command that will be called with --version parameter
# @arg $2 argVersion:String  allows to override default --version parameter
Version::getCommandVersionFromPlainText() {
  local command="$1"
  local argVersion="${2:---version}"
  "${command}" "${argVersion}" 2>&1 |
    Version::parse # keep only version numbers
}

# @description filter to keep only version number from a string
# @arg $@ files:String[] the files to filter
# @exitcode * if one of the filter command fails
# @stdin you can use stdin as alternative to files argument
# @stdout the filtered content
# shellcheck disable=SC2120
Version::parse() {
  sed -En 's/[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p' "$@" | head -n1
}

# @description ensure tmpdir/bin exists and
# is added to PATH to make embed being executed automatically
# @noargs
# @exitcode 1 if cannot create tmp bin directory
# @set PATH string add tmp bin directory where to find embed binaries
# @stderr diagnostics information is displayed
Compiler::Embed::requireEmbedBinDir() {
  mkdir -p "${TMPDIR:-/tmp}/bin" || {
    Log::displayError "unable to create directory ${TMPDIR:-/tmp}/bin"
    return 1
  }
  Env::pathPrepend "${TMPDIR:-/tmp}/bin"
}

# @description ensure COMMAND_BIN_DIR env var is set
# and PATH correctly prepared
# @noargs
# @set COMMAND_BIN_DIR string the directory where to find this command
# @set PATH string add directory where to find this command binary
Compiler::Facade::requireCommandBinDir() {
  COMMAND_BIN_DIR="${CURRENT_DIR}"
  Env::pathPrepend "${COMMAND_BIN_DIR}"
}

# @description check if command specified exists or return 1
# with error and message if not
#
# @arg $1 commandName:String on which existence must be checked
# @arg $2 helpIfNotExists:String a help command to display if the command does not exist
#
# @exitcode 1 if the command specified does not exist
# @stderr diagnostic information + help if second argument is provided
Assert::commandExists() {
  local commandName="$1"
  local helpIfNotExists="$2"

  "${BASH_FRAMEWORK_COMMAND:-command}" -v "${commandName}" >/dev/null 2>/dev/null || {
    Log::displayError "${commandName} is not installed, please install it"
    if [[ -n "${helpIfNotExists}" ]]; then
      Log::displayInfo "${helpIfNotExists}"
    fi
    return 1
  }
  return 0
}

# @description check if tty (interactive mode) is active
# @noargs
# @exitcode 1 if tty not active
# @env NON_INTERACTIVE if 1 consider as not interactive even if environment is interactive
# @env INTERACTIVE if 1 consider as interactive even if environment is not interactive
Assert::tty() {
  if [[ "${NON_INTERACTIVE:-0}" = "1" ]]; then
    return 1
  fi
  if [[ "${INTERACTIVE:-0}" = "1" ]]; then
    return 0
  fi
  # check if stdout or stderr is connected to terminal
  [[ -t 1 || -t 2 ]]
}

# @description ignore exit code 141 from simple command pipes
# @example use with:
#   local resultingStatus=0
#   local -a originalPipeStatus=()
#   cmd1 | cmd2 || Bash::handlePipelineFailure resultingStatus originalPipeStatus || true
#   [[ "${resultingStatus}" = "0" ]]
# @arg $1 resultingStatusCode:&int (passed by reference) (optional) resulting status code
# @arg $2 originalStatus:int[] (passed by reference) (optional) copy of original PIPESTATUS array
# @env PIPESTATUS assuming that this function is called like in the example provided
# @see https://unix.stackexchange.com/a/709880/582856
Bash::handlePipelineFailure() {
  local -a pipeStatusBackup=("${PIPESTATUS[@]}")
  local -n handlePipelineFailure_resultingStatusCode=$1
  local -n handlePipelineFailure_originalStatus=$2
  # shellcheck disable=SC2034
  handlePipelineFailure_originalStatus=("${pipeStatusBackup[@]}")
  handlePipelineFailure_resultingStatusCode=0
  local statusCode
  for statusCode in "${pipeStatusBackup[@]}"; do
    if ((statusCode == 141)); then
      return 0
    elif ((statusCode > 0)); then
      # shellcheck disable=SC2034
      handlePipelineFailure_resultingStatusCode="${statusCode}"
      break
    fi
  done
  return "${handlePipelineFailure_resultingStatusCode}"
}

# @description check validity of .env variables
# @env CHECK_ENV int 0 to avoid checking environment
# @noargs
Engine::Config::checkEnv() {
  if [[ "${CHECK_ENV:-1}" = "0" ]]; then
    return 0
  fi
  local errorCount=0 || true
  checkNotEmpty() {
    local var="$1"
    if ! Assert::varExistsAndNotEmpty "${var}"; then
      ((++errorCount))
      return 1
    fi
  }
  checkVarAndDir() {
    local var="$1"
    local mode="${2:-}"
    local status=0
    if checkNotEmpty "${var}"; then
      if ! mkdir -p "${!var}"; then
        Log::displayError "variable ${var} - impossible to create the directory '${!var}'"
        ((errorCount++))
        return 1
      fi
      if [[ "${mode}" =~ w && ! -w "${!var}" ]]; then
        Log::displayError "variable ${var} - directory '${!var}' is not writable"
        ((status++))
        ((errorCount++))
      fi
      if [[ "${mode}" =~ r && ! -r "${!var}" ]]; then
        Log::displayError "variable ${var} - directory '${!var}' is not accessible"
        ((status++))
        ((errorCount++))
      fi
    fi

    return "${status}"
  }
  checkValidValues() {
    local var="$1"
    shift || true
    local -a validValues=("$@")
    if ! Array::contains "${!var}" "${validValues[@]}"; then
      Log::displayError "variable ${var} - value ${!var} is not part of the following values ${validValues[*]}"
      ((++errorCount))
    fi
  }

  if ! echo "${ID}" | grep -qEw 'debian|ubuntu'; then
    Log::fatal "This script is built to support only Debian or Ubuntu distributions. You are using ${ID}."
  fi

  if checkNotEmpty USERNAME && ! getent passwd "${USERNAME}" 2>/dev/null >/dev/null; then
    Log::displayError "USERNAME - user '${USERNAME}' does not exist"
    ((errorCount++))
  fi

  if [[ -n "${SSH_LOGIN:-}" ]] && ! Assert::ldapLogin "${SSH_LOGIN}"; then
    Log::displayError "SSH_LOGIN - invalid ldap login (format expected firstNameLastName) in ${BASH_DEV_ENV_ROOT_DIR}/.env file"
    ((errorCount++))
  fi

  if checkNotEmpty "GIT_USERNAME" && ! Assert::firstNameLastName "${GIT_USERNAME}"; then
    Log::displayError "GIT_USERNAME - invalid format, expected : firstName lastName"
    ((errorCount++))
  fi

  if checkNotEmpty "GIT_USER_MAIL" && ! Assert::emailAddress "${GIT_USER_MAIL}"; then
    Log::displayError "GIT_USER_MAIL - invalid email address"
    ((errorCount++))
  fi

  if checkNotEmpty "AWS_USER_MAIL" && ! Assert::emailAddress "${AWS_USER_MAIL}"; then
    Log::displayError "AWS_USER_MAIL - invalid email address"
    ((errorCount++))
  fi

  checkVarAndDir CONF_DIR r || true
  checkVarAndDir CONF_OVERRIDE_DIR r || true
  checkVarAndDir PROJECTS_DIR r || true
  checkVarAndDir BACKUP_DIR rw || true
  checkVarAndDir LOGS_DIR rw || true
  checkVarAndDir INSTALL_SCRIPTS_DIR r || true
  checkVarAndDir USER_HOME rw || true

  checkValidValues UPGRADE_UBUNTU_VERSION 0 lts dev
  checkValidValues AWS_AUTHENTICATOR Saml2Aws Awsume
  checkValidValues PREFERRED_SHELL ShellBash ShellZsh

  checkValidValues SHOW_FORTUNES 0 1
  checkValidValues SHOW_MOTD 0 1
  checkValidValues DOCKER_INSIDE_WSL 0 1
  checkValidValues OVERWRITE_CONFIG_FILES 0 1
  checkValidValues CHANGE_WINDOWS_FILES 0 1
  checkValidValues CAN_TALK_DURING_INSTALLATION 0 1
  checkValidValues INSTALL_INTERACTIVE 0 1

  checkNotEmpty WSLCONFIG_MAX_MEMORY
  checkValidValues WSLCONFIG_SWAP 0 1

  return "${errorCount}"
}

# @description if .env does not exist, initialize it with .env.template
Engine::Config::createEnvFileFromTemplate() {
  local envFile="$1"
  local envFileTemplate="$2"

  if [[ ! -f "${envFile}" ]]; then
    echo "${envFileTemplate}" >"${envFile}"
    Log::displayError "a default env file has been created, please edit ${envFile}"
    return 1
  fi
}

# @description install or update "${USER_HOME}/.bash-dev-env" file
# @env CONF_DIR
# @env WINDOWS_PROFILE_DIR
# EMBED "${BASH_DEV_ENV_ROOT_DIR}/home/.bash-dev-env" as bashDevEnv
Engine::Config::installBashDevEnv() {
  # shellcheck disable=SC2317
  bashDevEnvConfig() {
    sed -E -i \
      -e "s#BASH_DEV_ENV_ROOT_DIR=.*\$#BASH_DEV_ENV_ROOT_DIR=${BASH_DEV_ENV_ROOT_DIR}#g" \
      -e "s#WINDOWS_PROFILE_DIR=.*\$#WINDOWS_PROFILE_DIR=${WINDOWS_PROFILE_DIR}#g" \
      "${USER_HOME}/.bash-dev-env"
    sudo ln -sf "${USER_HOME}/.bash-dev-env" /root/.bash-dev-env
  }
  local fileToInstall
  # shellcheck disable=SC2154
  fileToInstall="$(Conf::dynamicConfFile "home/.bash-dev-env" "${embed_file_updateEnv}")" || return 1
  OVERWRITE_CONFIG_FILES=1 Install::file \
    "${fileToInstall}" "${USER_HOME}/.bash-dev-env" \
    "${USERNAME}" "${USERGROUP}" bashDevEnvConfig
}

# @description deduce wsl host ip
# @set HOST_IP exported env containing the IP
Engine::Config::loadHostIp() {
  HOST_IP="$(/sbin/ip route | awk '/default/ { print $3 }')"

  export HOST_IP
}

# @description load /etc/os-release file
# @set NAME
# @set VERSION
# @set ID
# @set ID_LIKE
# @set PRETTY_NAME
# @set VERSION_ID
# @set HOME_URL
# @set SUPPORT_URL
# @set BUG_REPORT_URL
# @set PRIVACY_POLICY_URL
# @set VERSION_CODENAME
# @set UBUNTU_CODENAME
Engine::Config::loadOsRelease() {
  if [[ ! -f /etc/os-release ]]; then
    Log::displayError "file /etc/os-release does not exists"
    return 1
  fi
  # This will load environment variables ID, VERSION_CODENAME, ...
  set -o allexport
  source /etc/os-release
  set +o allexport
}

# @description deduce USER_HOME, USER_ID, USERGROUP_ID and USERGROUP from USERNAME
# @env USERNAME String the name of the user
# @set USER_ID String
# @set USERGROUP String
# @set USERGROUP_ID String
# @set USER_HOME String
Engine::Config::loadUserVariables() {
  # deduce user home and group
  # shellcheck disable=SC2153
  USER_ID="$(getent passwd "${USERNAME}" | cut -d: -f3)"
  USERGROUP_ID="$(getent passwd "${USERNAME}" | cut -d: -f4)"
  USERGROUP="$(getent group "${USERGROUP_ID}" | cut -d: -f1)"
  USER_HOME="$(getent passwd "${USERNAME}" | cut -d: -f6)"

  if [[ -z "${USERGROUP}" || -z "${USER_HOME}" ]]; then
    Log::displayError "USERNAME - unable to deduce USERGROUP, USER_HOME from USERNAME"
    return 1
  fi

  export USER_HOME
  export USER_ID
  export USERGROUP_ID
  export USERGROUP
}

# @description load wsl env variables
# @set BASE_MNT_C
# @set WINDOWS_DIR
# @set WINDOWS_PROFILE_DIR
# @set LOCAL_APP_DATA
# @set WINDOW_PATH
# @set WSL_EXE_BIN
# @set IPCONFIG_BIN
# @set POWERSHELL_BIN
# @env WSL_EXE_BIN
# @env IPCONFIG_BIN
# @env POWERSHELL_BIN
Engine::Config::loadWslVariables() {
  if ! Assert::wsl; then
    # skip
    return 0
  fi
  # shellcheck disable=SC1003
  BASE_MNT_C="$(mount | grep 'path=C:\\' | awk -F ' ' '{print $3}')"

  WINDOWS_DIR="$(Linux::Wsl::cachedWslpathFromWslVar SystemRoot)"
  WINDOWS_DIR="${WINDOWS_DIR:-${BASE_MNT_C}/Windows}"
  export WINDOWS_DIR

  WINDOWS_PROFILE_DIR="$(Linux::Wsl::cachedWslpathFromWslVar USERPROFILE)"
  WINDOWS_PROFILE_DIR="${WINDOWS_PROFILE_DIR:-${BASE_MNT_C}/Users/$(id -un)}"
  export WINDOWS_PROFILE_DIR

  LOCAL_APP_DATA="$(Linux::Wsl::cachedWslpathFromWslVar LOCALAPPDATA | tr -d '\n\r')"
  export LOCAL_APP_DATA

  # WINDOW_PATH
  WINDOW_PATH="$(Linux::Wsl::cachedWslvar PATH)"
  WINDOW_PATH="${WINDOW_PATH//;/:}"
  WINDOW_PATH="${WINDOW_PATH//\\//}"
  WINDOW_PATH="${WINDOW_PATH//C:/${BASE_MNT_C}}"

  deduceBin() {
    local var="$1"
    local expectedFullPath="$2"
    local expectedBin="$3"
    if [[ -z "${!var+xxx}" ]]; then
      eval "${var}=${expectedFullPath}"
      if ! command -v "${!var}" >/dev/null 2>&1; then
        eval "${var}=$(command -v "${expectedBin}" 2>/dev/null)"
      fi
    fi
    if [[ -z "${!var:-}" ]] || ! command -v "${!var}" >/dev/null 2>&1; then
      Log::fatal "variable ${var} - command ${expectedBin} not found"
    fi
    # shellcheck disable=SC2163
    export "${var}"
  }

  checkBinary() {
    local var="$1"
    if [[ -z "${var}" || ! -x "${!var}" ]]; then
      Log::displayError "variable ${var} - binary '${!var}' does not exist or not executable"
      ((errorCount++))
    fi
  }

  local errorCount=0
  # IPCONFIG_BIN - which ipconfig.exe does not work when executed as root
  deduceBin IPCONFIG_BIN "${WINDOWS_DIR}/System32/ipconfig.exe" "ipconfig.exe"
  checkBinary IPCONFIG_BIN

  deduceBin WSL_EXE_BIN "${WINDOWS_DIR}/System32/wsl.exe" "wsl.exe"
  checkBinary WSL_EXE_BIN

  deduceBin POWERSHELL_BIN "${WINDOWS_DIR}/System32/WindowsPowerShell/v1.0/powershell.exe" "powershell.exe"
  checkBinary POWERSHELL_BIN

  return "${errorCount}"
}

# @description install apt wslu if necessary providing wslvar, wslpath
Engine::Config::requireWslu() {
  if ! command -v wslvar &>/dev/null; then
    Log::displayInfo "Installing pre-requisite Wslu : wslvar, wslpath, ... commands"
    Linux::Apt::update
    Linux::Apt::install --no-install-recommends wslu

    # @see https://github.com/microsoft/WSL/issues/8843#issuecomment-1792256894
    Log::displayInfo "Fix wsl interoperability due to wsl bug"
    if [[ ! -f /usr/lib/binfmt.d/WSLInterop.conf &&
      ! -f /etc/systemd/system/wsl-binfmt.service &&
      -f /run/systemd/generator.early/wsl-binfmt.service ]]; then
      sudo sh -c 'echo :WSLInterop:M::MZ::/init:PF > /usr/lib/binfmt.d/WSLInterop.conf'
      sudo ln -s /run/systemd/generator.early/wsl-binfmt.service /etc/systemd/system/wsl-binfmt.service
    fi
  fi
}

# @description prepend directories to the PATH environment variable
# @arg $@ args:String[] list of directories to prepend
# @set PATH update PATH with the directories prepended
Env::pathPrepend() {
  local arg
  for arg in "$@"; do
    if [[ -d "${arg}" && ":${PATH}:" != *":${arg}:"* ]]; then
      PATH="$(realpath "${arg}"):${PATH}"
    fi
  done
}

# @description pull git directory only if no change has been detected
# @arg $1 dir:String the git directory to pull
# @exitcode 0 on successful pulling
# @exitcode 1 on any other failure
# @exitcode 2 changes detected, pull avoided
# @exitcode 3 not a git directory
# @exitcode 4 not able to update index
# @stderr diagnostics information is displayed
# @env SUDO String allows to use custom sudo prefix command
# @require Git::requireGitCommand
Git::pullIfNoChanges() {
  local dir="$1"
  if [[ ! -d "${dir}/.git" ]]; then
    return 3
  fi
  (
    cd "${dir}" || return 3
    if ! ${SUDO:-} git update-index --refresh &>/dev/null; then
      Log::displayWarning "Impossible to update git index of '${dir}' - check if you have modified file"
      return 4
    fi
    if ! ${SUDO:-} git diff-index --quiet HEAD --; then
      Log::displayWarning "Pulling git repository '${dir}' avoided as changes detected"
      return 2
    fi
    Log::displayInfo "Pull git repository '${dir}' as no changes detected"
    ${SUDO:-} git pull --progress
  )
}

# @description Display given text on full line with TEST_COLOR style
# @arg $1 text:String text to display
Log::headLine() {
  local text="$1"
  local message
  message="$(UI::textLine "${text}" " ")"
  echo -e "${__TEST_COLOR}${message}${__RESET_COLOR}"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logDebug() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_DEBUG)); then
    Log::logMessage "${2:-DEBUG}" "$1"
  fi
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logError() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_ERROR)); then
    Log::logMessage "${2:-ERROR}" "$1"
  fi
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logFatal() {
  Log::logMessage "${2:-FATAL}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logInfo() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-INFO}" "$1"
  fi
}

# @description Internal: common log message
# @example text
#   [date]|[levelMsg]|message
#
# @example text
#   2020-01-19 19:20:21|ERROR  |log error
#   2020-01-19 19:20:21|SKIPPED|log skipped
#
# @arg $1 levelMsg:String message's level description (eg: STATUS, ERROR, ...)
# @arg $2 msg:String the message to display
# @env BASH_FRAMEWORK_LOG_FILE String log file to use, do nothing if empty
# @env BASH_FRAMEWORK_LOG_LEVEL int log level log only if > OFF or fatal messages
# @stderr diagnostics information is displayed
# @require Env::requireLoad
# @require Log::requireLoad
Log::logMessage() {
  local levelMsg="$1"
  local msg="$2"
  local date

  if [[ -n "${BASH_FRAMEWORK_LOG_FILE}" ]] && ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    date="$(date '+%Y-%m-%d %H:%M:%S')"
    touch "${BASH_FRAMEWORK_LOG_FILE}"
    printf "%s|%7s|%s\n" "${date}" "${levelMsg}" "${msg}" >>"${BASH_FRAMEWORK_LOG_FILE}"
  fi
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logWarning() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_WARNING)); then
    Log::logMessage "${2:-WARNING}" "$1"
  fi
}

# @description To be called before logging in the log file
# @arg $1 file:string log file name
# @arg $2 maxLogFilesCount:int maximum number of log files
Log::rotate() {
  local file="$1"
  local maxLogFilesCount="${2:-5}"

  if [[ ! -f "${file}" ]]; then
    Log::displaySkipped "Log file ${file} doesn't exist yet"
    return 0
  fi
  local i
  for ((i = maxLogFilesCount - 1; i > 0; i--)); do
    Log::displayInfo "Log rotation ${file}.${i} to ${file}.$((i + 1))"
    mv "${file}."{"${i}","$((i + 1))"} &>/dev/null || true
  done
  if cp "${file}" "${file}.1" &>/dev/null; then
    echo >"${file}" # reset log file
    Log::displayInfo "Log rotation ${file} to ${file}.1"
  fi
}

# @description Retry a command 5 times with a delay of 15 seconds between each attempt
# @arg $@ command:String[] the command to run
# @exitcode 0 on success
# @exitcode 1 if max retries count reached
Retry::default() {
  Retry::parameterized 5 15 "" "$@"
}

# @description trap function responsible to compute and display stats after each script execution
# @arg $1 step:String current step (msg)
# @arg $2 logFile:String
# @arg $3 statFile:String
# @arg $4 startDate:String date at which log started
Stats::computeStatsTrap() {
  local status="$?"
  local step="$1"
  local logFile="$2"
  local statFile="$3"
  local startDate="$4"
  local endDate
  endDate="$(date +%s)"
  Stats::computeFromLog "${logFile}" "${status}" "$((endDate - startDate))" >"${statFile}"
  Stats::statusLine "${statFile}" "${step}"
  return "${status}"
}

# @description compare 2 version numbers
# @arg $1 version1:String version 1
# @arg $2 version2:String version 2
# @exitcode 0 if equal
# @exitcode 1 if version1 > version2
# @exitcode 2 else
Version::compare() {
  if [[ "$1" = "$2" ]]; then
    return 0
  fi
  local IFS=.
  # shellcheck disable=2206
  local i ver1=($1) ver2=($2)
  # fill empty fields in ver1 with zeros
  for ((i = ${#ver1[@]}; i < ${#ver2[@]}; i++)); do
    ver1[i]=0
  done
  for ((i = 0; i < ${#ver1[@]}; i++)); do
    if [[ -z "${ver2[i]+unset}" ]] || [[ -z ${ver2[i]} ]]; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]})); then
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]})); then
      return 2
    fi
  done
  return 0
}

# @description ensure linux distribution is ubuntu
# @exitcode 1 if linux distribution is not ubuntu
Linux::requireUbuntu() {
  if ! Array::contains "$(Linux::getDistributorId)" "Ubuntu" "Debian"; then
    Log::fatal "this script should be executed under Ubuntu or Debian OS"
  fi
}

# @description load color theme
# @noargs
# @env BASH_FRAMEWORK_THEME String theme to use
# @env LOAD_THEME int 0 to avoid loading theme
# @exitcode 0 always successful
UI::requireTheme() {
  if [[ "${LOAD_THEME:-1}" = "1" ]]; then
    UI::theme "${BASH_FRAMEWORK_THEME-default}"
  fi
}

# @description check if an element is contained in an array
#
# @arg $1 needle:String
# @arg $@ array:String[]
# @exitcode 0 if found
# @exitcode 1 otherwise
# @example
#   Array::contains "${libPath}" "${__BASH_FRAMEWORK_IMPORTED_FILES[@]}"
Array::contains() {
  local element
  for element in "${@:2}"; do
    [[ "${element}" = "$1" ]] && return 0
  done
  return 1
}

# @description check if param is valid email address
# @warning it is a very simple check, no RFC validation
# @arg $1 emailAddress:String the full email address
# @exitcode 1 if invalid email address
Assert::emailAddress() {
  local expectedRegexp="^\S+@\S+$"

  [[ "$1" =~ ${expectedRegexp} ]]
}

# @description check if argument respects 2 or more words separated by a space
# it supports accentuated characters and names with hyphen(-)
# @arg $1 firstNameLastName:String
# @exitcode 1 if regexp not matches
# @see https://regex101.com/r/JyyfOM/1
Assert::firstNameLastName() {
  local regexp="^[^ ]+([ ][^ ]+)+$"
  [[ $1 =~ ${regexp} ]]
}

# @description check if argument respects ldap login naming convention
# only using lowercase characters a-z
# @arg $1 ldapLogin:String
# @exitcode 1 if regexp not matches
Assert::ldapLogin() {
  [[ $1 =~ ^[a-z]+$ ]]
}

# @description checks if variable name provided exists
# @arg $1 varName:String
# @exitcode 1 if variable doesn't exist
# @exitcode 2 if variable value empty
# @exitcode 3 if variable name invalid
# @see Assert::validVariableName
# @stderr diagnostics information is displayed
Assert::varExistsAndNotEmpty() {
  local varName="$1"
  if ! Assert::validVariableName "${varName}"; then
    Log::displayError "${varName} - invalid variable name"
    return 3
  fi
  if [[ -z "${!varName+unset}" ]]; then
    Log::displayError "${varName} - not defined"
    return 1
  elif [[ -z "${!varName}" ]]; then
    Log::displayError "${varName} - please provide a value"
    return 2
  fi
}

# @description determine if the script is executed under WSL
# cspell:disable
# @example text
#   uname GitBash windows (with wsl) => MINGW64_NT-10.0 ZOXFL-6619QN2 2.10.0(0.325/5/3) 2018-06-13 23:34 x86_64 Msys
#   uname GitBash windows (wo wsl)   => MINGW64_NT-10.0 frsa02-j5cbkc2 2.9.0(0.318/5/3) 2018-01-12 23:37 x86_64 Msys
#   uname wsl => Linux ZOXFL-6619QN2 4.4.0-17134-Microsoft #112-Microsoft Thu Jun 07 22:57:00 PST 2018 x86_64 x86_64 x86_64 GNU/Linux
# cspell:enable
#
# @exitcode 1 on error
Assert::wsl() {
  [[ "$(uname -o)" = "GNU/Linux" ]]
}

# @description select right file to load depending if file exists in this order:
# - from conf.override
# - from embedded file if provided
# - from conf dir
# @arg $1 file:String
# @arg $2 embedFile:String eventual embedded file
# @exitcode 1 if file does not exist at all
Conf::dynamicConfFile() {
  local file="${1/#\//}" # remove first slash if any
  local embedFile="${2:-}"
  if [[ -f "${CONF_OVERRIDE_DIR}/${file}" ]]; then
    echo "${CONF_OVERRIDE_DIR}/${file}"
    return 0
  elif [[ -f "${embedFile}" ]]; then
    echo "${embedFile}"
    return 0
  elif [[ -f "${CONF_DIR}/${file}" ]]; then
    echo "${CONF_DIR}/${file}"
    return 0
  fi
  Log::displayWarning "Conf::dynamicConfFile - ${file} does not exist in any config dirs declared"
  return 1
}

# @description installs file to given directory
#
# callbacks parameters `${fromFile} ${targetFile} $@`
# @arg $1 fromFile - original file to copy
# @arg $2 targetFile - target file
# @arg $3 userName:String (optional) (default: ${USERNAME}) the user name that will be used to set target files ownership
# @arg $4 userGroup:String (optional) (default: ${USERNAME}) the group name that will be used to set target files ownership
# @arg $5 successCallback:Function the callback to call when file is installed successfully, by default setUserRights callback is called
# @arg $6 failureCallback:Function the callback to call when file installation has failed, by default unableToCopyCallback callback is called
# @arg $@ callbacksParams:String[] additional parameters passed to callbacks
# @exitcode 1 if fromFile is not readable
# @exitcode 2 if backup file failure
# @exitcode 3 if copy failure
# @exitcode 0 on success or if OVERWRITE_CONFIG_FILES=0
# @exitcode 0 on success or if CHANGE_WINDOWS_FILES=0 and target file is a windows file
# @env OVERWRITE_CONFIG_FILES Boolean (default:0) if 1 will overwrite existing directory
# @env CHANGE_WINDOWS_FILES Boolean (default:0) if 1 and target file is in windows file system, overwrite it
# @env USERNAME (default: root) the user name that will be used to set target files ownership
# @env USERGROUP (default: root) the group name that will be used to set target files ownership
# @env BASE_MNT_C String windows C drive base PATH
# @env FRAMEWORK_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @env SUDO String allows to use custom sudo prefix command
# @env BACKUP_FILE Boolean (default: 1)
Install::file() {
  local fromFile="$1"
  local targetFile="$2"
  local userName="${3:-${USERNAME:-root}}"
  local userGroup="${4:-${USERGROUP:-root}}"
  local successCallback=${5:-Install::setUserRightsCallback}
  local failureCallback=${6:-Install::unableToCopyCallback}
  shift 6 || true

  if [[ ! -f "${fromFile}" || ! -r "${fromFile}" ]]; then
    Log::displayError "cannot read source file '${fromFile}'"
    return 1
  fi

  # skip if OVERWRITE_CONFIG_FILES is 0 and target file exists
  if [[ "${OVERWRITE_CONFIG_FILES}" = "0" && -f "${targetFile}" ]]; then
    Log::displayWarning "File '${targetFile}' exists - Skip install (because OVERWRITE_CONFIG_FILES=0 in .env file)"
    return 0
  fi

  # skip if CHANGE_WINDOWS_FILES is 0 and target dir is c drive
  if [[ "${CHANGE_WINDOWS_FILES}" = "0" && "${targetFile}" =~ ^${BASE_MNT_C} ]]; then
    Log::displayWarning "File '${targetFile}' - Skip install (because CHANGE_WINDOWS_FILES=0 in .env file)"
    return 0
  fi

  local targetDir
  targetDir="$(dirname "${targetFile}")"
  if [[ ! -d "${targetDir}" ]]; then
    ${SUDO:-} mkdir -p "${targetDir}"
    ${SUDO:-} chown "${userName}":"${userGroup}" "${targetDir}"
  fi
  local fromDir
  fromDir="$(dirname "${fromFile}")"
  local fromFilename
  fromFilename="$(basename "${fromFile}")"

  if [[ "${BACKUP_FILE:-1}" = "1" ]]; then
    Backup::file "${targetFile}" || return 2
  fi

  if ${SUDO:-} cp "${fromFile}" "${targetFile}"; then
    Log::displaySuccess "Installed file '${fromDir#"${FRAMEWORK_ROOT_DIR}/"}/${fromFilename}' to '${targetFile}'"
    ${successCallback} "${fromFile}" "${targetFile}" "${userName}" "${userGroup}" "${fromDir#"${FRAMEWORK_ROOT_DIR}/"}" "${fromFilename}"
  else
    Log::displayError "unable to copy file from '${fromDir#"${FRAMEWORK_ROOT_DIR}/"}/${fromFilename}' to '${targetFile}'"
    ${failureCallback} "${fromFile}" "${targetFile}" "${userName}" "${userGroup}" "${fromDir#"${FRAMEWORK_ROOT_DIR}/"}" "${fromFilename}"
    return 3
  fi
}

# @description retrieve path from wslvar and then use wslpath to resolve it
# using cache (cache is refreshed every day)
# @arg $1 var:String the var to retrieve using wslvar
# @arg $@ args:String[] (optional) additional arguments to pass to wslvar
# @env WSL_TMPDIR String temp directory to store the wslpath cache (default value: TMPDIR), you can use PERSISTENT_TMPDIR instead
# @exitcode * if Linux::Wsl::originalWslpath cannot find the path or Linux::Wsl::originalWslvar cannot find the var
# @stderr diagnostics information is displayed
# @require Linux::Wsl::requireWsl
# @feature cache
Linux::Wsl::cachedWslpathFromWslVar() {
  local var="$1"
  shift || true
  local value
  value="$(Linux::Wsl::cachedWslvar "${var}" "$@")" || return 1
  Linux::Wsl::cachedWslpath "${value}" || return 1
}

# @description retrieve wslvar using cache (cache is refreshed every day)
# @arg $@ args:String[] arguments to pass to wslvar
# @env WSL_TMPDIR String temp directory to store the wslvar cache (default value: TMPDIR), you can use PERSISTENT_TMPDIR instead
# @exitcode * if Linux::Wsl::originalWslvar cannot find the variable
# @stderr diagnostics information is displayed
# @require Linux::Wsl::requireWsl
# @feature cache
Linux::Wsl::cachedWslvar() {
  local tempEnvFile
  tempEnvFile="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_tools_wslvar_$(id -un)"

  Cache::getPropertyValue "${tempEnvFile}" "$1" Linux::Wsl::originalWslvar "$@"
}

# @description retrieve linux distributor id
# @noargs
# @exitcode 1 if lsb_release fails or not found
# @stdout the linux distributor id
Linux::getDistributorId() {
  lsb_release -a 2>/dev/null | sed -En 's/Distributor ID:[ \t]+(.+)/\1/p'
}

# @description Display message using skip color (yellow)
# @arg $1 message:String the message to display
Log::displaySkipped() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    echo -e "${__SKIPPED_COLOR}SKIPPED - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logSkipped "$1"
}

# @description Retry a command several times depending on parameters
# @arg $1 maxRetries:int    $1 max retries
# @arg $2 delay:int between attempt
# @arg $3 message:String to display to describe the attempt
# @arg $@ rest of parameters, the command to run
# @exitcode 0 on success
# @exitcode 1 if max retries count reached
# @exitcode 2 if maxRetries invalid value
Retry::parameterized() {
  local maxRetries=$1
  shift || true
  local delayBetweenTries=$1
  shift || true
  local message="$1"
  shift || true
  local retriesCount=1
  if [[ "${maxRetries}" -lt 1 ]]; then
    Log::displayError "invalid maxRetry value"
    return 2
  fi

  while true; do
    Log::displayInfo "Attempt ${retriesCount}/${maxRetries}: ${message}"
    if "$@"; then
      break
    elif [[ "${retriesCount}" -lt "${maxRetries}" ]]; then
      Log::displayWarning "Command failed. Wait for ${delayBetweenTries} seconds"
      ((retriesCount++))
      sleep "${delayBetweenTries}"
    else
      Log::displayError "The command has failed after ${retriesCount} attempts."
      return 1
    fi
  done
  return 0
}

# @description extract stats form log
# @arg $1 logFile:String the log file to parse
# @arg $2 status:int the status of the command associated to that log file
# @arg $3 duration:int the duration  of the command associated to that log file
# @stdout output with the format provided by this example src/Stats/aggregateStats.example
# @see src/Stats/aggregateStats.example
Stats::computeFromLog() {
  local logFile="$1"
  local status="$2"
  local duration="$3"

  local logStatsAwkScript
  logStatsAwkScript="$(
    cat <<'EOF'
BEGIN {
  error=0
  warning=0
  skipped=0
  help=0
  success=0
}
{
  buffer = substr($0, 1, 20)
  if(match(buffer, /(ERROR)[ ]+- /, arr) != 0) {
    error+=1
  } else if(match(buffer, /(WARNING)[ ]+- /, arr) != 0) {
    warning+=1
  } else if(match(buffer, /(SKIPPED)[ ]+- /, arr) != 0) {
    skipped+=1
  } else if(match(buffer, /(ERROR)[ ]+- /, arr) != 0) {
    error+=1
  } else if(match(buffer, /(HELP)[ ]+- /, arr) != 0) {
    help+=1
  } else if(match(buffer, /(SUCCESS)[ ]+- /, arr) != 0) {
    success+=1
  }

}
END {
  print "error=" error
  print "warning=" warning
  print "skipped=" skipped
  print "help=" help
  print "success=" success
}
EOF
  )"

  if [[ -f "${logFile}" ]]; then
    awk --source "${logStatsAwkScript}" "${logFile}"
    echo "status=${status}"
    echo "duration=${duration}"
  else
    # not executed
    echo "status=-1"
  fi
}

# @description display message to reflect last installation status
Stats::statusLine() {
  local statFile="$1"
  local msg="$2"
  if [[ ! -f "${statFile}" ]]; then
    return 0
  fi

  (
    # shellcheck source=src/Stats/logStats.example
    source "${statFile}" || exit 1

    local color="${__TEST_ERROR_COLOR}"
    local statusMsg
    if [[ "${status}" = "0" ]]; then
      if [[ "${skipped}" = "0" ]]; then
        color="${__SUCCESS_COLOR}"
        statusMsg="SUCCESS - ${msg} successful"
      else
        color="${__SKIPPED_COLOR}"
        statusMsg="SKIPPED - ${msg} skipped"
      fi
    elif [[ "${status}" = "-1" ]]; then
      statusMsg="ABORTED - ${msg} not executed"
    else
      statusMsg="ERROR   - ${msg} in error"
    fi
    # overwrite final TEST line
    echo -e "${color}${statusMsg}${__RESET_COLOR}"
  )
}

# @description Display given text and complete the rest of the line with given character
# @arg $1 text:String text to display
# @arg $2 character:String (default:#) character to use to complete the line
UI::textLine() {
  local text="$1"
  local character="${2:-#}"
  ((textSize = ${#text}))
  ((fullWith = $(tput cols)))
  ((remainingWidth = $((fullWith - textSize))))
  echo -n "${text}"
  printf '%*s\n' "${remainingWidth}" '' | tr ' ' "${character}"
}

# @description ensure command git is available
# @exitcode 1 if git command not available
# @stderr diagnostics information is displayed
Git::requireGitCommand() {
  Assert::commandExists git
}

# @description check if argument respects this framework variable naming convention
# - if variable begins with an uppercase or underscore, following letters have to be uppercase or underscore
# - variable name can includes ':' or '_' or digits but not as first letter
# here valid variable name examples
#
# @arg $1 variableName:String
# @exitcode 1 if regexp not matches
# @see https://regex101.com/r/BUlPXS/1
Assert::validVariableName() {
  echo "$1" | LC_ALL=POSIX grep -E -q '(^[a-z][A-Za-z_0-9:]+$)|(^[A-Z_][A-Z_0-9:]+$)'
}

# @description Backup given file in the same directory appending _ followed by the current date
# @arg $1 file:String the file to backup
# @stderr messages about backup file location
# @env SUDO String allows to use custom sudo prefix command
# @exitcode 1 on copy failure
Backup::file() {
  local file="$1"
  local backupFile
  if [[ -f "${file}" ]]; then
    backupFile="${file}_$(date +"%Y-%m-%d_%H:%M:%S")"
    Log::displayInfo "Backup file '${file}' to ${backupFile}"
    ${SUDO:-} cp "${file}" "${backupFile}"
  fi
}

# @description get property value from file
# if not present compute it using propertyNotFoundCallback (if provided) and store it in property file
# @arg $1 propertyFile:String the file in which the property will be searched
# @arg $2 key:String the property key to search in property file
# @arg $3 propertyNotFoundCallback:Function (optional) a callback to call if property key is not found in property file
# @arg $@ args:String[] (optional) the arguments to pass to the propertyNotFoundCallback
# @exitcode 1 if value is not found
# @exitcode * if propertyNotFoundCallback fails
# @stdout the property value given by property file or by the propertyNotFoundCallback
Cache::getPropertyValue() {
  local value
  local propertyFile="$1"
  shift || true
  local key
  key="$(echo -E "$1" | sed -E 's#\\#/#g')"
  shift || true
  local propertyNotFoundCallback=$1
  shift || true

  if grep -E "^${key}=.*" "${propertyFile}" &>/dev/null; then
    grep -E "^${key}=" "${propertyFile}" | cut -d'=' -f2
    return 0
  elif [[ "$(type -t "${propertyNotFoundCallback}")" = "function" ]]; then
    value="$("${propertyNotFoundCallback}" "$@")" || return $?
    if [[ -n "${value}" ]]; then
      echo -E "${key}=${value}" >>"${propertyFile}"
    fi
    echo -E "${value}"
    return 0
  fi
  return 1
}

# @description install callback
#   set file with root ownership and execution bit
# @arg $1 fromFile:String
# @arg $2 targetFile:String
# @arg $3 userName:String (optional) (default: ${USERNAME}) the user name that will be used to set target files ownership
# @arg $4 userGroup:String (optional) (default: ${USERNAME}) the group name that will be used to set target files ownership
# @env USERNAME (default: root) the user name that will be used to set target files ownership
# @env USERGROUP (default: root) the group name that will be used to set target files ownership
# @env SUDO String allows to use custom sudo prefix command
# @exitcode 1 on any failure
# @see Install::file
Install::setUserRightsCallback() {
  # shellcheck disable=SC2034 # $1 not used
  local fromFile="$1"
  local targetFile="$2"
  local userName="${3:-${USERNAME:-root}}"
  local userGroup="${4:-${USERGROUP:-root}}"

  ${SUDO:-} chown "${userName}":"${userGroup}" "${targetFile}"
}

# @description install callback
#   default callback used called when file copy has failed
# @arg $1 fromFile:String
# @arg $2 targetFile:String
# @env FRAMEWORK_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @exitcode 1 always fail
# @stderr diagnostics information is displayed
# @see Install::file
Install::unableToCopyCallback() {
  local fromDir="$1"
  local fileName="$2"
  local targetFile="$3"
  Log::fatal "unable to copy file '${fromDir#"${FRAMEWORK_ROOT_DIR}/"}/${fileName}' to '${targetFile}'"
}

# @description retrieve wslpath using cache (cache is refreshed every day)
# @arg $@ args:String[] arguments to pass to wslpath
# @env WSL_TMPDIR String temp directory to store the wslpath cache (default value: TMPDIR), you can use PERSISTENT_TMPDIR instead
# @exitcode * if Linux::Wsl::originalWslpath cannot find the path
# @stderr diagnostics information is displayed
# @require Linux::Wsl::requireWsl
# @feature cache
Linux::Wsl::cachedWslpath() {
  local -a args=("$@")
  local tempEnvFile key
  tempEnvFile="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_tools_wslpath_$(id -un)"

  key="$(Linux::Wsl::getKeyFromWslpathOptions "$@")"
  Cache::getPropertyValue "${tempEnvFile}" "${key}" Linux::Wsl::originalWslpath "${args[@]}"
}

# @description call simply original wslvar command
# @arg $@ args:String[] args to pass to wslvar
# @exitcode * wslvar exit code
# @stdout wslvar stdout
# @require Linux::Wsl::requireWsl
Linux::Wsl::originalWslvar() {
  wslvar "$@" | sed -z '$ s/[\r\n]$//'
}

# @description Display message using success color (bg green/fg white)
# @arg $1 message:String the message to display
Log::displaySuccess() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    echo -e "${__SUCCESS_COLOR}SUCCESS - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logSuccess "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logSkipped() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-SKIPPED}" "$1"
  fi
}

# @description ensure linux runs under wsl
# @env WSL_GARBAGE_COLLECT int 0 to disable garbage collect of cache files
# @exitcode 1 if linux does not run under wsl
Linux::Wsl::requireWsl() {
  Assert::wsl || return 1
  if [[ "${WSL_GARBAGE_COLLECT:-1}" = "1" ]]; then
    local tempEnvDir
    tempEnvDir="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}"
    File::garbageCollect "${tempEnvDir}/bash_tools_wslpath_$(id -un)" "1"
    tempEnvDir="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}"
    File::garbageCollect "${tempEnvDir}/bash_tools_wslvar_$(id -un)" "1"
  fi
}

# @description delete files older than n days in given path
# @warning use this function with caution as it will delete all files in given path without any prompt
# @arg $1 path:String the directory in which files will be deleted or the file to delete
# @arg $2 mtime:String expiration time in days (eg: 1 means 1 day) (default value: 1). Eg: +1 match files that have been accessed at least two days ago (rounding effect)
# @arg $3 maxdepth:int Descend at most levels (a non-negative integer) levels of directories below the starting-points. (default value: 1)
# @exitcode 1 if path not provided or empty
# @exitcode * find command failure code
# @stderr find output on error or diagnostics logs
# @see man find atime
File::garbageCollect() {
  local path="$1"
  local mtime="$2"
  local maxdepth="${3:-1}"

  if [[ -z "${path}" ]]; then
    return 1
  fi

  if [[ ! -e "${path}" ]]; then
    # path already removed
    return 0
  fi

  Log::displayInfo "Garbage collect files older than ${mtime} days in path ${path} with max depth ${maxdepth}"
  find "${path}" -depth -maxdepth "${maxdepth}" -type f -mtime "${mtime}" -print -delete
}

# @description Compute a cache from wslpath options
# @arg $@ args:String[] arguments passed to wslpath
# @stderr diagnostics information is displayed
# @stdout the cache key deduced from the options
# @require Linux::Wsl::requireWsl
# @feature cache
# @internal
Linux::Wsl::getKeyFromWslpathOptions() {
  local options
  options=$(getopt -o "auwm" -- "$@" 2>/dev/null) || {
    Log::displayError "invalid options specified"
    return 1
  }
  local key="wslpath"
  eval set -- "${options}"
  while true; do
    case "$1" in
      -a | -u | -w | -m)
        key="${key}$1"
        ;;
      --)
        shift || true
        break
        ;;
      *)
        shift || true
        Log::displayWarning "Unknown key $1"
        ;;
    esac
    shift || true
  done
  echo -E "${key}_$1"
}

# @description call simply original wslpath command
# @arg $@ args:String[] args to pass to wslpath
# @exitcode * wslpath exit code
# @stdout wslpath stdout
# @require Linux::Wsl::requireWsl
Linux::Wsl::originalWslpath() {
  wslpath "$@"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logSuccess() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-SUCCESS}" "$1"
  fi
}

# FUNCTIONS

# @require Compiler::Embed::requireEmbedBinDir

declare -gx embed_function_GithubUpgradeRelease="${PERSISTENT_TMPDIR:-/tmp}/bin/df2123f960f4f6472ca8461c85e403f3/githubUpgradeRelease"
declare -gx encoded_binary_file_GithubUpgradeRelease="IyEvdXNyL2Jpbi9lbnYgYmFzaAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgR0VORVJBVEVEIEZBQ0FERSBGUk9NIGh0dHBzOi8vZ2l0aHViLmNvbS9mY2hhc3RhbmV0L2Jhc2gtZGV2LWVudi90cmVlL21hc3Rlci92ZW5kb3IvYmFzaC10b29scy1mcmFtZXdvcmsvc3JjL0NvbXBpbGVyL0VtYmVkL2VtYmVkRnJhbWV3b3JrRnVuY3Rpb24uYmluRmlsZS50cGwKIyBETyBOT1QgRURJVCBJVAojIEBnZW5lcmF0ZWQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIyODgsU0MyMDM0CiMgQklOX0ZJTEU9JHtCSU5fRklMRX0KIyBGQUNBREUKCiMgZW5zdXJlIHRoYXQgbm8gdXNlciBhbGlhc2VzIGNvdWxkIGludGVyZmVyZSB3aXRoCiMgY29tbWFuZHMgdXNlZCBpbiB0aGlzIHNjcmlwdAp1bmFsaWFzIC1hIHx8IHRydWUKc2hvcHQgLXUgZXhwYW5kX2FsaWFzZXMKCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAooKGZhaWx1cmVzID0gMCkpIHx8IHRydWUKCiMgQmFzaCB3aWxsIHJlbWVtYmVyICYgcmV0dXJuIHRoZSBoaWdoZXN0IGV4aXQgY29kZSBpbiBhIGNoYWluIG9mIHBpcGVzLgojIFRoaXMgd2F5IHlvdSBjYW4gY2F0Y2ggdGhlIGVycm9yIGluc2lkZSBwaXBlcywgZS5nLiBteXNxbGR1bXAgfCBnemlwCnNldCAtbyBwaXBlZmFpbApzZXQgLW8gZXJyZXhpdAoKIyBDb21tYW5kIFN1YnN0aXR1dGlvbiBjYW4gaW5oZXJpdCBlcnJleGl0IG9wdGlvbiBzaW5jZSBiYXNoIHY0LjQKc2hvcHQgLXMgaW5oZXJpdF9lcnJleGl0IHx8IHRydWUKCiMgaWYgc2V0LCBhbmQgam9iIGNvbnRyb2wgaXMgbm90IGFjdGl2ZSwgdGhlIHNoZWxsIHJ1bnMgdGhlIGxhc3QgY29tbWFuZAojIG9mIGEgcGlwZWxpbmUgbm90IGV4ZWN1dGVkIGluIHRoZSBiYWNrZ3JvdW5kIGluIHRoZSBjdXJyZW50IHNoZWxsCiMgZW52aXJvbm1lbnQuCnNob3B0IC1zIGxhc3RwaXBlCgojIGEgbG9nIGlzIGdlbmVyYXRlZCB3aGVuIGEgY29tbWFuZCBmYWlscwpzZXQgLW8gZXJydHJhY2UKCiMgdXNlIG51bGxnbG9iIHNvIHRoYXQgKGZpbGUqLnBocCkgd2lsbCByZXR1cm4gYW4gZW1wdHkgYXJyYXkgaWYgbm8gZmlsZQojIG1hdGNoZXMgdGhlIHdpbGRjYXJkCnNob3B0IC1zIG51bGxnbG9iCgojIGVuc3VyZSByZWdleHAgYXJlIGludGVycHJldGVkIHdpdGhvdXQgYWNjZW50dWF0ZWQgY2hhcmFjdGVycwpleHBvcnQgTENfQUxMPVBPU0lYCgpleHBvcnQgVEVSTT14dGVybS0yNTZjb2xvcgoKIyBhdm9pZCBpbnRlcmFjdGl2ZSBpbnN0YWxsCmV4cG9ydCBERUJJQU5fRlJPTlRFTkQ9bm9uaW50ZXJhY3RpdmUKZXhwb3J0IERFQkNPTkZfTk9OSU5URVJBQ1RJVkVfU0VFTj10cnVlCgojIHN0b3JlIGNvbW1hbmQgYXJndW1lbnRzIGZvciBsYXRlciB1c2FnZQojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKZGVjbGFyZSAtYSBCQVNIX0ZSQU1FV09SS19BUkdWPSgiJEAiKQojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKZGVjbGFyZSAtYSBPUklHSU5BTF9CQVNIX0ZSQU1FV09SS19BUkdWPSgiJEAiKQoKIyBAc2VlIGh0dHBzOi8vdW5peC5zdGFja2V4Y2hhbmdlLmNvbS9hLzM4Njg1NgojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIzMTcKaW50ZXJydXB0TWFuYWdlbWVudCgpIHsKICAjIHJlc3RvcmUgU0lHSU5UIGhhbmRsZXIKICB0cmFwIC0gSU5UCiAgIyBlbnN1cmUgdGhhdCBDdHJsLUMgaXMgdHJhcHBlZCBieSB0aGlzIHNjcmlwdCBhbmQgbm90IGJ5IHN1YiBwcm9jZXNzCiAgIyByZXBvcnQgdG8gdGhlIHBhcmVudCB0aGF0IHdlIGhhdmUgaW5kZWVkIGJlZW4gaW50ZXJydXB0ZWQKICBraWxsIC1zIElOVCAiJCQiCn0KdHJhcCBpbnRlcnJ1cHRNYW5hZ2VtZW50IElOVApTQ1JJUFRfTkFNRT0kezAjIyovfQpSRUFMX1NDUklQVF9GSUxFPSIkKHJlYWRsaW5rIC1lICIkKHJlYWxwYXRoICIke0JBU0hfU09VUkNFWzBdfSIpIikiCmlmIFtbIC1uICIke0VNQkVEX0NVUlJFTlRfRElSfSIgXV07IHRoZW4KICBDVVJSRU5UX0RJUj0iJHtFTUJFRF9DVVJSRU5UX0RJUn0iCmVsc2UKICBDVVJSRU5UX0RJUj0iJChjZCAiJChyZWFkbGluayAtZSAiJHtSRUFMX1NDUklQVF9GSUxFJS8qfSIpIiAmJiBwd2QgLVApIgpmaQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgVGVtcCBkaXIgbWFuYWdlbWVudAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCktFRVBfVEVNUF9GSUxFUz0iJHtLRUVQX1RFTVBfRklMRVM6LTB9IgpleHBvcnQgS0VFUF9URU1QX0ZJTEVTCgojIFBFUlNJU1RFTlRfVE1QRElSIGlzIG5vdCBkZWxldGVkIGJ5IHRyYXBzClBFUlNJU1RFTlRfVE1QRElSPSIke1RNUERJUjotL3RtcH0vYmFzaC1mcmFtZXdvcmsiCmV4cG9ydCBQRVJTSVNURU5UX1RNUERJUgpta2RpciAtcCAiJHtQRVJTSVNURU5UX1RNUERJUn0iCgojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKVE1QRElSPSIkKG1rdGVtcCAtZCAtcCAiJHtQRVJTSVNURU5UX1RNUERJUjotL3RtcH0iIC10IGJhc2gtZnJhbWV3b3JrLSQkLVhYWFhYWCkiCmV4cG9ydCBUTVBESVIKCiMgdGVtcCBkaXIgY2xlYW5pbmcKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMzE3CmNsZWFuT25FeGl0KCkgewogIGlmIFtbICIke0tFRVBfVEVNUF9GSUxFUzotMH0iID0gIjEiIF1dOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlJbmZvICJLRUVQX1RFTVBfRklMRVM9MSB0ZW1wIGZpbGVzIGtlcHQgaGVyZSAnJHtUTVBESVJ9JyIKICBlbGlmIFtbIC1uICIke1RNUERJUit4eHh9IiBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5RGVidWcgIktFRVBfVEVNUF9GSUxFUz0wIHJlbW92aW5nIHRlbXAgZmlsZXMgJyR7VE1QRElSfSciCiAgICBybSAtUmYgIiR7VE1QRElSOi0vdG1wL2Zha2V9IiA+L2Rldi9udWxsIDI+JjEKICBmaQp9CnRyYXAgY2xlYW5PbkV4aXQgRVhJVCBIVVAgUVVJVCBBQlJUIFRFUk0KCiMgQGRlc2NyaXB0aW9uIGNoZWNrcyBpZiBmdW5jdGlvbiBuYW1lIHByb3ZpZGVkIGV4aXN0cwojIEBhcmcgJDEgZnVuY3Rpb25OYW1lOlN0cmluZwojIEBleGl0Y29kZSAxIGlmIGZ1bmN0aW9uIG5hbWUgZG9lc24ndCBleGlzdApBc3NlcnQ6OmZ1bmN0aW9uRXhpc3RzKCkgewogIGRlY2xhcmUgLUYgIiQxIiA+L2Rldi9udWxsCn0KCmVudkZpbGVUZW1wbGF0ZT0iJCgKICBjYXQgPDwnRU9GJwojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKIyB3c2wgdXNlcm5hbWUKVVNFUk5BTUU9IndzbCIKVVNFUkdST1VQPSJ3c2wiClVTRVJfSE9NRT0iL2hvbWUvd3NsIgoKIyB5b3VyIGxvZ2luIHRvIGNvbm5lY3QgdG8gc3NoIHNlcnZlcnMgaWYgYW55ClNTSF9MT0dJTj0iIgoKIyB5b3VyIGdpdCBmdWxsIG5hbWUgJ0ZpcnN0TmFtZSBMYXN0TmFtZScKR0lUX1VTRVJOQU1FPSIiCiMgZW1haWwgdXNlZCBmb3IgZ2l0ICdsZGFwQGRvbWFpbi5jb20nCkdJVF9VU0VSX01BSUw9IiIKIyBlbWFpbCB1c2VkIHRvIGNvbm5lY3QgdG8gYXdzCkFXU19VU0VSX01BSUw9ImZjaGFzdGFuZXRAZ21haWwuY29tIgojIGFwcCBpZCB0byBjb25uZWN0IHRvIGF3cyBhY2NvdW50CkFXU19BUFBfSUQ9IiIKQVdTX1BST0ZJTEU9IiIKQVdTX0RFRkFVTFRfUkVHSU9OPSIiCkFXU19URVNUX1NFQ1JFVF9JRD0iIgpBV1NfREVGQVVMVF9ET0NLRVJfUkVHSVNUUllfSUQ9IiIKCiMgaG9zdG5hbWUgb2YgdGhlIGRpc3RybwpESVNUUk9fSE9TVE5BTUU9IndzbEhvc3QiCgojIGNvbmYgZmlsZXMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBkaWZmZXJlbnQgdG9vbHMKQ09ORl9ESVI9IiR7QkFTSF9ERVZfRU5WX1JPT1RfRElSfS9jb25mIgoKIyBjb25mIGZpbGVzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgZGlmZmVyZW50IHRvb2xzCiMgc29tZSB0b29scyBjb25maWd1cmF0aW9uIHdpbGwgdXNlIENPTkZfRElSIGFzIHRlbXBsYXRlIGFuZAojIGNvcHkgZmlsZXMgaW50byB0aGlzIGRpcmVjdG9yeQpDT05GX09WRVJSSURFX0RJUj0iJHtCQVNIX0RFVl9FTlZfUk9PVF9ESVJ9L2NvbmYub3ZlcnJpZGUiCgojIHdoZXJlIHRvIGluc3RhbGwgYmFzaC10b29scywgLi4uCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1MwpQUk9KRUNUU19ESVI9IiR7VVNFUl9IT01FfS9wcm9qZWN0cyIKCiMgd2hlcmUgb3ZlcnJpZGRlbiBjb25maWcgZmlsZXMgd2lsbCBiZSBiYWNrZWQgdXAKQkFDS1VQX0RJUj0iJHtCQVNIX0RFVl9FTlZfUk9PVF9ESVJ9L2JhY2t1cCIKIyBsb2dzIENPTkZfRElSCkxPR1NfRElSPSIke0JBU0hfREVWX0VOVl9ST09UX0RJUn0vbG9ncyIKIyBpbnN0YWxsU2NyaXB0cyBkaXIKSU5TVEFMTF9TQ1JJUFRTX0RJUj0iJHtCQVNIX0RFVl9FTlZfUk9PVF9ESVJ9L2luc3RhbGxTY3JpcHRzIgoKIyAwICAgPT4gbm8gdXBncmFkZSBhdCBhbGwKIyBsdHMgPT4gVVBHUkFERSB0byBsYXRlc3QgdWJ1bnR1IGx0cyB2ZXJzaW9uCiMgZGV2ID0+IFVQR1JBREUgdG8gbGF0ZXN0IHVidW50dSBkZXYgdmVyc2lvbgojIFVzZSBpZiB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcsCiMgY291bGQgY2F1c2Ugc29tZSBwYWNrYWdlcyB0byBub3QgYmVpbmcgYXZhaWxhYmxlIHlldApVUEdSQURFX1VCVU5UVV9WRVJTSU9OPTAKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBQUk9GSUxFUyBvcHRpb25zCgojIENob29zZSB5b3VyIEFXUyBhdXRoZW50aWNhdG9yIHRvb2wKIyBwb3NzaWJsZSBjaG9pY2VzOiBTYW1sMkF3cywgQXdzdW1lCkFXU19BVVRIRU5USUNBVE9SPSJTYW1sMkF3cyIKCiMgQ2hvb3NlIHlvdXIgcHJlZmVycmVkIHNoZWxsCiMgcG9zc2libGUgY2hvaWNlczogU2hlbGxCYXNoIChMZWdhY3kgZXhwZXJpZW5jZSksIFNoZWxsWnNoIChSZWNvbW1lbmRlZCBleHBlcmllbmNlKQpQUkVGRVJSRURfU0hFTEw9IlNoZWxsQmFzaCIKCiMgRGlzcGxheSBGb3J0dW5lIHRvb2x0aXAgYXQgYmFzaC96c2ggc2Vzc2lvbiBvcGVuClNIT1dfRk9SVFVORVM9MQoKIyBEaXNwbGF5IE1PVEQgYXQgYmFzaC96c2ggc2Vzc2lvbiBvcGVuClNIT1dfTU9URD0xCgojIEluc3RhbGwgRG9ja2VyIGluc2lkZSB3c2wKRE9DS0VSX0lOU0lERV9XU0w9MQoKIyBDb25maWd1cmF0aW9uIGZpbGVzIGFyZSBvdmVyd3JpdHRlbiBldmVuIGlmIGV4aXN0cwojICEhISEgRmlyc3QgdGltZSBpbml0aWFsaXphdGlvbjogbGV0IHRoaXMgdmFsdWUgdG8gMSAhISEhCiMgVmFsdWUgMDoKIyAtIElmIHRhcmdldCBjb25maWd1cmF0aW9uIGZpbGUgZXhpc3RzLCBkaXNwbGF5cyBhIG1lc3NhZ2UgYW5kIGRvIG5vdCBvdmVyd3JpdGUgdGhlIGZpbGUKIyAtIElmIHRhcmdldCBjb25maWd1cmF0aW9uIGZpbGUgZG9lc24ndCBleGlzdCwgaW5zdGFsbHMgdGhlIGZpbGUKIyBWYWx1ZSAxCiMgLSBpbnN0YWxsIG9yIG92ZXJ3cml0ZSB0aGUgZmlsZSB3aXRob3V0IGNoZWNraW5nIGV4aXN0ZW5jZQpPVkVSV1JJVEVfQ09ORklHX0ZJTEVTPTEKCiMgV2luZG93cyBmaWxlcyBjYW4gYmUgb3ZlcnJpZGRlbiBpZiAxCiMgaWYgMAojIC0gc2tpcCBjaGFuZ2VzIHRvICVVU0VSUFJPRklMRSUvLndzbGNvbmZpZwojIC0gc2tpcCBjb3B5aW5nIGZvbnRzCkNIQU5HRV9XSU5ET1dTX0ZJTEVTPTEKCiMgSW5kaWNhdGUgdGhhdCBpbnN0YWxsIHNjcmlwdCBjYW4gd2FybiB5b3UgdXNpbmcgc3BlYWtlciB3aGVuIHlvdXIgaW5wdXQgaXMgbmVlZGVkCkNBTl9UQUxLX0RVUklOR19JTlNUQUxMQVRJT049JHtDQU5fVEFMS19EVVJJTkdfSU5TVEFMTEFUSU9OOi0xfQoKIyBpZiAwIGluc3RhbGwgc2NyaXB0IHdpbGwgc2tpcCBhbGwgaW50ZXJhY3RpdmUgYWN0aXZpdHkgKHNhbWwyYXdzLCAuLi4pLAojIHNvIGRlcGVuZGVudCBpbnN0YWxsYXRpb24gd2lsbCBiZSBza2lwcGVkIGFzIHdlbGwKSU5TVEFMTF9JTlRFUkFDVElWRT0ke0lOU1RBTExfSU5URVJBQ1RJVkU6LTF9CgojIGRpc3BsYXkgZWxhcHNlZCB0aW1lIHNpbmNlIGxhc3QgbG9nCkRJU1BMQVlfRFVSQVRJT049MQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIFdTTENPTkZJRyAtIHRoZXNlIHBhcmFtZXRlcnMgd2lsbCBoZWxwIHRvIGF1dG9tYXRpY2FsbHkKIyBjb25maWd1cmUgJVVTRVJQUk9GSUxFJS8ud3NsY29uZmlnIGZpbGUKIyBBZGp1c3QgdGhlc2UgdmFsdWVzIHRvIHlvdXIgbmVlZHMKIyBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3dpbmRvd3Mvd3NsL3dzbC1jb25maWcKIyBSZWNvbW1lbmRlZCA1MCUgb2YgdG90YWwgbWVtb3J5CldTTENPTkZJR19NQVhfTUVNT1JZPThHQgojIHBlcnNvbmFsbHkgSSBwcmVmZXIgcnVuIG91dCBvZiBtZW1vcnkgaW5zdGVhZCBvZiBiZWdpbm5pbmcgc3dhcHBpbmcKIyBTbyBJIGtub3cgaW1tZWRpYXRlbHkgaWYgc29tZSBwcm9jZXNzZXMgaGF2ZSB0byBiZSBzdG9wcGVkCldTTENPTkZJR19TV0FQPTAKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBIYWNrcwojIG9uIHNvbWUgY29uZmlndXJhdGlvbnMgd2UgaGF2ZSB0byBmb3JjZSBwYXRoIG9mIHNvbWUgd2luZG93cyBjb21tYW5kcwojUE9XRVJTSEVMTF9CSU49L21udC9jL1dpbmRvd3MvU3lzdGVtMzIvV2luZG93c1Bvd2VyU2hlbGwvdjEuMC9wb3dlcnNoZWxsLmV4ZQojSVBDT05GSUdfQklOPS9tbnQvYy9XaW5kb3dzL3N5c3RlbTMyL2lwY29uZmlnLmV4ZQojV1NMX0VYRV9CSU49L21udC9jL1dpbmRvd3Mvc3lzdGVtMzIvd3NsLmV4ZQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIERpc3RybwojIE9ubHkgbmVjZXNzYXJ5IHdoZW4gdXNpbmcgdGhlIHNjcmlwdCBkaXN0cm8KIyB0byBjcmVhdGUgb3IgdXBkYXRlIGEgd3NsIGRpc3RyaWJ1dGlvbgoKIyBUaGUgbmFtZSBvZiB0aGUgZGlzdHJvIGRpc3BsYXllZCBpbiBgd3NsIC1sIC12YCBjb21tYW5kCkRJU1RST19OQU1FPSJVYnVudHVUZXN0IgojIHdoZXJlIHRvIGRvd25sb2FkIHRoZSBkaXN0cmlidXRpb24KRElTVFJPX1VSTD0iaHR0cHM6Ly9ha2EubXMvd3NsdWJ1bnR1MjAwNCIKIyBQcm9maWxlIHRvIHVzZSB3aXRoIGluc3RhbGwgY29tbWFuZApESVNUUk9fSU5TVEFMTF9QUk9GSUxFPSJkZWZhdWx0IgojIFRoZSBwYXRoIHdoZXJlIGJhc2gtZGV2LWVudiBwcm9qZWN0IHdpbGwgYmUgY29waWVkIGludG8gdGFyZ2V0IGRpc3RybwpESVNUUk9fQkFTSF9ERVZfRU5WX1RBUkdFVF9ESVI9IiR7QkFTSF9ERVZfRU5WX1JPT1RfRElSfSIKRU9GCikiCgojIEBkZXNjcmlwdGlvbiBsb2FkIC5lbnYgZmlsZQojIEBhcmcgJDEgZW52RmlsZTpTdHJpbmcgdGhlIGZpbGUgdG8gbG9hZApFbmdpbmU6OkNvbmZpZzo6bG9hZENvbmZpZygpIHsKICBpZiBbWyAiJHtCQVNIX0RFVl9FTlZfQ09ORklHX0xPQURFRDotfSIgPSAiMSIgXV07IHRoZW4KICAgIHJldHVybiAwCiAgZmkKICBsb2NhbCBlbnZGaWxlPSIke0JBU0hfREVWX0VOVl9ST09UX0RJUn0vLmVudiIKICBFbmdpbmU6OkNvbmZpZzo6Y3JlYXRlRW52RmlsZUZyb21UZW1wbGF0ZSBcCiAgICAiJHtlbnZGaWxlfSIgIiR7ZW52RmlsZVRlbXBsYXRlfSIgfHwgZXhpdCAxCiAgc2V0IC1vIGFsbGV4cG9ydAogICMgc2hlbGxjaGVjayBzb3VyY2U9Ly5lbnYudGVtcGxhdGUKICBzb3VyY2UgPChlY2hvICIke2VudkZpbGVUZW1wbGF0ZX0iKQogICMgc2hlbGxjaGVjayBzb3VyY2U9Ly5lbnYKICBzb3VyY2UgIiR7QkFTSF9ERVZfRU5WX1JPT1RfRElSfS8uZW52IgogIHNldCArbyBhbGxleHBvcnQKCiAgIyBsb2FkIGVudmlyb25tZW50IHZhcmlhYmxlcyBJRCwgVkVSU0lPTl9DT0RFTkFNRQogIEVuZ2luZTo6Q29uZmlnOjpsb2FkT3NSZWxlYXNlCgogIGlmICEgRW5naW5lOjpDb25maWc6OmNoZWNrRW52OyB0aGVuCiAgICBMb2c6OmRpc3BsYXlFcnJvciAib25lIG9yIG1vcmUgdmFyaWFibGVzIGFyZSBpbnZhbGlkLCBjaGVjayBhYm92ZSBsb2dzIGFuZCBmaXggJyR7ZW52RmlsZX0nIGZpbGUgYWNjb3JkaW5nbHkiCiAgICByZXR1cm4gMQogIGZpCgogIEVuZ2luZTo6Q29uZmlnOjpsb2FkVXNlclZhcmlhYmxlcwogIEVuZ2luZTo6Q29uZmlnOjpsb2FkSG9zdElwCgogIEVuZ2luZTo6Q29uZmlnOjpyZXF1aXJlV3NsdQoKICAjTGludXg6OldzbDo6aW5pdEVudgogIEVuZ2luZTo6Q29uZmlnOjpsb2FkV3NsVmFyaWFibGVzCgogIEVuZ2luZTo6Q29uZmlnOjppbnN0YWxsQmFzaERldkVudiAiJHtDT05GX0RJUn0iICIke0xEQVBfTE9HSU59IiAiJHtXSU5ET1dTX1BST0ZJTEVfRElSfSIKCiAgTG9nOjpyZXF1aXJlTG9hZAoKICBleHBvcnQgQkFTSF9ERVZfRU5WX0NPTkZJR19MT0FERUQ9MQp9CgojIEBkZXNjcmlwdGlvbiB1cGdyYWRlIGdpdmVuIGJpbmFyeSB0byBsYXRlc3QgZ2l0aHViIHJlbGVhc2UgdXNpbmcgcmV0cnkKIwojIHJlbGVhc2VVcmwgYXJndW1lbnQgOiB0aGUgcGxhY2Vob2xkZXIgQGxhdGVzdFZlcnNpb25AIHdpbGwgYmUgcmVwbGFjZWQgYnkgdGhlIGxhdGVzdCByZWxlYXNlIHZlcnNpb24KIyBAYXJnICQxIHRhcmdldEZpbGU6U3RyaW5nIHRhcmdldCBiaW5hcnkgZmlsZSAoZWc6IC91c3IvbG9jYWwvYmluL2tpbmQpCiMgQGFyZyAkMiByZWxlYXNlVXJsOlN0cmluZyBnaXRodWIgcmVsZWFzZSB1cmwgKGVnOiBodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy1zaWdzL2tpbmQvcmVsZWFzZXMvZG93bmxvYWQvQGxhdGVzdFZlcnNpb25AL2tpbmQtbGludXgtYW1kNjQpCiMgQGFyZyAkMyBhcmdWZXJzaW9uOlN0cmluZyBwYXJhbWV0ZXIgdG8gYWRkIHRvIGV4aXN0aW5nIGNvbW1hbmQgdG8gY29tcHV0ZSBjdXJyZW50IHZlcnNpb24KIyBAYXJnICQ0IHZlcnNpb25DYWxsYmFjazpGdW5jdGlvbiBmdW5jdGlvbiBjYWxsZWQgdG8gZ2V0IHNvZnR3YXJlIHZlcnNpb24gKGRlZmF1bHQ6IFZlcnNpb246OmdldENvbW1hbmRWZXJzaW9uRnJvbVBsYWluVGV4dCB3aWxsIGNhbGwgc29mdHdhcmUgd2l0aCBhcmd1bWVudCAtLXZlcnNpb24pCiMgQGFyZyAkNSBpbnN0YWxsQ2FsbGJhY2s6RnVuY3Rpb24gZnVuY3Rpb24gY2FsbGVkIHRvIGluc3RhbGwgdGhlIGZpbGUgcmV0cmlldmVkIG9uIGdpdGh1YiAoZGVmYXVsdCBjb3B5IGFzIGlzIGFuZCBzZXQgZXhlY3V0aW9uIGJpdCkKIyBAYXJnICQ2IHBhcnNlVmVyc2lvbkNhbGxiYWNrOkZ1bmN0aW9uIGZ1bmN0aW9uIHRvIGNhbGwgdG8gZmlsdGVyIHRoZSB2ZXJzaW9uIHJldHJpZXZlZCAoRWc6IFZlcnNpb246OnBhcnNlKQojIEBzdGRvdXQgbG9nIG1lc3NhZ2VzIGFib3V0IHJldHJ5LCBpbnN0YWxsLCB1cGdyYWRlCkdpdGh1Yjo6dXBncmFkZVJlbGVhc2UoKSB7CiAgbG9jYWwgdGFyZ2V0RmlsZT0iJDEiCiAgbG9jYWwgcmVsZWFzZVVybD0iJDIiCiAgbG9jYWwgYXJnVmVyc2lvbj0iJHszOi0tLXZlcnNpb259IgogIGxvY2FsIHZlcnNpb25DYWxsYmFjaz0iJHs0Oi1WZXJzaW9uOjpnZXRDb21tYW5kVmVyc2lvbkZyb21QbGFpblRleHR9IgogICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogIGxvY2FsIGluc3RhbGxDYWxsYmFjaz0iJHs1Oi19IgogIGxvY2FsIHBhcnNlVmVyc2lvbkNhbGxiYWNrPSIkezY6LX0iCiAgbG9jYWwgbGF0ZXN0VmVyc2lvbgogIGxvY2FsIHJlcG8KCiAgcmVwbz0iJChHaXRodWI6OmV4dHJhY3RSZXBvRnJvbUdpdGh1YlVybCAiJHtyZWxlYXNlVXJsfSIpIgogIEdpdGh1Yjo6Z2V0TGF0ZXN0UmVsZWFzZSAiJHtyZXBvfSIgbGF0ZXN0VmVyc2lvbiB8fAogICAgTG9nOjpmYXRhbCAiUmVwbyAke3JlcG99IGxhdGVzdCB2ZXJzaW9uIG5vdCBmb3VuZCIKICBpZiBbWyAiJCh0eXBlIC10ICIke3BhcnNlVmVyc2lvbkNhbGxiYWNrfSIpIiA9ICJmdW5jdGlvbiIgXV07IHRoZW4KICAgIGxhdGVzdFZlcnNpb249IiQoJHtwYXJzZVZlcnNpb25DYWxsYmFja30gPDw8IiR7bGF0ZXN0VmVyc2lvbn0iKSIKICBmaQogIExvZzo6ZGlzcGxheUluZm8gIlJlcG8gJHtyZXBvfSBsYXRlc3QgdmVyc2lvbiBmb3VuZCBpcyAke2xhdGVzdFZlcnNpb259IgoKICBsb2NhbCBjdXJyZW50VmVyc2lvbj0ibm90IGV4aXN0aW5nIgogIGlmIFtbIC1mICIke3RhcmdldEZpbGV9IiBdXTsgdGhlbgogICAgY3VycmVudFZlcnNpb249IiQoJHt2ZXJzaW9uQ2FsbGJhY2t9ICIke3RhcmdldEZpbGV9IiAiJHthcmdWZXJzaW9ufSIgMj4mMSB8fCB0cnVlKSIKICBmaQogIGlmIFtbICIke2N1cnJlbnRWZXJzaW9ufSIgPSAiJHtsYXRlc3RWZXJzaW9ufSIgXV07IHRoZW4KICAgIExvZzo6ZGlzcGxheUluZm8gIiR7dGFyZ2V0RmlsZX0gdmVyc2lvbiAke2xhdGVzdFZlcnNpb259IGFscmVhZHkgaW5zdGFsbGVkIgogIGVsc2UKICAgIGlmIFtbIC16ICIke2N1cnJlbnRWZXJzaW9ufSIgXV07IHRoZW4KICAgICAgTG9nOjpkaXNwbGF5SW5mbyAiSW5zdGFsbGluZyAke3RhcmdldEZpbGV9IHdpdGggdmVyc2lvbiAke2xhdGVzdFZlcnNpb259IgogICAgZWxzZQogICAgICBMb2c6OmRpc3BsYXlJbmZvICJVcGdyYWRpbmcgJHt0YXJnZXRGaWxlfSBmcm9tIHZlcnNpb24gJHtjdXJyZW50VmVyc2lvbn0gdG8gJHtsYXRlc3RWZXJzaW9ufSIKICAgIGZpCiAgICBsb2NhbCB1cmwKICAgIHVybD0iJChlY2hvICIke3JlbGVhc2VVcmx9IiB8IHNlZCAtRSAicy9AbGF0ZXN0VmVyc2lvbkAvJHtsYXRlc3RWZXJzaW9ufS9nIikiCiAgICBMb2c6OmRpc3BsYXlJbmZvICJVc2luZyB1cmwgJHt1cmx9IgogICAgbmV3U29mdHdhcmU9JChta3RlbXAgLXAgIiR7VE1QRElSOi0vdG1wfSIgLXQgZ2l0aHViLm5ld1NvZnR3YXJlLlhYWFgpCiAgICBSZXRyeTo6ZGVmYXVsdCBjdXJsIFwKICAgICAgLUwgXAogICAgICAtbyAiJHtuZXdTb2Z0d2FyZX0iIFwKICAgICAgLS1mYWlsIFwKICAgICAgIiR7dXJsfSIKCiAgICBHaXRodWI6OmRlZmF1bHRJbnN0YWxsICIke25ld1NvZnR3YXJlfSIgIiR7dGFyZ2V0RmlsZX0iICIke2xhdGVzdFZlcnNpb259IiAiJHtpbnN0YWxsQ2FsbGJhY2t9IgogIGZpCn0KCiMgQGRlc2NyaXB0aW9uIExvZyBuYW1lc3BhY2UgcHJvdmlkZXMgMiBraW5kIG9mIGZ1bmN0aW9ucwojIC0gTG9nOjpkaXNwbGF5KiBhbGxvd3MgdG8gZGlzcGxheSBnaXZlbiBtZXNzYWdlIHdpdGgKIyAgIGdpdmVuIGRpc3BsYXkgbGV2ZWwKIyAtIExvZzo6bG9nKiBhbGxvd3MgdG8gbG9nIGdpdmVuIG1lc3NhZ2Ugd2l0aAojICAgZ2l2ZW4gbG9nIGxldmVsCiMgTG9nOjpkaXNwbGF5KiBmdW5jdGlvbnMgYXV0b21hdGljYWxseSBsb2cgdGhlIG1lc3NhZ2UgdG9vCiMgQHNlZSBFbnY6OnJlcXVpcmVMb2FkIHRvIGxvYWQgdGhlIGRpc3BsYXkgYW5kIGxvZyBsZXZlbCBmcm9tIC5lbnYgZmlsZQoKIyBAZGVzY3JpcHRpb24gbG9nIGxldmVsIG9mZgpleHBvcnQgX19MRVZFTF9PRkY9MAojIEBkZXNjcmlwdGlvbiBsb2cgbGV2ZWwgZXJyb3IKZXhwb3J0IF9fTEVWRUxfRVJST1I9MQojIEBkZXNjcmlwdGlvbiBsb2cgbGV2ZWwgd2FybmluZwpleHBvcnQgX19MRVZFTF9XQVJOSU5HPTIKIyBAZGVzY3JpcHRpb24gbG9nIGxldmVsIGluZm8KZXhwb3J0IF9fTEVWRUxfSU5GTz0zCiMgQGRlc2NyaXB0aW9uIGxvZyBsZXZlbCBzdWNjZXNzCmV4cG9ydCBfX0xFVkVMX1NVQ0NFU1M9MwojIEBkZXNjcmlwdGlvbiBsb2cgbGV2ZWwgZGVidWcKZXhwb3J0IF9fTEVWRUxfREVCVUc9NAoKIyBAZGVzY3JpcHRpb24gdmVyYm9zZSBsZXZlbCBvZmYKZXhwb3J0IF9fVkVSQk9TRV9MRVZFTF9PRkY9MAojIEBkZXNjcmlwdGlvbiB2ZXJib3NlIGxldmVsIGluZm8KZXhwb3J0IF9fVkVSQk9TRV9MRVZFTF9JTkZPPTEKIyBAZGVzY3JpcHRpb24gdmVyYm9zZSBsZXZlbCBpbmZvCmV4cG9ydCBfX1ZFUkJPU0VfTEVWRUxfREVCVUc9MgojIEBkZXNjcmlwdGlvbiB2ZXJib3NlIGxldmVsIGluZm8KZXhwb3J0IF9fVkVSQk9TRV9MRVZFTF9UUkFDRT0zCgojIEBkZXNjcmlwdGlvbiBEaXNwbGF5IG1lc3NhZ2UgdXNpbmcgZGVidWcgY29sb3IgKGdyZXkpCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6ZGlzcGxheURlYnVnKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfRElTUExBWV9MRVZFTCA+PSBfX0xFVkVMX0RFQlVHKSk7IHRoZW4KICAgIGVjaG8gLWUgIiR7X19ERUJVR19DT0xPUn1ERUJVRyAgIC0gJHsxfSR7X19SRVNFVF9DT0xPUn0iID4mMgogIGZpCiAgTG9nOjpsb2dEZWJ1ZyAiJDEiCn0KCkZJUlNUX0xPR19EQVRFPSIkKGRhdGUgJyslcyUzTicpIgpMT0dfTEFTVF9MT0dfREFURT0iJHtGSVJTVF9MT0dfREFURX0iCkxPR19MQVNUX0xPR19EQVRFX0lOSVQ9MQoKIyBAZGVzY3JpcHRpb24gRGlzcGxheSBtZXNzYWdlIHVzaW5nIGluZm8gY29sb3IgKGJnIGxpZ2h0IGJsdWUvZmcgd2hpdGUpCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CiMgQGVudiBESVNQTEFZX0RVUkFUSU9OIGludCAoZGVmYXVsdCAwKSBpZiAxIGRpc3BsYXkgZWxhcHNlZCB0aW1lIGluZm9ybWF0aW9uIGJldHdlZW4gMiBpbmZvIGxvZ3MKTG9nOjpkaXNwbGF5SW5mbygpIHsKICBsb2NhbCB0eXBlPSIkezI6LUlORk99IgogIGlmICgoQkFTSF9GUkFNRVdPUktfRElTUExBWV9MRVZFTCA+PSBfX0xFVkVMX0lORk8pKTsgdGhlbgogICAgbG9jYWwgZHVyYXRpb25Nc2c9IiIKICAgIGlmICgoRElTUExBWV9EVVJBVElPTiA9PSAxKSk7IHRoZW4KICAgICAgbG9jYWwgZHVyYXRpb24KICAgICAgbG9jYWwgLWkgY3VycmVudExvZ0RhdGUKICAgICAgY3VycmVudExvZ0RhdGU9IiQoZGF0ZSAnKyVzJTNOJykiCiAgICAgIGlmICgoTE9HX0xBU1RfTE9HX0RBVEVfSU5JVCA9PSAxKSk7IHRoZW4KICAgICAgICBMT0dfTEFTVF9MT0dfREFURV9JTklUPTAKICAgICAgICBkdXJhdGlvbj0iUmVmIgogICAgICBlbHNlCiAgICAgICAgZHVyYXRpb249IiQoKCAoY3VycmVudExvZ0RhdGUgLSBGSVJTVF9MT0dfREFURSkgLzEwMDAgKSlzLyskKCggKGN1cnJlbnRMb2dEYXRlIC0gTE9HX0xBU1RfTE9HX0RBVEUpIC8xMDAwICkpcyIKICAgICAgZmkKICAgICAgTE9HX0xBU1RfTE9HX0RBVEU9IiR7Y3VycmVudExvZ0RhdGV9IgogICAgICBkdXJhdGlvbk1zZz0iJChkYXRlICcrJUg6JU06JVMuJTNOJykoJHtkdXJhdGlvbn0pIC0gIgogICAgZmkKICAgIGVjaG8gLWUgIiR7X19JTkZPX0NPTE9SfSR7dHlwZX0gICAgLSAke2R1cmF0aW9uTXNnfSR7MX0ke19fUkVTRVRfQ09MT1J9IiA+JjIKICBmaQogIExvZzo6bG9nSW5mbyAiJDEiICIke3R5cGV9Igp9CgojIEBkZXNjcmlwdGlvbiBlbnN1cmUgQ09NTUFORF9CSU5fRElSIGVudiB2YXIgaXMgc2V0CiMgYW5kIFBBVEggY29ycmVjdGx5IHByZXBhcmVkCiMgQG5vYXJncwojIEBzZXQgQ09NTUFORF9CSU5fRElSIHN0cmluZyB0aGUgZGlyZWN0b3J5IHdoZXJlIHRvIGZpbmQgdGhpcyBjb21tYW5kCiMgQHNldCBQQVRIIHN0cmluZyBhZGQgZGlyZWN0b3J5IHdoZXJlIHRvIGZpbmQgdGhpcyBjb21tYW5kIGJpbmFyeQpDb21waWxlcjo6RmFjYWRlOjpyZXF1aXJlQ29tbWFuZEJpbkRpcigpIHsKICBDT01NQU5EX0JJTl9ESVI9IiR7Q1VSUkVOVF9ESVJ9IgogIEVudjo6cGF0aFByZXBlbmQgIiR7Q09NTUFORF9CSU5fRElSfSIKfQoKIyBAZGVzY3JpcHRpb24gY2hlY2sgdmFsaWRpdHkgb2YgLmVudiB2YXJpYWJsZXMKIyBAZW52IENIRUNLX0VOViBpbnQgMCB0byBhdm9pZCBjaGVja2luZyBlbnZpcm9ubWVudAojIEBub2FyZ3MKRW5naW5lOjpDb25maWc6OmNoZWNrRW52KCkgewogIGlmIFtbICIke0NIRUNLX0VOVjotMX0iID0gIjAiIF1dOyB0aGVuCiAgICByZXR1cm4gMAogIGZpCiAgbG9jYWwgZXJyb3JDb3VudD0wIHx8IHRydWUKICBjaGVja05vdEVtcHR5KCkgewogICAgbG9jYWwgdmFyPSIkMSIKICAgIGlmICEgQXNzZXJ0Ojp2YXJFeGlzdHNBbmROb3RFbXB0eSAiJHt2YXJ9IjsgdGhlbgogICAgICAoKCsrZXJyb3JDb3VudCkpCiAgICAgIHJldHVybiAxCiAgICBmaQogIH0KICBjaGVja1ZhckFuZERpcigpIHsKICAgIGxvY2FsIHZhcj0iJDEiCiAgICBsb2NhbCBtb2RlPSIkezI6LX0iCiAgICBsb2NhbCBzdGF0dXM9MAogICAgaWYgY2hlY2tOb3RFbXB0eSAiJHt2YXJ9IjsgdGhlbgogICAgICBpZiAhIG1rZGlyIC1wICIkeyF2YXJ9IjsgdGhlbgogICAgICAgIExvZzo6ZGlzcGxheUVycm9yICJ2YXJpYWJsZSAke3Zhcn0gLSBpbXBvc3NpYmxlIHRvIGNyZWF0ZSB0aGUgZGlyZWN0b3J5ICckeyF2YXJ9JyIKICAgICAgICAoKGVycm9yQ291bnQrKykpCiAgICAgICAgcmV0dXJuIDEKICAgICAgZmkKICAgICAgaWYgW1sgIiR7bW9kZX0iID1+IHcgJiYgISAtdyAiJHshdmFyfSIgXV07IHRoZW4KICAgICAgICBMb2c6OmRpc3BsYXlFcnJvciAidmFyaWFibGUgJHt2YXJ9IC0gZGlyZWN0b3J5ICckeyF2YXJ9JyBpcyBub3Qgd3JpdGFibGUiCiAgICAgICAgKChzdGF0dXMrKykpCiAgICAgICAgKChlcnJvckNvdW50KyspKQogICAgICBmaQogICAgICBpZiBbWyAiJHttb2RlfSIgPX4gciAmJiAhIC1yICIkeyF2YXJ9IiBdXTsgdGhlbgogICAgICAgIExvZzo6ZGlzcGxheUVycm9yICJ2YXJpYWJsZSAke3Zhcn0gLSBkaXJlY3RvcnkgJyR7IXZhcn0nIGlzIG5vdCBhY2Nlc3NpYmxlIgogICAgICAgICgoc3RhdHVzKyspKQogICAgICAgICgoZXJyb3JDb3VudCsrKSkKICAgICAgZmkKICAgIGZpCgogICAgcmV0dXJuICIke3N0YXR1c30iCiAgfQogIGNoZWNrVmFsaWRWYWx1ZXMoKSB7CiAgICBsb2NhbCB2YXI9IiQxIgogICAgc2hpZnQgfHwgdHJ1ZQogICAgbG9jYWwgLWEgdmFsaWRWYWx1ZXM9KCIkQCIpCiAgICBpZiAhIEFycmF5Ojpjb250YWlucyAiJHshdmFyfSIgIiR7dmFsaWRWYWx1ZXNbQF19IjsgdGhlbgogICAgICBMb2c6OmRpc3BsYXlFcnJvciAidmFyaWFibGUgJHt2YXJ9IC0gdmFsdWUgJHshdmFyfSBpcyBub3QgcGFydCBvZiB0aGUgZm9sbG93aW5nIHZhbHVlcyAke3ZhbGlkVmFsdWVzWypdfSIKICAgICAgKCgrK2Vycm9yQ291bnQpKQogICAgZmkKICB9CgogIGlmICEgZWNobyAiJHtJRH0iIHwgZ3JlcCAtcUV3ICdkZWJpYW58dWJ1bnR1JzsgdGhlbgogICAgTG9nOjpmYXRhbCAiVGhpcyBzY3JpcHQgaXMgYnVpbHQgdG8gc3VwcG9ydCBvbmx5IERlYmlhbiBvciBVYnVudHUgZGlzdHJpYnV0aW9ucy4gWW91IGFyZSB1c2luZyAke0lEfS4iCiAgZmkKCiAgaWYgY2hlY2tOb3RFbXB0eSBVU0VSTkFNRSAmJiAhIGdldGVudCBwYXNzd2QgIiR7VVNFUk5BTUV9IiAyPi9kZXYvbnVsbCA+L2Rldi9udWxsOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlFcnJvciAiVVNFUk5BTUUgLSB1c2VyICcke1VTRVJOQU1FfScgZG9lcyBub3QgZXhpc3QiCiAgICAoKGVycm9yQ291bnQrKykpCiAgZmkKCiAgaWYgW1sgLW4gIiR7U1NIX0xPR0lOOi19IiBdXSAmJiAhIEFzc2VydDo6bGRhcExvZ2luICIke1NTSF9MT0dJTn0iOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlFcnJvciAiU1NIX0xPR0lOIC0gaW52YWxpZCBsZGFwIGxvZ2luIChmb3JtYXQgZXhwZWN0ZWQgZmlyc3ROYW1lTGFzdE5hbWUpIGluICR7QkFTSF9ERVZfRU5WX1JPT1RfRElSfS8uZW52IGZpbGUiCiAgICAoKGVycm9yQ291bnQrKykpCiAgZmkKCiAgaWYgY2hlY2tOb3RFbXB0eSAiR0lUX1VTRVJOQU1FIiAmJiAhIEFzc2VydDo6Zmlyc3ROYW1lTGFzdE5hbWUgIiR7R0lUX1VTRVJOQU1FfSI7IHRoZW4KICAgIExvZzo6ZGlzcGxheUVycm9yICJHSVRfVVNFUk5BTUUgLSBpbnZhbGlkIGZvcm1hdCwgZXhwZWN0ZWQgOiBmaXJzdE5hbWUgbGFzdE5hbWUiCiAgICAoKGVycm9yQ291bnQrKykpCiAgZmkKCiAgaWYgY2hlY2tOb3RFbXB0eSAiR0lUX1VTRVJfTUFJTCIgJiYgISBBc3NlcnQ6OmVtYWlsQWRkcmVzcyAiJHtHSVRfVVNFUl9NQUlMfSI7IHRoZW4KICAgIExvZzo6ZGlzcGxheUVycm9yICJHSVRfVVNFUl9NQUlMIC0gaW52YWxpZCBlbWFpbCBhZGRyZXNzIgogICAgKChlcnJvckNvdW50KyspKQogIGZpCgogIGlmIGNoZWNrTm90RW1wdHkgIkFXU19VU0VSX01BSUwiICYmICEgQXNzZXJ0OjplbWFpbEFkZHJlc3MgIiR7QVdTX1VTRVJfTUFJTH0iOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlFcnJvciAiQVdTX1VTRVJfTUFJTCAtIGludmFsaWQgZW1haWwgYWRkcmVzcyIKICAgICgoZXJyb3JDb3VudCsrKSkKICBmaQoKICBjaGVja1ZhckFuZERpciBDT05GX0RJUiByIHx8IHRydWUKICBjaGVja1ZhckFuZERpciBDT05GX09WRVJSSURFX0RJUiByIHx8IHRydWUKICBjaGVja1ZhckFuZERpciBQUk9KRUNUU19ESVIgciB8fCB0cnVlCiAgY2hlY2tWYXJBbmREaXIgQkFDS1VQX0RJUiBydyB8fCB0cnVlCiAgY2hlY2tWYXJBbmREaXIgTE9HU19ESVIgcncgfHwgdHJ1ZQogIGNoZWNrVmFyQW5kRGlyIElOU1RBTExfU0NSSVBUU19ESVIgciB8fCB0cnVlCiAgY2hlY2tWYXJBbmREaXIgVVNFUl9IT01FIHJ3IHx8IHRydWUKCiAgY2hlY2tWYWxpZFZhbHVlcyBVUEdSQURFX1VCVU5UVV9WRVJTSU9OIDAgbHRzIGRldgogIGNoZWNrVmFsaWRWYWx1ZXMgQVdTX0FVVEhFTlRJQ0FUT1IgU2FtbDJBd3MgQXdzdW1lCiAgY2hlY2tWYWxpZFZhbHVlcyBQUkVGRVJSRURfU0hFTEwgU2hlbGxCYXNoIFNoZWxsWnNoCgogIGNoZWNrVmFsaWRWYWx1ZXMgU0hPV19GT1JUVU5FUyAwIDEKICBjaGVja1ZhbGlkVmFsdWVzIFNIT1dfTU9URCAwIDEKICBjaGVja1ZhbGlkVmFsdWVzIERPQ0tFUl9JTlNJREVfV1NMIDAgMQogIGNoZWNrVmFsaWRWYWx1ZXMgT1ZFUldSSVRFX0NPTkZJR19GSUxFUyAwIDEKICBjaGVja1ZhbGlkVmFsdWVzIENIQU5HRV9XSU5ET1dTX0ZJTEVTIDAgMQogIGNoZWNrVmFsaWRWYWx1ZXMgQ0FOX1RBTEtfRFVSSU5HX0lOU1RBTExBVElPTiAwIDEKICBjaGVja1ZhbGlkVmFsdWVzIElOU1RBTExfSU5URVJBQ1RJVkUgMCAxCgogIGNoZWNrTm90RW1wdHkgV1NMQ09ORklHX01BWF9NRU1PUlkKICBjaGVja1ZhbGlkVmFsdWVzIFdTTENPTkZJR19TV0FQIDAgMQoKICByZXR1cm4gIiR7ZXJyb3JDb3VudH0iCn0KCiMgQGRlc2NyaXB0aW9uIGlmIC5lbnYgZG9lcyBub3QgZXhpc3QsIGluaXRpYWxpemUgaXQgd2l0aCAuZW52LnRlbXBsYXRlCkVuZ2luZTo6Q29uZmlnOjpjcmVhdGVFbnZGaWxlRnJvbVRlbXBsYXRlKCkgewogIGxvY2FsIGVudkZpbGU9IiQxIgogIGxvY2FsIGVudkZpbGVUZW1wbGF0ZT0iJDIiCgogIGlmIFtbICEgLWYgIiR7ZW52RmlsZX0iIF1dOyB0aGVuCiAgICBlY2hvICIke2VudkZpbGVUZW1wbGF0ZX0iID4iJHtlbnZGaWxlfSIKICAgIExvZzo6ZGlzcGxheUVycm9yICJhIGRlZmF1bHQgZW52IGZpbGUgaGFzIGJlZW4gY3JlYXRlZCwgcGxlYXNlIGVkaXQgJHtlbnZGaWxlfSIKICAgIHJldHVybiAxCiAgZmkKfQoKIyBAZGVzY3JpcHRpb24gaW5zdGFsbCBvciB1cGRhdGUgIiR7VVNFUl9IT01FfS8uYmFzaC1kZXYtZW52IiBmaWxlCiMgQGVudiBDT05GX0RJUgojIEBlbnYgV0lORE9XU19QUk9GSUxFX0RJUgojIEVNQkVEICIke0JBU0hfREVWX0VOVl9ST09UX0RJUn0vaG9tZS8uYmFzaC1kZXYtZW52IiBhcyBiYXNoRGV2RW52CkVuZ2luZTo6Q29uZmlnOjppbnN0YWxsQmFzaERldkVudigpIHsKICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIzMTcKICBiYXNoRGV2RW52Q29uZmlnKCkgewogICAgc2VkIC1FIC1pIFwKICAgICAgLWUgInMjQkFTSF9ERVZfRU5WX1JPT1RfRElSPS4qXCQjQkFTSF9ERVZfRU5WX1JPT1RfRElSPSR7QkFTSF9ERVZfRU5WX1JPT1RfRElSfSNnIiBcCiAgICAgIC1lICJzI1dJTkRPV1NfUFJPRklMRV9ESVI9LipcJCNXSU5ET1dTX1BST0ZJTEVfRElSPSR7V0lORE9XU19QUk9GSUxFX0RJUn0jZyIgXAogICAgICAiJHtVU0VSX0hPTUV9Ly5iYXNoLWRldi1lbnYiCiAgICBzdWRvIGxuIC1zZiAiJHtVU0VSX0hPTUV9Ly5iYXNoLWRldi1lbnYiIC9yb290Ly5iYXNoLWRldi1lbnYKICB9CiAgbG9jYWwgZmlsZVRvSW5zdGFsbAogICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1NAogIGZpbGVUb0luc3RhbGw9IiQoQ29uZjo6ZHluYW1pY0NvbmZGaWxlICJob21lLy5iYXNoLWRldi1lbnYiICIke2VtYmVkX2ZpbGVfdXBkYXRlRW52fSIpIiB8fCByZXR1cm4gMQogIE9WRVJXUklURV9DT05GSUdfRklMRVM9MSBJbnN0YWxsOjpmaWxlIFwKICAgICIke2ZpbGVUb0luc3RhbGx9IiAiJHtVU0VSX0hPTUV9Ly5iYXNoLWRldi1lbnYiIFwKICAgICIke1VTRVJOQU1FfSIgIiR7VVNFUkdST1VQfSIgYmFzaERldkVudkNvbmZpZwp9CgojIEBkZXNjcmlwdGlvbiBkZWR1Y2Ugd3NsIGhvc3QgaXAKIyBAc2V0IEhPU1RfSVAgZXhwb3J0ZWQgZW52IGNvbnRhaW5pbmcgdGhlIElQCkVuZ2luZTo6Q29uZmlnOjpsb2FkSG9zdElwKCkgewogIEhPU1RfSVA9IiQoL3NiaW4vaXAgcm91dGUgfCBhd2sgJy9kZWZhdWx0LyB7IHByaW50ICQzIH0nKSIKCiAgZXhwb3J0IEhPU1RfSVAKfQoKIyBAZGVzY3JpcHRpb24gbG9hZCAvZXRjL29zLXJlbGVhc2UgZmlsZQojIEBzZXQgTkFNRQojIEBzZXQgVkVSU0lPTgojIEBzZXQgSUQKIyBAc2V0IElEX0xJS0UKIyBAc2V0IFBSRVRUWV9OQU1FCiMgQHNldCBWRVJTSU9OX0lECiMgQHNldCBIT01FX1VSTAojIEBzZXQgU1VQUE9SVF9VUkwKIyBAc2V0IEJVR19SRVBPUlRfVVJMCiMgQHNldCBQUklWQUNZX1BPTElDWV9VUkwKIyBAc2V0IFZFUlNJT05fQ09ERU5BTUUKIyBAc2V0IFVCVU5UVV9DT0RFTkFNRQpFbmdpbmU6OkNvbmZpZzo6bG9hZE9zUmVsZWFzZSgpIHsKICBpZiBbWyAhIC1mIC9ldGMvb3MtcmVsZWFzZSBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5RXJyb3IgImZpbGUgL2V0Yy9vcy1yZWxlYXNlIGRvZXMgbm90IGV4aXN0cyIKICAgIHJldHVybiAxCiAgZmkKICAjIFRoaXMgd2lsbCBsb2FkIGVudmlyb25tZW50IHZhcmlhYmxlcyBJRCwgVkVSU0lPTl9DT0RFTkFNRSwgLi4uCiAgc2V0IC1vIGFsbGV4cG9ydAogIHNvdXJjZSAvZXRjL29zLXJlbGVhc2UKICBzZXQgK28gYWxsZXhwb3J0Cn0KCiMgQGRlc2NyaXB0aW9uIGRlZHVjZSBVU0VSX0hPTUUsIFVTRVJfSUQsIFVTRVJHUk9VUF9JRCBhbmQgVVNFUkdST1VQIGZyb20gVVNFUk5BTUUKIyBAZW52IFVTRVJOQU1FIFN0cmluZyB0aGUgbmFtZSBvZiB0aGUgdXNlcgojIEBzZXQgVVNFUl9JRCBTdHJpbmcKIyBAc2V0IFVTRVJHUk9VUCBTdHJpbmcKIyBAc2V0IFVTRVJHUk9VUF9JRCBTdHJpbmcKIyBAc2V0IFVTRVJfSE9NRSBTdHJpbmcKRW5naW5lOjpDb25maWc6OmxvYWRVc2VyVmFyaWFibGVzKCkgewogICMgZGVkdWNlIHVzZXIgaG9tZSBhbmQgZ3JvdXAKICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIxNTMKICBVU0VSX0lEPSIkKGdldGVudCBwYXNzd2QgIiR7VVNFUk5BTUV9IiB8IGN1dCAtZDogLWYzKSIKICBVU0VSR1JPVVBfSUQ9IiQoZ2V0ZW50IHBhc3N3ZCAiJHtVU0VSTkFNRX0iIHwgY3V0IC1kOiAtZjQpIgogIFVTRVJHUk9VUD0iJChnZXRlbnQgZ3JvdXAgIiR7VVNFUkdST1VQX0lEfSIgfCBjdXQgLWQ6IC1mMSkiCiAgVVNFUl9IT01FPSIkKGdldGVudCBwYXNzd2QgIiR7VVNFUk5BTUV9IiB8IGN1dCAtZDogLWY2KSIKCiAgaWYgW1sgLXogIiR7VVNFUkdST1VQfSIgfHwgLXogIiR7VVNFUl9IT01FfSIgXV07IHRoZW4KICAgIExvZzo6ZGlzcGxheUVycm9yICJVU0VSTkFNRSAtIHVuYWJsZSB0byBkZWR1Y2UgVVNFUkdST1VQLCBVU0VSX0hPTUUgZnJvbSBVU0VSTkFNRSIKICAgIHJldHVybiAxCiAgZmkKCiAgZXhwb3J0IFVTRVJfSE9NRQogIGV4cG9ydCBVU0VSX0lECiAgZXhwb3J0IFVTRVJHUk9VUF9JRAogIGV4cG9ydCBVU0VSR1JPVVAKfQoKIyBAZGVzY3JpcHRpb24gbG9hZCB3c2wgZW52IHZhcmlhYmxlcwojIEBzZXQgQkFTRV9NTlRfQwojIEBzZXQgV0lORE9XU19ESVIKIyBAc2V0IFdJTkRPV1NfUFJPRklMRV9ESVIKIyBAc2V0IExPQ0FMX0FQUF9EQVRBCiMgQHNldCBXSU5ET1dfUEFUSAojIEBzZXQgV1NMX0VYRV9CSU4KIyBAc2V0IElQQ09ORklHX0JJTgojIEBzZXQgUE9XRVJTSEVMTF9CSU4KIyBAZW52IFdTTF9FWEVfQklOCiMgQGVudiBJUENPTkZJR19CSU4KIyBAZW52IFBPV0VSU0hFTExfQklOCkVuZ2luZTo6Q29uZmlnOjpsb2FkV3NsVmFyaWFibGVzKCkgewogIGlmICEgQXNzZXJ0Ojp3c2w7IHRoZW4KICAgICMgc2tpcAogICAgcmV0dXJuIDAKICBmaQogICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMTAwMwogIEJBU0VfTU5UX0M9IiQobW91bnQgfCBncmVwICdwYXRoPUM6XFwnIHwgYXdrIC1GICcgJyAne3ByaW50ICQzfScpIgoKICBXSU5ET1dTX0RJUj0iJChMaW51eDo6V3NsOjpjYWNoZWRXc2xwYXRoRnJvbVdzbFZhciBTeXN0ZW1Sb290KSIKICBXSU5ET1dTX0RJUj0iJHtXSU5ET1dTX0RJUjotJHtCQVNFX01OVF9DfS9XaW5kb3dzfSIKICBleHBvcnQgV0lORE9XU19ESVIKCiAgV0lORE9XU19QUk9GSUxFX0RJUj0iJChMaW51eDo6V3NsOjpjYWNoZWRXc2xwYXRoRnJvbVdzbFZhciBVU0VSUFJPRklMRSkiCiAgV0lORE9XU19QUk9GSUxFX0RJUj0iJHtXSU5ET1dTX1BST0ZJTEVfRElSOi0ke0JBU0VfTU5UX0N9L1VzZXJzLyQoaWQgLXVuKX0iCiAgZXhwb3J0IFdJTkRPV1NfUFJPRklMRV9ESVIKCiAgTE9DQUxfQVBQX0RBVEE9IiQoTGludXg6OldzbDo6Y2FjaGVkV3NscGF0aEZyb21Xc2xWYXIgTE9DQUxBUFBEQVRBIHwgdHIgLWQgJ1xuXHInKSIKICBleHBvcnQgTE9DQUxfQVBQX0RBVEEKCiAgIyBXSU5ET1dfUEFUSAogIFdJTkRPV19QQVRIPSIkKExpbnV4OjpXc2w6OmNhY2hlZFdzbHZhciBQQVRIKSIKICBXSU5ET1dfUEFUSD0iJHtXSU5ET1dfUEFUSC8vOy86fSIKICBXSU5ET1dfUEFUSD0iJHtXSU5ET1dfUEFUSC8vXFwvL30iCiAgV0lORE9XX1BBVEg9IiR7V0lORE9XX1BBVEgvL0M6LyR7QkFTRV9NTlRfQ319IgoKICBkZWR1Y2VCaW4oKSB7CiAgICBsb2NhbCB2YXI9IiQxIgogICAgbG9jYWwgZXhwZWN0ZWRGdWxsUGF0aD0iJDIiCiAgICBsb2NhbCBleHBlY3RlZEJpbj0iJDMiCiAgICBpZiBbWyAteiAiJHshdmFyK3h4eH0iIF1dOyB0aGVuCiAgICAgIGV2YWwgIiR7dmFyfT0ke2V4cGVjdGVkRnVsbFBhdGh9IgogICAgICBpZiAhIGNvbW1hbmQgLXYgIiR7IXZhcn0iID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgIGV2YWwgIiR7dmFyfT0kKGNvbW1hbmQgLXYgIiR7ZXhwZWN0ZWRCaW59IiAyPi9kZXYvbnVsbCkiCiAgICAgIGZpCiAgICBmaQogICAgaWYgW1sgLXogIiR7IXZhcjotfSIgXV0gfHwgISBjb21tYW5kIC12ICIkeyF2YXJ9IiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgTG9nOjpmYXRhbCAidmFyaWFibGUgJHt2YXJ9IC0gY29tbWFuZCAke2V4cGVjdGVkQmlufSBub3QgZm91bmQiCiAgICBmaQogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTYzCiAgICBleHBvcnQgIiR7dmFyfSIKICB9CgogIGNoZWNrQmluYXJ5KCkgewogICAgbG9jYWwgdmFyPSIkMSIKICAgIGlmIFtbIC16ICIke3Zhcn0iIHx8ICEgLXggIiR7IXZhcn0iIF1dOyB0aGVuCiAgICAgIExvZzo6ZGlzcGxheUVycm9yICJ2YXJpYWJsZSAke3Zhcn0gLSBiaW5hcnkgJyR7IXZhcn0nIGRvZXMgbm90IGV4aXN0IG9yIG5vdCBleGVjdXRhYmxlIgogICAgICAoKGVycm9yQ291bnQrKykpCiAgICBmaQogIH0KCiAgbG9jYWwgZXJyb3JDb3VudD0wCiAgIyBJUENPTkZJR19CSU4gLSB3aGljaCBpcGNvbmZpZy5leGUgZG9lcyBub3Qgd29yayB3aGVuIGV4ZWN1dGVkIGFzIHJvb3QKICBkZWR1Y2VCaW4gSVBDT05GSUdfQklOICIke1dJTkRPV1NfRElSfS9TeXN0ZW0zMi9pcGNvbmZpZy5leGUiICJpcGNvbmZpZy5leGUiCiAgY2hlY2tCaW5hcnkgSVBDT05GSUdfQklOCgogIGRlZHVjZUJpbiBXU0xfRVhFX0JJTiAiJHtXSU5ET1dTX0RJUn0vU3lzdGVtMzIvd3NsLmV4ZSIgIndzbC5leGUiCiAgY2hlY2tCaW5hcnkgV1NMX0VYRV9CSU4KCiAgZGVkdWNlQmluIFBPV0VSU0hFTExfQklOICIke1dJTkRPV1NfRElSfS9TeXN0ZW0zMi9XaW5kb3dzUG93ZXJTaGVsbC92MS4wL3Bvd2Vyc2hlbGwuZXhlIiAicG93ZXJzaGVsbC5leGUiCiAgY2hlY2tCaW5hcnkgUE9XRVJTSEVMTF9CSU4KCiAgcmV0dXJuICIke2Vycm9yQ291bnR9Igp9CgojIEBkZXNjcmlwdGlvbiBpbnN0YWxsIGFwdCB3c2x1IGlmIG5lY2Vzc2FyeSBwcm92aWRpbmcgd3NsdmFyLCB3c2xwYXRoCkVuZ2luZTo6Q29uZmlnOjpyZXF1aXJlV3NsdSgpIHsKICBpZiAhIGNvbW1hbmQgLXYgd3NsdmFyICY+L2Rldi9udWxsOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlJbmZvICJJbnN0YWxsaW5nIHByZS1yZXF1aXNpdGUgV3NsdSA6IHdzbHZhciwgd3NscGF0aCwgLi4uIGNvbW1hbmRzIgogICAgTGludXg6OkFwdDo6dXBkYXRlCiAgICBMaW51eDo6QXB0OjppbnN0YWxsIC0tbm8taW5zdGFsbC1yZWNvbW1lbmRzIHdzbHUKCiAgICAjIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9XU0wvaXNzdWVzLzg4NDMjaXNzdWVjb21tZW50LTE3OTIyNTY4OTQKICAgIExvZzo6ZGlzcGxheUluZm8gIkZpeCB3c2wgaW50ZXJvcGVyYWJpbGl0eSBkdWUgdG8gd3NsIGJ1ZyIKICAgIGlmIFtbICEgLWYgL3Vzci9saWIvYmluZm10LmQvV1NMSW50ZXJvcC5jb25mICYmCiAgICAgICEgLWYgL2V0Yy9zeXN0ZW1kL3N5c3RlbS93c2wtYmluZm10LnNlcnZpY2UgJiYKICAgICAgLWYgL3J1bi9zeXN0ZW1kL2dlbmVyYXRvci5lYXJseS93c2wtYmluZm10LnNlcnZpY2UgXV07IHRoZW4KICAgICAgc3VkbyBzaCAtYyAnZWNobyA6V1NMSW50ZXJvcDpNOjpNWjo6L2luaXQ6UEYgPiAvdXNyL2xpYi9iaW5mbXQuZC9XU0xJbnRlcm9wLmNvbmYnCiAgICAgIHN1ZG8gbG4gLXMgL3J1bi9zeXN0ZW1kL2dlbmVyYXRvci5lYXJseS93c2wtYmluZm10LnNlcnZpY2UgL2V0Yy9zeXN0ZW1kL3N5c3RlbS93c2wtYmluZm10LnNlcnZpY2UKICAgIGZpCiAgZmkKfQoKIyBAZGVzY3JpcHRpb24gcHJlcGVuZCBkaXJlY3RvcmllcyB0byB0aGUgUEFUSCBlbnZpcm9ubWVudCB2YXJpYWJsZQojIEBhcmcgJEAgYXJnczpTdHJpbmdbXSBsaXN0IG9mIGRpcmVjdG9yaWVzIHRvIHByZXBlbmQKIyBAc2V0IFBBVEggdXBkYXRlIFBBVEggd2l0aCB0aGUgZGlyZWN0b3JpZXMgcHJlcGVuZGVkCkVudjo6cGF0aFByZXBlbmQoKSB7CiAgbG9jYWwgYXJnCiAgZm9yIGFyZyBpbiAiJEAiOyBkbwogICAgaWYgW1sgLWQgIiR7YXJnfSIgJiYgIjoke1BBVEh9OiIgIT0gKiI6JHthcmd9OiIqIF1dOyB0aGVuCiAgICAgIFBBVEg9IiQocmVhbHBhdGggIiR7YXJnfSIpOiR7UEFUSH0iCiAgICBmaQogIGRvbmUKfQoKIyBAZGVzY3JpcHRpb24gaW50ZXJtZWRpYXRlIGNhbGxiYWNrIHRoYXQgaXMgdXNlZCBieSBHaXRodWI6OnVwZ3JhZGVSZWxlYXNlCiMgb3IgR2l0aHViOjppbnN0YWxsUmVsZWFzZQojIGlmIGluc3RhbGxDYWxsYmFjayBpcyBub3Qgc2V0LCBpdCBhbGxvd3MgdG86CiMgICAtIGNvcHkgdGhlIGRvd25sb2FkZWQgZmlsZSB0byB0aGUgcmlnaHQgdGFyZ2V0IGZpbGUKIyAgIC0gYW5kIHNldCB0aGUgZXhlY3V0aW9uIGJpdAojIGVsc2UKIyAgIGluc3RhbGxDYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBuZXdTb2Z0d2FyZSwgdGFyZ2V0RmlsZSwgdmVyc2lvbiBhcmd1bWVudHMKIyBmaQojIEB3YXJuaW5nIGRvIG5vdCB1c2UgdGhpcyBmdW5jdGlvbiBhcyBjYWxsYmFjayBmb3IgR2l0aHViOjp1cGdyYWRlUmVsZWFzZSBvciBHaXRodWI6Omluc3RhbGxSZWxlYXNlLCBhcyBpdCB3b3VsZCByZXN1bHQgdG8gYW4gaW5maW5pdGUgbG9vcAojIEBhcmcgJDEgbmV3U29mdHdhcmU6U3RyaW5nIHRoZSBkb3dubG9hZGVkIHNvZnR3YXJlIGZpbGUKIyBAYXJnICQyIHRhcmdldEZpbGU6U3RyaW5nIHdoZXJlIHdlIHdhbnQgdG8gY29weSB0aGUgZmlsZQojIEBhcmcgJDMgdmVyc2lvbjpTdHJpbmcgdGhlIHZlcnNpb24gdGhhdCBoYXMgYmVlbiBkb3dubG9hZGVkCiMgQGFyZyAkNCBpbnN0YWxsQ2FsbGJhY2s6RnVuY3Rpb24gKG9wdGlvbmFsKSB0aGUgY2FsbGJhY2sgdG8gY2FsbCB3aXRoIDMgZmlyc3QgYXJndW1lbnRzCiMgQGVudiBTVURPIFN0cmluZyBhbGxvd3MgdG8gdXNlIGN1c3RvbSBzdWRvIHByZWZpeCBjb21tYW5kCiMgQGV4aXRjb2RlICogb24gZmFpbHVyZQojIEBzZWUgR2l0aHViOjp1cGdyYWRlUmVsZWFzZQojIEBzZWUgR2l0aHViOjppbnN0YWxsUmVsZWFzZQojIEBpbnRlcm5hbApHaXRodWI6OmRlZmF1bHRJbnN0YWxsKCkgewogIGxvY2FsIG5ld1NvZnR3YXJlPSIkMSIKICBsb2NhbCB0YXJnZXRGaWxlPSIkMiIKICBsb2NhbCB2ZXJzaW9uPSIkMyIKICBsb2NhbCBpbnN0YWxsQ2FsbGJhY2s9JDQKICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwODYKICBta2RpciAtcCAiJChkaXJuYW1lICIke3RhcmdldEZpbGV9IikiCiAgaWYgW1sgIiQodHlwZSAtdCAiJHtpbnN0YWxsQ2FsbGJhY2t9IikiID0gImZ1bmN0aW9uIiBdXTsgdGhlbgogICAgJHtpbnN0YWxsQ2FsbGJhY2t9ICIke25ld1NvZnR3YXJlfSIgIiR7dGFyZ2V0RmlsZX0iICIke3ZlcnNpb259IgogIGVsc2UKICAgICR7U1VETzotfSBtdiAiJHtuZXdTb2Z0d2FyZX0iICIke3RhcmdldEZpbGV9IgogICAgJHtTVURPOi19IGNobW9kICt4ICIke3RhcmdldEZpbGV9IgogICAgaGFzaCAtcgogICAgJHtTVURPOi19IHJtIC1mICIke25ld1NvZnR3YXJlfSIgfHwgdHJ1ZQogIGZpCn0KCiMgQGRlc2NyaXB0aW9uIGdpdGh1YiByZXBvc2l0b3J5IGVnOiBrdWJlcm5ldGVzLXNpZ3Mva2luZAojIEBhcmcgJDEgZ2l0aHViVXJsOlN0cmluZyBlZzogaHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtc2lncy9raW5kL3JlbGVhc2VzL2Rvd25sb2FkL0BsYXRlc3RWZXJzaW9uQC9raW5kLWxpbnV4LWFtZDY0CiMgQGV4aXRjb2RlIDEgaWYgbm8gbWF0Y2hpbmcgcmVwbyBmb3VuZCBpbiBwcm92aWRlZCB1cmwsIDAgb3RoZXJ3aXNlCiMgQHN0ZG91dCB0aGUgcmVwbyBpbiB0aGUgZm9ybSBvd25lci9yZXBvCkdpdGh1Yjo6ZXh0cmFjdFJlcG9Gcm9tR2l0aHViVXJsKCkgewogIGxvY2FsIGdpdGh1YlVybD0iJDEiCiAgbG9jYWwgcmVzdWx0CiAgcmVzdWx0PSIkKHNlZCAtbiAtRSAncyNeaHR0cHM6Ly9naXRodWIuY29tLyhbXi9dKy9bXi9dKykvLiokI1wxI3AnIDw8PCIke2dpdGh1YlVybH0iKSIKICBpZiBbWyAteiAiJHtyZXN1bHR9IiBdXTsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIGVjaG8gIiR7cmVzdWx0fSIKfQoKIyBAZGVzY3JpcHRpb24gUmV0cmlldmUgdGhlIGxhdGVzdCB2ZXJzaW9uIG51bWJlciBvZiBhIGdpdGh1YiByZWxlYXNlIHVzaW5nIEdpdGh1YiBBUEkgdXNpbmcgcmV0cnkKIyByZXBvIGFyZyB3aXRoIGZjaGFzdGFuZXQvYmFzaC10b29scyB2YWx1ZSB3b3VsZCBtYXRjaCBodHRwczovL2dpdGh1Yi5jb20vZmNoYXN0YW5ldC9iYXNoLXRvb2xzCiMgQGFyZyAkMSByZXBvOlN0cmluZyByZXBvc2l0b3J5IGluIHRoZSBmb3JtYXQgZmNoYXN0YW5ldC9iYXNoLXRvb2xzCiMgQGFyZyAkMiByZXN1bHRSZWY6JlN0cmluZyByZWZlcmVuY2UgdG8gYSB2YXJpYWJsZSB0aGF0IHdpbGwgY29udGFpbiB0aGUgcmVzdWx0IG9mIHRoZSBjb21tYW5kCiMgQHN0ZG91dCBsb2cgbWVzc2FnZXMgYWJvdXQgcmV0cnkKR2l0aHViOjpnZXRMYXRlc3RSZWxlYXNlKCkgewogIGxvY2FsIHJlcG89IiQxIgogICMgd2UgbmVlZCB0byBwYXNzIHRoZSByZXN1bHQgdGhyb3VnaCBhIHJlZmVyZW5jZSBpbnN0ZWFkIG9mIG91dHB1dCBkaXJlY3RseQogICMgYmVjYXVzZSByZXRyeSBjYW4gb3V0cHV0IHRvbwogIGxvY2FsIC1uIHJlc3VsdFJlZj0kMgogIHJlc3VsdFJlZj0iIgogIGxvY2FsIHJlc3VsdEZpbGUKICByZXN1bHRGaWxlPSIkKG1rdGVtcCAtcCAiJHtUTVBESVI6LS90bXB9IiAtdCBnaXRodWJMYXRlc3RSZWxlYXNlLlhYWFgpIgogICMgR2V0IGxhdGVzdCByZWxlYXNlIGZyb20gR2l0SHViIGFwaQogIGlmIFJldHJ5OjpkZWZhdWx0IGN1cmwgXAogICAgLUwgXAogICAgLW8gIiR7cmVzdWx0RmlsZX0iIFwKICAgIC0tZmFpbCBcCiAgICAtLXNpbGVudCBcCiAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke3JlcG99L3JlbGVhc2VzL2xhdGVzdCI7IHRoZW4KICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgcmVzdWx0UmVmPSIkKFZlcnNpb246OmdpdGh1YkFwaUV4dHJhY3RWZXJzaW9uIDwiJHtyZXN1bHRGaWxlfSIpIgogICAgcmV0dXJuIDAKICBmaQogICMgZGlzcGxheSBjdXJsIHJlc3VsdCBpbiBjYXNlIG9mIGZhaWx1cmUKICBjYXQgPiYyICIke3Jlc3VsdEZpbGV9IgogIHJtIC1mICIke3Jlc3VsdEZpbGV9Igp9CgojIEBkZXNjcmlwdGlvbiBEaXNwbGF5IG1lc3NhZ2UgdXNpbmcgZXJyb3IgY29sb3IgKHJlZCkKIyBAYXJnICQxIG1lc3NhZ2U6U3RyaW5nIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXkKTG9nOjpkaXNwbGF5RXJyb3IoKSB7CiAgaWYgKChCQVNIX0ZSQU1FV09SS19ESVNQTEFZX0xFVkVMID49IF9fTEVWRUxfRVJST1IpKTsgdGhlbgogICAgZWNobyAtZSAiJHtfX0VSUk9SX0NPTE9SfUVSUk9SICAgLSAkezF9JHtfX1JFU0VUX0NPTE9SfSIgPiYyCiAgZmkKICBMb2c6OmxvZ0Vycm9yICIkMSIKfQoKIyBAZGVzY3JpcHRpb24gRGlzcGxheSBtZXNzYWdlIHVzaW5nIGVycm9yIGNvbG9yIChyZWQpIGFuZCBleGl0IGltbWVkaWF0ZWx5IHdpdGggZXJyb3Igc3RhdHVzIDEKIyBAYXJnICQxIG1lc3NhZ2U6U3RyaW5nIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXkKTG9nOjpmYXRhbCgpIHsKICBlY2hvIC1lICIke19fRVJST1JfQ09MT1J9RkFUQUwgICAtICR7MX0ke19fUkVTRVRfQ09MT1J9IiA+JjIKICBMb2c6OmxvZ0ZhdGFsICIkMSIKICBleGl0IDEKfQoKIyBAZGVzY3JpcHRpb24gbG9nIG1lc3NhZ2UgdG8gZmlsZQojIEBhcmcgJDEgbWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQpMb2c6OmxvZ0RlYnVnKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMID49IF9fTEVWRUxfREVCVUcpKTsgdGhlbgogICAgTG9nOjpsb2dNZXNzYWdlICIkezI6LURFQlVHfSIgIiQxIgogIGZpCn0KCiMgQGRlc2NyaXB0aW9uIGxvZyBtZXNzYWdlIHRvIGZpbGUKIyBAYXJnICQxIG1lc3NhZ2U6U3RyaW5nIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXkKTG9nOjpsb2dJbmZvKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMID49IF9fTEVWRUxfSU5GTykpOyB0aGVuCiAgICBMb2c6OmxvZ01lc3NhZ2UgIiR7MjotSU5GT30iICIkMSIKICBmaQp9CgojIEBkZXNjcmlwdGlvbiBhY3RpdmF0ZSBvciBub3QgTG9nOjpkaXNwbGF5KiBhbmQgTG9nOjpsb2cqIGZ1bmN0aW9ucwojIGJhc2VkIG9uIEJBU0hfRlJBTUVXT1JLX0RJU1BMQVlfTEVWRUwgYW5kIEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTAojIGVudmlyb25tZW50IHZhcmlhYmxlcyBsb2FkZWQgYnkgRW52OjpyZXF1aXJlTG9hZAojIHRyeSB0byBjcmVhdGUgbG9nIGZpbGUgYW5kIHJvdGF0ZSBpdCBpZiBuZWNlc3NhcnkKIyBAbm9hcmdzCiMgQHNldCBCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgaW50IHRvIE9GRiBsZXZlbCBpZiBCQVNIX0ZSQU1FV09SS19MT0dfRklMRSBpcyBlbXB0eSBvciBub3Qgd3JpdGFibGUKIyBAZW52IEJBU0hfRlJBTUVXT1JLX0RJU1BMQVlfTEVWRUwgaW50CiMgQGVudiBCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgaW50CiMgQGVudiBCQVNIX0ZSQU1FV09SS19MT0dfRklMRSBTdHJpbmcKIyBAZW52IEJBU0hfRlJBTUVXT1JLX0xPR19GSUxFX01BWF9ST1RBVElPTiBpbnQgZG8gbG9nIHJvdGF0aW9uIGlmID4gMAojIEBleGl0Y29kZSAwIGFsd2F5cyBzdWNjZXNzZnVsCiMgQHN0ZGVyciBkaWFnbm9zdGljcyBpbmZvcm1hdGlvbiBhYm91dCBsb2cgZmlsZSBpcyBkaXNwbGF5ZWQKIyBAcmVxdWlyZSBFbnY6OnJlcXVpcmVMb2FkCiMgQHJlcXVpcmUgVUk6OnJlcXVpcmVUaGVtZQpMb2c6OnJlcXVpcmVMb2FkKCkgewogIGlmIFtbIC16ICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFOi19IiBdXTsgdGhlbgogICAgQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMPSR7X19MRVZFTF9PRkZ9CiAgICBleHBvcnQgQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMCiAgZmkKCiAgaWYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgPiBfX0xFVkVMX09GRikpOyB0aGVuCiAgICBpZiBbWyAhIC1mICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSIgXV07IHRoZW4KICAgICAgaWYKICAgICAgICAhIG1rZGlyIC1wICIkKGRpcm5hbWUgIiR7QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEV9IikiIDI+L2Rldi9udWxsIHx8CiAgICAgICAgICAhIHRvdWNoIC0tbm8tY3JlYXRlICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSIgMj4vZGV2L251bGwKICAgICAgdGhlbgogICAgICAgIEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTD0ke19fTEVWRUxfT0ZGfQogICAgICAgIGVjaG8gLWUgIiR7X19FUlJPUl9DT0xPUn1FUlJPUiAgIC0gRmlsZSAke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSBpcyBub3Qgd3JpdGFibGUke19fUkVTRVRfQ09MT1J9IiA+JjIKICAgICAgZmkKICAgIGVsaWYgW1sgISAtdyAiJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRX0iIF1dOyB0aGVuCiAgICAgIEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTD0ke19fTEVWRUxfT0ZGfQogICAgICBlY2hvIC1lICIke19fRVJST1JfQ09MT1J9RVJST1IgICAtIEZpbGUgJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRX0gaXMgbm90IHdyaXRhYmxlJHtfX1JFU0VUX0NPTE9SfSIgPiYyCiAgICBmaQoKICBmaQoKICBpZiAoKEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTCA+IF9fTEVWRUxfT0ZGKSk7IHRoZW4KICAgICMgd2lsbCBhbHdheXMgYmUgY3JlYXRlZCBldmVuIGlmIG5vdCBpbiBpbmZvIGxldmVsCiAgICBMb2c6OmxvZ01lc3NhZ2UgIklORk8iICJMb2dnaW5nIHRvIGZpbGUgJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRX0gLSBMb2cgbGV2ZWwgJHtCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUx9IgogICAgaWYgKChCQVNIX0ZSQU1FV09SS19MT0dfRklMRV9NQVhfUk9UQVRJT04gPiAwKSk7IHRoZW4KICAgICAgTG9nOjpyb3RhdGUgIiR7QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEV9IiAiJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRV9NQVhfUk9UQVRJT059IgogICAgZmkKICBmaQp9CgojIEBkZXNjcmlwdGlvbiBSZXRyeSBhIGNvbW1hbmQgNSB0aW1lcyB3aXRoIGEgZGVsYXkgb2YgMTUgc2Vjb25kcyBiZXR3ZWVuIGVhY2ggYXR0ZW1wdAojIEBhcmcgJEAgY29tbWFuZDpTdHJpbmdbXSB0aGUgY29tbWFuZCB0byBydW4KIyBAZXhpdGNvZGUgMCBvbiBzdWNjZXNzCiMgQGV4aXRjb2RlIDEgaWYgbWF4IHJldHJpZXMgY291bnQgcmVhY2hlZApSZXRyeTo6ZGVmYXVsdCgpIHsKICBSZXRyeTo6cGFyYW1ldGVyaXplZCA1IDE1ICIiICIkQCIKfQoKIyBAZGVzY3JpcHRpb24gZXh0cmFjdCBzb2Z0d2FyZSB2ZXJzaW9uIG51bWJlcgojIEBhcmcgJDEgY29tbWFuZDpTdHJpbmcgdGhlIGNvbW1hbmQgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIC0tdmVyc2lvbiBwYXJhbWV0ZXIKIyBAYXJnICQyIGFyZ1ZlcnNpb246U3RyaW5nICBhbGxvd3MgdG8gb3ZlcnJpZGUgZGVmYXVsdCAtLXZlcnNpb24gcGFyYW1ldGVyClZlcnNpb246OmdldENvbW1hbmRWZXJzaW9uRnJvbVBsYWluVGV4dCgpIHsKICBsb2NhbCBjb21tYW5kPSIkMSIKICBsb2NhbCBhcmdWZXJzaW9uPSIkezI6LS0tdmVyc2lvbn0iCiAgIiR7Y29tbWFuZH0iICIke2FyZ1ZlcnNpb259IiAyPiYxIHwKICAgIFZlcnNpb246OnBhcnNlICMga2VlcCBvbmx5IHZlcnNpb24gbnVtYmVycwp9CgojIEBkZXNjcmlwdGlvbiBjaGVjayBpZiBhbiBlbGVtZW50IGlzIGNvbnRhaW5lZCBpbiBhbiBhcnJheQojCiMgQGFyZyAkMSBuZWVkbGU6U3RyaW5nCiMgQGFyZyAkQCBhcnJheTpTdHJpbmdbXQojIEBleGl0Y29kZSAwIGlmIGZvdW5kCiMgQGV4aXRjb2RlIDEgb3RoZXJ3aXNlCiMgQGV4YW1wbGUKIyAgIEFycmF5Ojpjb250YWlucyAiJHtsaWJQYXRofSIgIiR7X19CQVNIX0ZSQU1FV09SS19JTVBPUlRFRF9GSUxFU1tAXX0iCkFycmF5Ojpjb250YWlucygpIHsKICBsb2NhbCBlbGVtZW50CiAgZm9yIGVsZW1lbnQgaW4gIiR7QDoyfSI7IGRvCiAgICBbWyAiJHtlbGVtZW50fSIgPSAiJDEiIF1dICYmIHJldHVybiAwCiAgZG9uZQogIHJldHVybiAxCn0KCiMgQGRlc2NyaXB0aW9uIGNoZWNrIGlmIHBhcmFtIGlzIHZhbGlkIGVtYWlsIGFkZHJlc3MKIyBAd2FybmluZyBpdCBpcyBhIHZlcnkgc2ltcGxlIGNoZWNrLCBubyBSRkMgdmFsaWRhdGlvbgojIEBhcmcgJDEgZW1haWxBZGRyZXNzOlN0cmluZyB0aGUgZnVsbCBlbWFpbCBhZGRyZXNzCiMgQGV4aXRjb2RlIDEgaWYgaW52YWxpZCBlbWFpbCBhZGRyZXNzCkFzc2VydDo6ZW1haWxBZGRyZXNzKCkgewogIGxvY2FsIGV4cGVjdGVkUmVnZXhwPSJeXFMrQFxTKyQiCgogIFtbICIkMSIgPX4gJHtleHBlY3RlZFJlZ2V4cH0gXV0KfQoKIyBAZGVzY3JpcHRpb24gY2hlY2sgaWYgYXJndW1lbnQgcmVzcGVjdHMgMiBvciBtb3JlIHdvcmRzIHNlcGFyYXRlZCBieSBhIHNwYWNlCiMgaXQgc3VwcG9ydHMgYWNjZW50dWF0ZWQgY2hhcmFjdGVycyBhbmQgbmFtZXMgd2l0aCBoeXBoZW4oLSkKIyBAYXJnICQxIGZpcnN0TmFtZUxhc3ROYW1lOlN0cmluZwojIEBleGl0Y29kZSAxIGlmIHJlZ2V4cCBub3QgbWF0Y2hlcwojIEBzZWUgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9KeXlmT00vMQpBc3NlcnQ6OmZpcnN0TmFtZUxhc3ROYW1lKCkgewogIGxvY2FsIHJlZ2V4cD0iXlteIF0rKFsgXVteIF0rKSskIgogIFtbICQxID1+ICR7cmVnZXhwfSBdXQp9CgojIEBkZXNjcmlwdGlvbiBjaGVjayBpZiBhcmd1bWVudCByZXNwZWN0cyBsZGFwIGxvZ2luIG5hbWluZyBjb252ZW50aW9uCiMgb25seSB1c2luZyBsb3dlcmNhc2UgY2hhcmFjdGVycyBhLXoKIyBAYXJnICQxIGxkYXBMb2dpbjpTdHJpbmcKIyBAZXhpdGNvZGUgMSBpZiByZWdleHAgbm90IG1hdGNoZXMKQXNzZXJ0OjpsZGFwTG9naW4oKSB7CiAgW1sgJDEgPX4gXlthLXpdKyQgXV0KfQoKIyBAZGVzY3JpcHRpb24gY2hlY2tzIGlmIHZhcmlhYmxlIG5hbWUgcHJvdmlkZWQgZXhpc3RzCiMgQGFyZyAkMSB2YXJOYW1lOlN0cmluZwojIEBleGl0Y29kZSAxIGlmIHZhcmlhYmxlIGRvZXNuJ3QgZXhpc3QKIyBAZXhpdGNvZGUgMiBpZiB2YXJpYWJsZSB2YWx1ZSBlbXB0eQojIEBleGl0Y29kZSAzIGlmIHZhcmlhYmxlIG5hbWUgaW52YWxpZAojIEBzZWUgQXNzZXJ0Ojp2YWxpZFZhcmlhYmxlTmFtZQojIEBzdGRlcnIgZGlhZ25vc3RpY3MgaW5mb3JtYXRpb24gaXMgZGlzcGxheWVkCkFzc2VydDo6dmFyRXhpc3RzQW5kTm90RW1wdHkoKSB7CiAgbG9jYWwgdmFyTmFtZT0iJDEiCiAgaWYgISBBc3NlcnQ6OnZhbGlkVmFyaWFibGVOYW1lICIke3Zhck5hbWV9IjsgdGhlbgogICAgTG9nOjpkaXNwbGF5RXJyb3IgIiR7dmFyTmFtZX0gLSBpbnZhbGlkIHZhcmlhYmxlIG5hbWUiCiAgICByZXR1cm4gMwogIGZpCiAgaWYgW1sgLXogIiR7IXZhck5hbWUrdW5zZXR9IiBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5RXJyb3IgIiR7dmFyTmFtZX0gLSBub3QgZGVmaW5lZCIKICAgIHJldHVybiAxCiAgZWxpZiBbWyAteiAiJHshdmFyTmFtZX0iIF1dOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlFcnJvciAiJHt2YXJOYW1lfSAtIHBsZWFzZSBwcm92aWRlIGEgdmFsdWUiCiAgICByZXR1cm4gMgogIGZpCn0KCiMgQGRlc2NyaXB0aW9uIGRldGVybWluZSBpZiB0aGUgc2NyaXB0IGlzIGV4ZWN1dGVkIHVuZGVyIFdTTAojIGNzcGVsbDpkaXNhYmxlCiMgQGV4YW1wbGUgdGV4dAojICAgdW5hbWUgR2l0QmFzaCB3aW5kb3dzICh3aXRoIHdzbCkgPT4gTUlOR1c2NF9OVC0xMC4wIFpPWEZMLTY2MTlRTjIgMi4xMC4wKDAuMzI1LzUvMykgMjAxOC0wNi0xMyAyMzozNCB4ODZfNjQgTXN5cwojICAgdW5hbWUgR2l0QmFzaCB3aW5kb3dzICh3byB3c2wpICAgPT4gTUlOR1c2NF9OVC0xMC4wIGZyc2EwMi1qNWNia2MyIDIuOS4wKDAuMzE4LzUvMykgMjAxOC0wMS0xMiAyMzozNyB4ODZfNjQgTXN5cwojICAgdW5hbWUgd3NsID0+IExpbnV4IFpPWEZMLTY2MTlRTjIgNC40LjAtMTcxMzQtTWljcm9zb2Z0ICMxMTItTWljcm9zb2Z0IFRodSBKdW4gMDcgMjI6NTc6MDAgUFNUIDIwMTggeDg2XzY0IHg4Nl82NCB4ODZfNjQgR05VL0xpbnV4CiMgY3NwZWxsOmVuYWJsZQojCiMgQGV4aXRjb2RlIDEgb24gZXJyb3IKQXNzZXJ0Ojp3c2woKSB7CiAgW1sgIiQodW5hbWUgLW8pIiA9ICJHTlUvTGludXgiIF1dCn0KCiMgQGRlc2NyaXB0aW9uIHNlbGVjdCByaWdodCBmaWxlIHRvIGxvYWQgZGVwZW5kaW5nIGlmIGZpbGUgZXhpc3RzIGluIHRoaXMgb3JkZXI6CiMgLSBmcm9tIGNvbmYub3ZlcnJpZGUKIyAtIGZyb20gZW1iZWRkZWQgZmlsZSBpZiBwcm92aWRlZAojIC0gZnJvbSBjb25mIGRpcgojIEBhcmcgJDEgZmlsZTpTdHJpbmcKIyBAYXJnICQyIGVtYmVkRmlsZTpTdHJpbmcgZXZlbnR1YWwgZW1iZWRkZWQgZmlsZQojIEBleGl0Y29kZSAxIGlmIGZpbGUgZG9lcyBub3QgZXhpc3QgYXQgYWxsCkNvbmY6OmR5bmFtaWNDb25mRmlsZSgpIHsKICBsb2NhbCBmaWxlPSIkezEvI1wvL30iICMgcmVtb3ZlIGZpcnN0IHNsYXNoIGlmIGFueQogIGxvY2FsIGVtYmVkRmlsZT0iJHsyOi19IgogIGlmIFtbIC1mICIke0NPTkZfT1ZFUlJJREVfRElSfS8ke2ZpbGV9IiBdXTsgdGhlbgogICAgZWNobyAiJHtDT05GX09WRVJSSURFX0RJUn0vJHtmaWxlfSIKICAgIHJldHVybiAwCiAgZWxpZiBbWyAtZiAiJHtlbWJlZEZpbGV9IiBdXTsgdGhlbgogICAgZWNobyAiJHtlbWJlZEZpbGV9IgogICAgcmV0dXJuIDAKICBlbGlmIFtbIC1mICIke0NPTkZfRElSfS8ke2ZpbGV9IiBdXTsgdGhlbgogICAgZWNobyAiJHtDT05GX0RJUn0vJHtmaWxlfSIKICAgIHJldHVybiAwCiAgZmkKICBMb2c6OmRpc3BsYXlXYXJuaW5nICJDb25mOjpkeW5hbWljQ29uZkZpbGUgLSAke2ZpbGV9IGRvZXMgbm90IGV4aXN0IGluIGFueSBjb25maWcgZGlycyBkZWNsYXJlZCIKICByZXR1cm4gMQp9CgojIEBkZXNjcmlwdGlvbiBpbnN0YWxscyBmaWxlIHRvIGdpdmVuIGRpcmVjdG9yeQojCiMgY2FsbGJhY2tzIHBhcmFtZXRlcnMgYCR7ZnJvbUZpbGV9ICR7dGFyZ2V0RmlsZX0gJEBgCiMgQGFyZyAkMSBmcm9tRmlsZSAtIG9yaWdpbmFsIGZpbGUgdG8gY29weQojIEBhcmcgJDIgdGFyZ2V0RmlsZSAtIHRhcmdldCBmaWxlCiMgQGFyZyAkMyB1c2VyTmFtZTpTdHJpbmcgKG9wdGlvbmFsKSAoZGVmYXVsdDogJHtVU0VSTkFNRX0pIHRoZSB1c2VyIG5hbWUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gc2V0IHRhcmdldCBmaWxlcyBvd25lcnNoaXAKIyBAYXJnICQ0IHVzZXJHcm91cDpTdHJpbmcgKG9wdGlvbmFsKSAoZGVmYXVsdDogJHtVU0VSTkFNRX0pIHRoZSBncm91cCBuYW1lIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHNldCB0YXJnZXQgZmlsZXMgb3duZXJzaGlwCiMgQGFyZyAkNSBzdWNjZXNzQ2FsbGJhY2s6RnVuY3Rpb24gdGhlIGNhbGxiYWNrIHRvIGNhbGwgd2hlbiBmaWxlIGlzIGluc3RhbGxlZCBzdWNjZXNzZnVsbHksIGJ5IGRlZmF1bHQgc2V0VXNlclJpZ2h0cyBjYWxsYmFjayBpcyBjYWxsZWQKIyBAYXJnICQ2IGZhaWx1cmVDYWxsYmFjazpGdW5jdGlvbiB0aGUgY2FsbGJhY2sgdG8gY2FsbCB3aGVuIGZpbGUgaW5zdGFsbGF0aW9uIGhhcyBmYWlsZWQsIGJ5IGRlZmF1bHQgdW5hYmxlVG9Db3B5Q2FsbGJhY2sgY2FsbGJhY2sgaXMgY2FsbGVkCiMgQGFyZyAkQCBjYWxsYmFja3NQYXJhbXM6U3RyaW5nW10gYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHBhc3NlZCB0byBjYWxsYmFja3MKIyBAZXhpdGNvZGUgMSBpZiBmcm9tRmlsZSBpcyBub3QgcmVhZGFibGUKIyBAZXhpdGNvZGUgMiBpZiBiYWNrdXAgZmlsZSBmYWlsdXJlCiMgQGV4aXRjb2RlIDMgaWYgY29weSBmYWlsdXJlCiMgQGV4aXRjb2RlIDAgb24gc3VjY2VzcyBvciBpZiBPVkVSV1JJVEVfQ09ORklHX0ZJTEVTPTAKIyBAZXhpdGNvZGUgMCBvbiBzdWNjZXNzIG9yIGlmIENIQU5HRV9XSU5ET1dTX0ZJTEVTPTAgYW5kIHRhcmdldCBmaWxlIGlzIGEgd2luZG93cyBmaWxlCiMgQGVudiBPVkVSV1JJVEVfQ09ORklHX0ZJTEVTIEJvb2xlYW4gKGRlZmF1bHQ6MCkgaWYgMSB3aWxsIG92ZXJ3cml0ZSBleGlzdGluZyBkaXJlY3RvcnkKIyBAZW52IENIQU5HRV9XSU5ET1dTX0ZJTEVTIEJvb2xlYW4gKGRlZmF1bHQ6MCkgaWYgMSBhbmQgdGFyZ2V0IGZpbGUgaXMgaW4gd2luZG93cyBmaWxlIHN5c3RlbSwgb3ZlcndyaXRlIGl0CiMgQGVudiBVU0VSTkFNRSAoZGVmYXVsdDogcm9vdCkgdGhlIHVzZXIgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBzZXQgdGFyZ2V0IGZpbGVzIG93bmVyc2hpcAojIEBlbnYgVVNFUkdST1VQIChkZWZhdWx0OiByb290KSB0aGUgZ3JvdXAgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBzZXQgdGFyZ2V0IGZpbGVzIG93bmVyc2hpcAojIEBlbnYgQkFTRV9NTlRfQyBTdHJpbmcgd2luZG93cyBDIGRyaXZlIGJhc2UgUEFUSAojIEBlbnYgRlJBTUVXT1JLX1JPT1RfRElSIHVzZWQgdG8gbWFrZSBwYXRocyByZWxhdGl2ZSB0byB0aGlzIGRpcmVjdG9yeSB0byByZWR1Y2UgbGVuZ3RoIG9mIG1lc3NhZ2VzCiMgQGVudiBTVURPIFN0cmluZyBhbGxvd3MgdG8gdXNlIGN1c3RvbSBzdWRvIHByZWZpeCBjb21tYW5kCiMgQGVudiBCQUNLVVBfRklMRSBCb29sZWFuIChkZWZhdWx0OiAxKQpJbnN0YWxsOjpmaWxlKCkgewogIGxvY2FsIGZyb21GaWxlPSIkMSIKICBsb2NhbCB0YXJnZXRGaWxlPSIkMiIKICBsb2NhbCB1c2VyTmFtZT0iJHszOi0ke1VTRVJOQU1FOi1yb290fX0iCiAgbG9jYWwgdXNlckdyb3VwPSIkezQ6LSR7VVNFUkdST1VQOi1yb290fX0iCiAgbG9jYWwgc3VjY2Vzc0NhbGxiYWNrPSR7NTotSW5zdGFsbDo6c2V0VXNlclJpZ2h0c0NhbGxiYWNrfQogIGxvY2FsIGZhaWx1cmVDYWxsYmFjaz0kezY6LUluc3RhbGw6OnVuYWJsZVRvQ29weUNhbGxiYWNrfQogIHNoaWZ0IDYgfHwgdHJ1ZQoKICBpZiBbWyAhIC1mICIke2Zyb21GaWxlfSIgfHwgISAtciAiJHtmcm9tRmlsZX0iIF1dOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlFcnJvciAiY2Fubm90IHJlYWQgc291cmNlIGZpbGUgJyR7ZnJvbUZpbGV9JyIKICAgIHJldHVybiAxCiAgZmkKCiAgIyBza2lwIGlmIE9WRVJXUklURV9DT05GSUdfRklMRVMgaXMgMCBhbmQgdGFyZ2V0IGZpbGUgZXhpc3RzCiAgaWYgW1sgIiR7T1ZFUldSSVRFX0NPTkZJR19GSUxFU30iID0gIjAiICYmIC1mICIke3RhcmdldEZpbGV9IiBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5V2FybmluZyAiRmlsZSAnJHt0YXJnZXRGaWxlfScgZXhpc3RzIC0gU2tpcCBpbnN0YWxsIChiZWNhdXNlIE9WRVJXUklURV9DT05GSUdfRklMRVM9MCBpbiAuZW52IGZpbGUpIgogICAgcmV0dXJuIDAKICBmaQoKICAjIHNraXAgaWYgQ0hBTkdFX1dJTkRPV1NfRklMRVMgaXMgMCBhbmQgdGFyZ2V0IGRpciBpcyBjIGRyaXZlCiAgaWYgW1sgIiR7Q0hBTkdFX1dJTkRPV1NfRklMRVN9IiA9ICIwIiAmJiAiJHt0YXJnZXRGaWxlfSIgPX4gXiR7QkFTRV9NTlRfQ30gXV07IHRoZW4KICAgIExvZzo6ZGlzcGxheVdhcm5pbmcgIkZpbGUgJyR7dGFyZ2V0RmlsZX0nIC0gU2tpcCBpbnN0YWxsIChiZWNhdXNlIENIQU5HRV9XSU5ET1dTX0ZJTEVTPTAgaW4gLmVudiBmaWxlKSIKICAgIHJldHVybiAwCiAgZmkKCiAgbG9jYWwgdGFyZ2V0RGlyCiAgdGFyZ2V0RGlyPSIkKGRpcm5hbWUgIiR7dGFyZ2V0RmlsZX0iKSIKICBpZiBbWyAhIC1kICIke3RhcmdldERpcn0iIF1dOyB0aGVuCiAgICAke1NVRE86LX0gbWtkaXIgLXAgIiR7dGFyZ2V0RGlyfSIKICAgICR7U1VETzotfSBjaG93biAiJHt1c2VyTmFtZX0iOiIke3VzZXJHcm91cH0iICIke3RhcmdldERpcn0iCiAgZmkKICBsb2NhbCBmcm9tRGlyCiAgZnJvbURpcj0iJChkaXJuYW1lICIke2Zyb21GaWxlfSIpIgogIGxvY2FsIGZyb21GaWxlbmFtZQogIGZyb21GaWxlbmFtZT0iJChiYXNlbmFtZSAiJHtmcm9tRmlsZX0iKSIKCiAgaWYgW1sgIiR7QkFDS1VQX0ZJTEU6LTF9IiA9ICIxIiBdXTsgdGhlbgogICAgQmFja3VwOjpmaWxlICIke3RhcmdldEZpbGV9IiB8fCByZXR1cm4gMgogIGZpCgogIGlmICR7U1VETzotfSBjcCAiJHtmcm9tRmlsZX0iICIke3RhcmdldEZpbGV9IjsgdGhlbgogICAgTG9nOjpkaXNwbGF5U3VjY2VzcyAiSW5zdGFsbGVkIGZpbGUgJyR7ZnJvbURpciMiJHtGUkFNRVdPUktfUk9PVF9ESVJ9LyJ9LyR7ZnJvbUZpbGVuYW1lfScgdG8gJyR7dGFyZ2V0RmlsZX0nIgogICAgJHtzdWNjZXNzQ2FsbGJhY2t9ICIke2Zyb21GaWxlfSIgIiR7dGFyZ2V0RmlsZX0iICIke3VzZXJOYW1lfSIgIiR7dXNlckdyb3VwfSIgIiR7ZnJvbURpciMiJHtGUkFNRVdPUktfUk9PVF9ESVJ9LyJ9IiAiJHtmcm9tRmlsZW5hbWV9IgogIGVsc2UKICAgIExvZzo6ZGlzcGxheUVycm9yICJ1bmFibGUgdG8gY29weSBmaWxlIGZyb20gJyR7ZnJvbURpciMiJHtGUkFNRVdPUktfUk9PVF9ESVJ9LyJ9LyR7ZnJvbUZpbGVuYW1lfScgdG8gJyR7dGFyZ2V0RmlsZX0nIgogICAgJHtmYWlsdXJlQ2FsbGJhY2t9ICIke2Zyb21GaWxlfSIgIiR7dGFyZ2V0RmlsZX0iICIke3VzZXJOYW1lfSIgIiR7dXNlckdyb3VwfSIgIiR7ZnJvbURpciMiJHtGUkFNRVdPUktfUk9PVF9ESVJ9LyJ9IiAiJHtmcm9tRmlsZW5hbWV9IgogICAgcmV0dXJuIDMKICBmaQp9CgojIEBkZXNjcmlwdGlvbiBhcHQtZ2V0IGluc3RhbGwKIyBAYXJnICRAIHNvZnR3YXJlczpTdHJpbmdbXSBsaXN0IG9mIHNvZnR3YXJlcyB0byBpbnN0YWxsCiMgQGZlYXR1cmUgUmV0cnk6OmRlZmF1bHQKIyBMaW51eDo6cmVxdWlyZVN1ZG9Db21tYW5kCiMgQHJlcXVpcmUgTGludXg6OnJlcXVpcmVVYnVudHUKIyBAc3Rkb3V0IGRpYWdub3N0aWNzIGxvZ3MKTGludXg6OkFwdDo6aW5zdGFsbCgpIHsKICBMb2c6OmRpc3BsYXlJbmZvICJBcHQgaW5zdGFsbCAkKiIKICBSZXRyeTo6ZGVmYXVsdCBzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSAtcSAiJEAiCn0KCiMgQGRlc2NyaXB0aW9uIHVwZGF0ZSBhcHQgcGFja2FnZXMgbGlzdAojIEBmZWF0dXJlIFJldHJ5OjpkZWZhdWx0CiMgTGludXg6OnJlcXVpcmVTdWRvQ29tbWFuZAojIEByZXF1aXJlIExpbnV4OjpyZXF1aXJlVWJ1bnR1CiMgQHN0ZG91dCBkaWFnbm9zdGljcyBsb2dzCkxpbnV4OjpBcHQ6OnVwZGF0ZSgpIHsKICBMb2c6OmRpc3BsYXlJbmZvICJBcHQgdXBkYXRlIC4uLiIKICBSZXRyeTo6ZGVmYXVsdCBzdWRvIGFwdC1nZXQgdXBkYXRlIC15IC0tZml4LW1pc3NpbmcgLW8gQWNxdWlyZTo6Rm9yY2VJUHY0PXRydWUKfQoKIyBAZGVzY3JpcHRpb24gcmV0cmlldmUgcGF0aCBmcm9tIHdzbHZhciBhbmQgdGhlbiB1c2Ugd3NscGF0aCB0byByZXNvbHZlIGl0CiMgdXNpbmcgY2FjaGUgKGNhY2hlIGlzIHJlZnJlc2hlZCBldmVyeSBkYXkpCiMgQGFyZyAkMSB2YXI6U3RyaW5nIHRoZSB2YXIgdG8gcmV0cmlldmUgdXNpbmcgd3NsdmFyCiMgQGFyZyAkQCBhcmdzOlN0cmluZ1tdIChvcHRpb25hbCkgYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byB3c2x2YXIKIyBAZW52IFdTTF9UTVBESVIgU3RyaW5nIHRlbXAgZGlyZWN0b3J5IHRvIHN0b3JlIHRoZSB3c2xwYXRoIGNhY2hlIChkZWZhdWx0IHZhbHVlOiBUTVBESVIpLCB5b3UgY2FuIHVzZSBQRVJTSVNURU5UX1RNUERJUiBpbnN0ZWFkCiMgQGV4aXRjb2RlICogaWYgTGludXg6OldzbDo6b3JpZ2luYWxXc2xwYXRoIGNhbm5vdCBmaW5kIHRoZSBwYXRoIG9yIExpbnV4OjpXc2w6Om9yaWdpbmFsV3NsdmFyIGNhbm5vdCBmaW5kIHRoZSB2YXIKIyBAc3RkZXJyIGRpYWdub3N0aWNzIGluZm9ybWF0aW9uIGlzIGRpc3BsYXllZAojIEByZXF1aXJlIExpbnV4OjpXc2w6OnJlcXVpcmVXc2wKIyBAZmVhdHVyZSBjYWNoZQpMaW51eDo6V3NsOjpjYWNoZWRXc2xwYXRoRnJvbVdzbFZhcigpIHsKICBsb2NhbCB2YXI9IiQxIgogIHNoaWZ0IHx8IHRydWUKICBsb2NhbCB2YWx1ZQogIHZhbHVlPSIkKExpbnV4OjpXc2w6OmNhY2hlZFdzbHZhciAiJHt2YXJ9IiAiJEAiKSIgfHwgcmV0dXJuIDEKICBMaW51eDo6V3NsOjpjYWNoZWRXc2xwYXRoICIke3ZhbHVlfSIgfHwgcmV0dXJuIDEKfQoKIyBAZGVzY3JpcHRpb24gcmV0cmlldmUgd3NsdmFyIHVzaW5nIGNhY2hlIChjYWNoZSBpcyByZWZyZXNoZWQgZXZlcnkgZGF5KQojIEBhcmcgJEAgYXJnczpTdHJpbmdbXSBhcmd1bWVudHMgdG8gcGFzcyB0byB3c2x2YXIKIyBAZW52IFdTTF9UTVBESVIgU3RyaW5nIHRlbXAgZGlyZWN0b3J5IHRvIHN0b3JlIHRoZSB3c2x2YXIgY2FjaGUgKGRlZmF1bHQgdmFsdWU6IFRNUERJUiksIHlvdSBjYW4gdXNlIFBFUlNJU1RFTlRfVE1QRElSIGluc3RlYWQKIyBAZXhpdGNvZGUgKiBpZiBMaW51eDo6V3NsOjpvcmlnaW5hbFdzbHZhciBjYW5ub3QgZmluZCB0aGUgdmFyaWFibGUKIyBAc3RkZXJyIGRpYWdub3N0aWNzIGluZm9ybWF0aW9uIGlzIGRpc3BsYXllZAojIEByZXF1aXJlIExpbnV4OjpXc2w6OnJlcXVpcmVXc2wKIyBAZmVhdHVyZSBjYWNoZQpMaW51eDo6V3NsOjpjYWNoZWRXc2x2YXIoKSB7CiAgbG9jYWwgdGVtcEVudkZpbGUKICB0ZW1wRW52RmlsZT0iJHtXU0xfVE1QRElSOi0ke1BFUlNJU1RFTlRfVE1QRElSOi0vdG1wfX0vYmFzaF90b29sc193c2x2YXJfJChpZCAtdW4pIgoKICBDYWNoZTo6Z2V0UHJvcGVydHlWYWx1ZSAiJHt0ZW1wRW52RmlsZX0iICIkMSIgTGludXg6OldzbDo6b3JpZ2luYWxXc2x2YXIgIiRAIgp9CgojIEBkZXNjcmlwdGlvbiBsb2cgbWVzc2FnZSB0byBmaWxlCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6bG9nRXJyb3IoKSB7CiAgaWYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgPj0gX19MRVZFTF9FUlJPUikpOyB0aGVuCiAgICBMb2c6OmxvZ01lc3NhZ2UgIiR7MjotRVJST1J9IiAiJDEiCiAgZmkKfQoKIyBAZGVzY3JpcHRpb24gbG9nIG1lc3NhZ2UgdG8gZmlsZQojIEBhcmcgJDEgbWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQpMb2c6OmxvZ0ZhdGFsKCkgewogIExvZzo6bG9nTWVzc2FnZSAiJHsyOi1GQVRBTH0iICIkMSIKfQoKIyBAZGVzY3JpcHRpb24gSW50ZXJuYWw6IGNvbW1vbiBsb2cgbWVzc2FnZQojIEBleGFtcGxlIHRleHQKIyAgIFtkYXRlXXxbbGV2ZWxNc2ddfG1lc3NhZ2UKIwojIEBleGFtcGxlIHRleHQKIyAgIDIwMjAtMDEtMTkgMTk6MjA6MjF8RVJST1IgIHxsb2cgZXJyb3IKIyAgIDIwMjAtMDEtMTkgMTk6MjA6MjF8U0tJUFBFRHxsb2cgc2tpcHBlZAojCiMgQGFyZyAkMSBsZXZlbE1zZzpTdHJpbmcgbWVzc2FnZSdzIGxldmVsIGRlc2NyaXB0aW9uIChlZzogU1RBVFVTLCBFUlJPUiwgLi4uKQojIEBhcmcgJDIgbXNnOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CiMgQGVudiBCQVNIX0ZSQU1FV09SS19MT0dfRklMRSBTdHJpbmcgbG9nIGZpbGUgdG8gdXNlLCBkbyBub3RoaW5nIGlmIGVtcHR5CiMgQGVudiBCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgaW50IGxvZyBsZXZlbCBsb2cgb25seSBpZiA+IE9GRiBvciBmYXRhbCBtZXNzYWdlcwojIEBzdGRlcnIgZGlhZ25vc3RpY3MgaW5mb3JtYXRpb24gaXMgZGlzcGxheWVkCiMgQHJlcXVpcmUgRW52OjpyZXF1aXJlTG9hZAojIEByZXF1aXJlIExvZzo6cmVxdWlyZUxvYWQKTG9nOjpsb2dNZXNzYWdlKCkgewogIGxvY2FsIGxldmVsTXNnPSIkMSIKICBsb2NhbCBtc2c9IiQyIgogIGxvY2FsIGRhdGUKCiAgaWYgW1sgLW4gIiR7QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEV9IiBdXSAmJiAoKEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTCA+IF9fTEVWRUxfT0ZGKSk7IHRoZW4KICAgIGRhdGU9IiQoZGF0ZSAnKyVZLSVtLSVkICVIOiVNOiVTJykiCiAgICB0b3VjaCAiJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRX0iCiAgICBwcmludGYgIiVzfCU3c3wlc1xuIiAiJHtkYXRlfSIgIiR7bGV2ZWxNc2d9IiAiJHttc2d9IiA+PiIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSIKICBmaQp9CgojIEBkZXNjcmlwdGlvbiBUbyBiZSBjYWxsZWQgYmVmb3JlIGxvZ2dpbmcgaW4gdGhlIGxvZyBmaWxlCiMgQGFyZyAkMSBmaWxlOnN0cmluZyBsb2cgZmlsZSBuYW1lCiMgQGFyZyAkMiBtYXhMb2dGaWxlc0NvdW50OmludCBtYXhpbXVtIG51bWJlciBvZiBsb2cgZmlsZXMKTG9nOjpyb3RhdGUoKSB7CiAgbG9jYWwgZmlsZT0iJDEiCiAgbG9jYWwgbWF4TG9nRmlsZXNDb3VudD0iJHsyOi01fSIKCiAgaWYgW1sgISAtZiAiJHtmaWxlfSIgXV07IHRoZW4KICAgIExvZzo6ZGlzcGxheVNraXBwZWQgIkxvZyBmaWxlICR7ZmlsZX0gZG9lc24ndCBleGlzdCB5ZXQiCiAgICByZXR1cm4gMAogIGZpCiAgbG9jYWwgaQogIGZvciAoKGkgPSBtYXhMb2dGaWxlc0NvdW50IC0gMTsgaSA+IDA7IGktLSkpOyBkbwogICAgTG9nOjpkaXNwbGF5SW5mbyAiTG9nIHJvdGF0aW9uICR7ZmlsZX0uJHtpfSB0byAke2ZpbGV9LiQoKGkgKyAxKSkiCiAgICBtdiAiJHtmaWxlfS4ieyIke2l9IiwiJCgoaSArIDEpKSJ9ICY+L2Rldi9udWxsIHx8IHRydWUKICBkb25lCiAgaWYgY3AgIiR7ZmlsZX0iICIke2ZpbGV9LjEiICY+L2Rldi9udWxsOyB0aGVuCiAgICBlY2hvID4iJHtmaWxlfSIgIyByZXNldCBsb2cgZmlsZQogICAgTG9nOjpkaXNwbGF5SW5mbyAiTG9nIHJvdGF0aW9uICR7ZmlsZX0gdG8gJHtmaWxlfS4xIgogIGZpCn0KCiMgQGRlc2NyaXB0aW9uIFJldHJ5IGEgY29tbWFuZCBzZXZlcmFsIHRpbWVzIGRlcGVuZGluZyBvbiBwYXJhbWV0ZXJzCiMgQGFyZyAkMSBtYXhSZXRyaWVzOmludCAgICAkMSBtYXggcmV0cmllcwojIEBhcmcgJDIgZGVsYXk6aW50IGJldHdlZW4gYXR0ZW1wdAojIEBhcmcgJDMgbWVzc2FnZTpTdHJpbmcgdG8gZGlzcGxheSB0byBkZXNjcmliZSB0aGUgYXR0ZW1wdAojIEBhcmcgJEAgcmVzdCBvZiBwYXJhbWV0ZXJzLCB0aGUgY29tbWFuZCB0byBydW4KIyBAZXhpdGNvZGUgMCBvbiBzdWNjZXNzCiMgQGV4aXRjb2RlIDEgaWYgbWF4IHJldHJpZXMgY291bnQgcmVhY2hlZAojIEBleGl0Y29kZSAyIGlmIG1heFJldHJpZXMgaW52YWxpZCB2YWx1ZQpSZXRyeTo6cGFyYW1ldGVyaXplZCgpIHsKICBsb2NhbCBtYXhSZXRyaWVzPSQxCiAgc2hpZnQgfHwgdHJ1ZQogIGxvY2FsIGRlbGF5QmV0d2VlblRyaWVzPSQxCiAgc2hpZnQgfHwgdHJ1ZQogIGxvY2FsIG1lc3NhZ2U9IiQxIgogIHNoaWZ0IHx8IHRydWUKICBsb2NhbCByZXRyaWVzQ291bnQ9MQogIGlmIFtbICIke21heFJldHJpZXN9IiAtbHQgMSBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5RXJyb3IgImludmFsaWQgbWF4UmV0cnkgdmFsdWUiCiAgICByZXR1cm4gMgogIGZpCgogIHdoaWxlIHRydWU7IGRvCiAgICBMb2c6OmRpc3BsYXlJbmZvICJBdHRlbXB0ICR7cmV0cmllc0NvdW50fS8ke21heFJldHJpZXN9OiAke21lc3NhZ2V9IgogICAgaWYgIiRAIjsgdGhlbgogICAgICBicmVhawogICAgZWxpZiBbWyAiJHtyZXRyaWVzQ291bnR9IiAtbHQgIiR7bWF4UmV0cmllc30iIF1dOyB0aGVuCiAgICAgIExvZzo6ZGlzcGxheVdhcm5pbmcgIkNvbW1hbmQgZmFpbGVkLiBXYWl0IGZvciAke2RlbGF5QmV0d2VlblRyaWVzfSBzZWNvbmRzIgogICAgICAoKHJldHJpZXNDb3VudCsrKSkKICAgICAgc2xlZXAgIiR7ZGVsYXlCZXR3ZWVuVHJpZXN9IgogICAgZWxzZQogICAgICBMb2c6OmRpc3BsYXlFcnJvciAiVGhlIGNvbW1hbmQgaGFzIGZhaWxlZCBhZnRlciAke3JldHJpZXNDb3VudH0gYXR0ZW1wdHMuIgogICAgICByZXR1cm4gMQogICAgZmkKICBkb25lCiAgcmV0dXJuIDAKfQoKIyBAZGVzY3JpcHRpb24gZXh0cmFjdCB2ZXJzaW9uIG51bWJlciBmcm9tIGdpdGh1YiBhcGkKIyBAbm9hcmdzCiMgQHN0ZGluIGpzb24gcmVzdWx0IG9mIGdpdGh1YiBBUEkKIyBAZXhpdGNvZGUgMSBpZiBqcSBvciBWZXJzaW9uOjpwYXJzZSBmYWlscwojIEBzdGRvdXQgdGhlIHZlcnNpb24gcGFyc2VkCiMgQHJlcXVpcmUgTGludXg6OnJlcXVpcmVKcUNvbW1hbmQKVmVyc2lvbjo6Z2l0aHViQXBpRXh0cmFjdFZlcnNpb24oKSB7CiAganEgLXIgIi50YWdfbmFtZSIKfQoKIyBAZGVzY3JpcHRpb24gZmlsdGVyIHRvIGtlZXAgb25seSB2ZXJzaW9uIG51bWJlciBmcm9tIGEgc3RyaW5nCiMgQGFyZyAkQCBmaWxlczpTdHJpbmdbXSB0aGUgZmlsZXMgdG8gZmlsdGVyCiMgQGV4aXRjb2RlICogaWYgb25lIG9mIHRoZSBmaWx0ZXIgY29tbWFuZCBmYWlscwojIEBzdGRpbiB5b3UgY2FuIHVzZSBzdGRpbiBhcyBhbHRlcm5hdGl2ZSB0byBmaWxlcyBhcmd1bWVudAojIEBzdGRvdXQgdGhlIGZpbHRlcmVkIGNvbnRlbnQKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTIwClZlcnNpb246OnBhcnNlKCkgewogIHNlZCAtRW4gJ3MvW14wLTldKigoWzAtOV0rXC4pKlswLTldKykuKi9cMS9wJyAiJEAiIHwgaGVhZCAtbjEKfQoKIyBAZGVzY3JpcHRpb24gZW5zdXJlIGVudiBmaWxlcyBhcmUgbG9hZGVkCiMgQGFyZyAkQCBsaXN0IG9mIGRlZmF1bHQgZmlsZXMgdG8gbG9hZCBhdCB0aGUgZW5kCiMgQGV4aXRjb2RlIDEgaWYgb25lIG9mIGVudiBmaWxlcyBmYWlscyB0byBsb2FkCiMgQHN0ZGVyciBkaWFnbm9zdGljcyBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTIwCkVudjo6cmVxdWlyZUxvYWQoKSB7CiAgbG9jYWwgLWEgZGVmYXVsdEZpbGVzPSgiJEAiKQogICMgZ2V0IGxpc3Qgb2YgcG9zc2libGUgY29uZmlnIGZpbGVzCiAgbG9jYWwgLWEgY29uZmlnRmlsZXM9KCkKICBpZiBbWyAtbiAiJHtCQVNIX0ZSQU1FV09SS19FTlZfRklMRVNbMF0rMX0iIF1dOyB0aGVuCiAgICAjIEJBU0hfRlJBTUVXT1JLX0VOVl9GSUxFUyBpcyBhbiBhcnJheQogICAgY29uZmlnRmlsZXMrPSgiJHtCQVNIX0ZSQU1FV09SS19FTlZfRklMRVNbQF19IikKICBmaQogIGlmIFtbIC1mICIkKHB3ZCkvLmZyYW1ld29yay1jb25maWciIF1dOyB0aGVuCiAgICBjb25maWdGaWxlcys9KCIkKHB3ZCkvLmZyYW1ld29yay1jb25maWciKQogIGZpCiAgaWYgW1sgLWYgIiR7RlJBTUVXT1JLX1JPT1RfRElSfS8uZnJhbWV3b3JrLWNvbmZpZyIgXV07IHRoZW4KICAgIGNvbmZpZ0ZpbGVzKz0oIiR7RlJBTUVXT1JLX1JPT1RfRElSfS8uZnJhbWV3b3JrLWNvbmZpZyIpCiAgZmkKICBjb25maWdGaWxlcys9KCIke29wdGlvbkVudkZpbGVzW0BdfSIpCiAgY29uZmlnRmlsZXMrPSgiJHtkZWZhdWx0RmlsZXNbQF19IikKCiAgZm9yIGZpbGUgaW4gIiR7Y29uZmlnRmlsZXNbQF19IjsgZG8KICAgICMgc2hlbGxjaGVjayBzb3VyY2U9Ly5mcmFtZXdvcmstY29uZmlnCiAgICBDVVJSRU5UX0xPQURFRF9FTlZfRklMRT0iJHtmaWxlfSIgc291cmNlICIke2ZpbGV9IiB8fCB7CiAgICAgIExvZzo6ZGlzcGxheUVycm9yICJ3aGlsZSBsb2FkaW5nIGNvbmZpZyBmaWxlOiAke2ZpbGV9IgogICAgICByZXR1cm4gMQogICAgfQogIGRvbmUKfQoKIyBAZGVzY3JpcHRpb24gbG9hZCBjb2xvciB0aGVtZQojIEBub2FyZ3MKIyBAZW52IEJBU0hfRlJBTUVXT1JLX1RIRU1FIFN0cmluZyB0aGVtZSB0byB1c2UKIyBAZW52IExPQURfVEhFTUUgaW50IDAgdG8gYXZvaWQgbG9hZGluZyB0aGVtZQojIEBleGl0Y29kZSAwIGFsd2F5cyBzdWNjZXNzZnVsClVJOjpyZXF1aXJlVGhlbWUoKSB7CiAgaWYgW1sgIiR7TE9BRF9USEVNRTotMX0iID0gIjEiIF1dOyB0aGVuCiAgICBVSTo6dGhlbWUgIiR7QkFTSF9GUkFNRVdPUktfVEhFTUUtZGVmYXVsdH0iCiAgZmkKfQoKIyBAZGVzY3JpcHRpb24gY2hlY2sgaWYgYXJndW1lbnQgcmVzcGVjdHMgdGhpcyBmcmFtZXdvcmsgdmFyaWFibGUgbmFtaW5nIGNvbnZlbnRpb24KIyAtIGlmIHZhcmlhYmxlIGJlZ2lucyB3aXRoIGFuIHVwcGVyY2FzZSBvciB1bmRlcnNjb3JlLCBmb2xsb3dpbmcgbGV0dGVycyBoYXZlIHRvIGJlIHVwcGVyY2FzZSBvciB1bmRlcnNjb3JlCiMgLSB2YXJpYWJsZSBuYW1lIGNhbiBpbmNsdWRlcyAnOicgb3IgJ18nIG9yIGRpZ2l0cyBidXQgbm90IGFzIGZpcnN0IGxldHRlcgojIGhlcmUgdmFsaWQgdmFyaWFibGUgbmFtZSBleGFtcGxlcwojCiMgQGFyZyAkMSB2YXJpYWJsZU5hbWU6U3RyaW5nCiMgQGV4aXRjb2RlIDEgaWYgcmVnZXhwIG5vdCBtYXRjaGVzCiMgQHNlZSBodHRwczovL3JlZ2V4MTAxLmNvbS9yL0JVbFBYUy8xCkFzc2VydDo6dmFsaWRWYXJpYWJsZU5hbWUoKSB7CiAgZWNobyAiJDEiIHwgTENfQUxMPVBPU0lYIGdyZXAgLUUgLXEgJyheW2Etel1bQS1aYS16XzAtOTpdKyQpfCheW0EtWl9dW0EtWl8wLTk6XSskKScKfQoKIyBAZGVzY3JpcHRpb24gQmFja3VwIGdpdmVuIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5IGFwcGVuZGluZyBfIGZvbGxvd2VkIGJ5IHRoZSBjdXJyZW50IGRhdGUKIyBAYXJnICQxIGZpbGU6U3RyaW5nIHRoZSBmaWxlIHRvIGJhY2t1cAojIEBzdGRlcnIgbWVzc2FnZXMgYWJvdXQgYmFja3VwIGZpbGUgbG9jYXRpb24KIyBAZW52IFNVRE8gU3RyaW5nIGFsbG93cyB0byB1c2UgY3VzdG9tIHN1ZG8gcHJlZml4IGNvbW1hbmQKIyBAZXhpdGNvZGUgMSBvbiBjb3B5IGZhaWx1cmUKQmFja3VwOjpmaWxlKCkgewogIGxvY2FsIGZpbGU9IiQxIgogIGxvY2FsIGJhY2t1cEZpbGUKICBpZiBbWyAtZiAiJHtmaWxlfSIgXV07IHRoZW4KICAgIGJhY2t1cEZpbGU9IiR7ZmlsZX1fJChkYXRlICsiJVktJW0tJWRfJUg6JU06JVMiKSIKICAgIExvZzo6ZGlzcGxheUluZm8gIkJhY2t1cCBmaWxlICcke2ZpbGV9JyB0byAke2JhY2t1cEZpbGV9IgogICAgJHtTVURPOi19IGNwICIke2ZpbGV9IiAiJHtiYWNrdXBGaWxlfSIKICBmaQp9CgojIEBkZXNjcmlwdGlvbiBnZXQgcHJvcGVydHkgdmFsdWUgZnJvbSBmaWxlCiMgaWYgbm90IHByZXNlbnQgY29tcHV0ZSBpdCB1c2luZyBwcm9wZXJ0eU5vdEZvdW5kQ2FsbGJhY2sgKGlmIHByb3ZpZGVkKSBhbmQgc3RvcmUgaXQgaW4gcHJvcGVydHkgZmlsZQojIEBhcmcgJDEgcHJvcGVydHlGaWxlOlN0cmluZyB0aGUgZmlsZSBpbiB3aGljaCB0aGUgcHJvcGVydHkgd2lsbCBiZSBzZWFyY2hlZAojIEBhcmcgJDIga2V5OlN0cmluZyB0aGUgcHJvcGVydHkga2V5IHRvIHNlYXJjaCBpbiBwcm9wZXJ0eSBmaWxlCiMgQGFyZyAkMyBwcm9wZXJ0eU5vdEZvdW5kQ2FsbGJhY2s6RnVuY3Rpb24gKG9wdGlvbmFsKSBhIGNhbGxiYWNrIHRvIGNhbGwgaWYgcHJvcGVydHkga2V5IGlzIG5vdCBmb3VuZCBpbiBwcm9wZXJ0eSBmaWxlCiMgQGFyZyAkQCBhcmdzOlN0cmluZ1tdIChvcHRpb25hbCkgdGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBwcm9wZXJ0eU5vdEZvdW5kQ2FsbGJhY2sKIyBAZXhpdGNvZGUgMSBpZiB2YWx1ZSBpcyBub3QgZm91bmQKIyBAZXhpdGNvZGUgKiBpZiBwcm9wZXJ0eU5vdEZvdW5kQ2FsbGJhY2sgZmFpbHMKIyBAc3Rkb3V0IHRoZSBwcm9wZXJ0eSB2YWx1ZSBnaXZlbiBieSBwcm9wZXJ0eSBmaWxlIG9yIGJ5IHRoZSBwcm9wZXJ0eU5vdEZvdW5kQ2FsbGJhY2sKQ2FjaGU6OmdldFByb3BlcnR5VmFsdWUoKSB7CiAgbG9jYWwgdmFsdWUKICBsb2NhbCBwcm9wZXJ0eUZpbGU9IiQxIgogIHNoaWZ0IHx8IHRydWUKICBsb2NhbCBrZXkKICBrZXk9IiQoZWNobyAtRSAiJDEiIHwgc2VkIC1FICdzI1xcIy8jZycpIgogIHNoaWZ0IHx8IHRydWUKICBsb2NhbCBwcm9wZXJ0eU5vdEZvdW5kQ2FsbGJhY2s9JDEKICBzaGlmdCB8fCB0cnVlCgogIGlmIGdyZXAgLUUgIl4ke2tleX09LioiICIke3Byb3BlcnR5RmlsZX0iICY+L2Rldi9udWxsOyB0aGVuCiAgICBncmVwIC1FICJeJHtrZXl9PSIgIiR7cHJvcGVydHlGaWxlfSIgfCBjdXQgLWQnPScgLWYyCiAgICByZXR1cm4gMAogIGVsaWYgW1sgIiQodHlwZSAtdCAiJHtwcm9wZXJ0eU5vdEZvdW5kQ2FsbGJhY2t9IikiID0gImZ1bmN0aW9uIiBdXTsgdGhlbgogICAgdmFsdWU9IiQoIiR7cHJvcGVydHlOb3RGb3VuZENhbGxiYWNrfSIgIiRAIikiIHx8IHJldHVybiAkPwogICAgaWYgW1sgLW4gIiR7dmFsdWV9IiBdXTsgdGhlbgogICAgICBlY2hvIC1FICIke2tleX09JHt2YWx1ZX0iID4+IiR7cHJvcGVydHlGaWxlfSIKICAgIGZpCiAgICBlY2hvIC1FICIke3ZhbHVlfSIKICAgIHJldHVybiAwCiAgZmkKICByZXR1cm4gMQp9CgojIEBkZXNjcmlwdGlvbiBpbnN0YWxsIGNhbGxiYWNrCiMgICBzZXQgZmlsZSB3aXRoIHJvb3Qgb3duZXJzaGlwIGFuZCBleGVjdXRpb24gYml0CiMgQGFyZyAkMSBmcm9tRmlsZTpTdHJpbmcKIyBAYXJnICQyIHRhcmdldEZpbGU6U3RyaW5nCiMgQGFyZyAkMyB1c2VyTmFtZTpTdHJpbmcgKG9wdGlvbmFsKSAoZGVmYXVsdDogJHtVU0VSTkFNRX0pIHRoZSB1c2VyIG5hbWUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gc2V0IHRhcmdldCBmaWxlcyBvd25lcnNoaXAKIyBAYXJnICQ0IHVzZXJHcm91cDpTdHJpbmcgKG9wdGlvbmFsKSAoZGVmYXVsdDogJHtVU0VSTkFNRX0pIHRoZSBncm91cCBuYW1lIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHNldCB0YXJnZXQgZmlsZXMgb3duZXJzaGlwCiMgQGVudiBVU0VSTkFNRSAoZGVmYXVsdDogcm9vdCkgdGhlIHVzZXIgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBzZXQgdGFyZ2V0IGZpbGVzIG93bmVyc2hpcAojIEBlbnYgVVNFUkdST1VQIChkZWZhdWx0OiByb290KSB0aGUgZ3JvdXAgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBzZXQgdGFyZ2V0IGZpbGVzIG93bmVyc2hpcAojIEBlbnYgU1VETyBTdHJpbmcgYWxsb3dzIHRvIHVzZSBjdXN0b20gc3VkbyBwcmVmaXggY29tbWFuZAojIEBleGl0Y29kZSAxIG9uIGFueSBmYWlsdXJlCiMgQHNlZSBJbnN0YWxsOjpmaWxlCkluc3RhbGw6OnNldFVzZXJSaWdodHNDYWxsYmFjaygpIHsKICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQgIyAkMSBub3QgdXNlZAogIGxvY2FsIGZyb21GaWxlPSIkMSIKICBsb2NhbCB0YXJnZXRGaWxlPSIkMiIKICBsb2NhbCB1c2VyTmFtZT0iJHszOi0ke1VTRVJOQU1FOi1yb290fX0iCiAgbG9jYWwgdXNlckdyb3VwPSIkezQ6LSR7VVNFUkdST1VQOi1yb290fX0iCgogICR7U1VETzotfSBjaG93biAiJHt1c2VyTmFtZX0iOiIke3VzZXJHcm91cH0iICIke3RhcmdldEZpbGV9Igp9CgojIEBkZXNjcmlwdGlvbiBpbnN0YWxsIGNhbGxiYWNrCiMgICBkZWZhdWx0IGNhbGxiYWNrIHVzZWQgY2FsbGVkIHdoZW4gZmlsZSBjb3B5IGhhcyBmYWlsZWQKIyBAYXJnICQxIGZyb21GaWxlOlN0cmluZwojIEBhcmcgJDIgdGFyZ2V0RmlsZTpTdHJpbmcKIyBAZW52IEZSQU1FV09SS19ST09UX0RJUiB1c2VkIHRvIG1ha2UgcGF0aHMgcmVsYXRpdmUgdG8gdGhpcyBkaXJlY3RvcnkgdG8gcmVkdWNlIGxlbmd0aCBvZiBtZXNzYWdlcwojIEBleGl0Y29kZSAxIGFsd2F5cyBmYWlsCiMgQHN0ZGVyciBkaWFnbm9zdGljcyBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQKIyBAc2VlIEluc3RhbGw6OmZpbGUKSW5zdGFsbDo6dW5hYmxlVG9Db3B5Q2FsbGJhY2soKSB7CiAgbG9jYWwgZnJvbURpcj0iJDEiCiAgbG9jYWwgZmlsZU5hbWU9IiQyIgogIGxvY2FsIHRhcmdldEZpbGU9IiQzIgogIExvZzo6ZmF0YWwgInVuYWJsZSB0byBjb3B5IGZpbGUgJyR7ZnJvbURpciMiJHtGUkFNRVdPUktfUk9PVF9ESVJ9LyJ9LyR7ZmlsZU5hbWV9JyB0byAnJHt0YXJnZXRGaWxlfSciCn0KCiMgQGRlc2NyaXB0aW9uIHJldHJpZXZlIHdzbHBhdGggdXNpbmcgY2FjaGUgKGNhY2hlIGlzIHJlZnJlc2hlZCBldmVyeSBkYXkpCiMgQGFyZyAkQCBhcmdzOlN0cmluZ1tdIGFyZ3VtZW50cyB0byBwYXNzIHRvIHdzbHBhdGgKIyBAZW52IFdTTF9UTVBESVIgU3RyaW5nIHRlbXAgZGlyZWN0b3J5IHRvIHN0b3JlIHRoZSB3c2xwYXRoIGNhY2hlIChkZWZhdWx0IHZhbHVlOiBUTVBESVIpLCB5b3UgY2FuIHVzZSBQRVJTSVNURU5UX1RNUERJUiBpbnN0ZWFkCiMgQGV4aXRjb2RlICogaWYgTGludXg6OldzbDo6b3JpZ2luYWxXc2xwYXRoIGNhbm5vdCBmaW5kIHRoZSBwYXRoCiMgQHN0ZGVyciBkaWFnbm9zdGljcyBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQKIyBAcmVxdWlyZSBMaW51eDo6V3NsOjpyZXF1aXJlV3NsCiMgQGZlYXR1cmUgY2FjaGUKTGludXg6OldzbDo6Y2FjaGVkV3NscGF0aCgpIHsKICBsb2NhbCAtYSBhcmdzPSgiJEAiKQogIGxvY2FsIHRlbXBFbnZGaWxlIGtleQogIHRlbXBFbnZGaWxlPSIke1dTTF9UTVBESVI6LSR7UEVSU0lTVEVOVF9UTVBESVI6LS90bXB9fS9iYXNoX3Rvb2xzX3dzbHBhdGhfJChpZCAtdW4pIgoKICBrZXk9IiQoTGludXg6OldzbDo6Z2V0S2V5RnJvbVdzbHBhdGhPcHRpb25zICIkQCIpIgogIENhY2hlOjpnZXRQcm9wZXJ0eVZhbHVlICIke3RlbXBFbnZGaWxlfSIgIiR7a2V5fSIgTGludXg6OldzbDo6b3JpZ2luYWxXc2xwYXRoICIke2FyZ3NbQF19Igp9CgojIEBkZXNjcmlwdGlvbiBjYWxsIHNpbXBseSBvcmlnaW5hbCB3c2x2YXIgY29tbWFuZAojIEBhcmcgJEAgYXJnczpTdHJpbmdbXSBhcmdzIHRvIHBhc3MgdG8gd3NsdmFyCiMgQGV4aXRjb2RlICogd3NsdmFyIGV4aXQgY29kZQojIEBzdGRvdXQgd3NsdmFyIHN0ZG91dAojIEByZXF1aXJlIExpbnV4OjpXc2w6OnJlcXVpcmVXc2wKTGludXg6OldzbDo6b3JpZ2luYWxXc2x2YXIoKSB7CiAgd3NsdmFyICIkQCIgfCBzZWQgLXogJyQgcy9bXHJcbl0kLy8nCn0KCiMgQGRlc2NyaXB0aW9uIERpc3BsYXkgbWVzc2FnZSB1c2luZyBza2lwIGNvbG9yICh5ZWxsb3cpCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6ZGlzcGxheVNraXBwZWQoKSB7CiAgaWYgKChCQVNIX0ZSQU1FV09SS19ESVNQTEFZX0xFVkVMID49IF9fTEVWRUxfSU5GTykpOyB0aGVuCiAgICBlY2hvIC1lICIke19fU0tJUFBFRF9DT0xPUn1TS0lQUEVEIC0gJHsxfSR7X19SRVNFVF9DT0xPUn0iID4mMgogIGZpCiAgTG9nOjpsb2dTa2lwcGVkICIkMSIKfQoKIyBAZGVzY3JpcHRpb24gRGlzcGxheSBtZXNzYWdlIHVzaW5nIHN1Y2Nlc3MgY29sb3IgKGJnIGdyZWVuL2ZnIHdoaXRlKQojIEBhcmcgJDEgbWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQpMb2c6OmRpc3BsYXlTdWNjZXNzKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfRElTUExBWV9MRVZFTCA+PSBfX0xFVkVMX0lORk8pKTsgdGhlbgogICAgZWNobyAtZSAiJHtfX1NVQ0NFU1NfQ09MT1J9U1VDQ0VTUyAtICR7MX0ke19fUkVTRVRfQ09MT1J9IiA+JjIKICBmaQogIExvZzo6bG9nU3VjY2VzcyAiJDEiCn0KCiMgQGRlc2NyaXB0aW9uIERpc3BsYXkgbWVzc2FnZSB1c2luZyB3YXJuaW5nIGNvbG9yICh5ZWxsb3cpCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6ZGlzcGxheVdhcm5pbmcoKSB7CiAgaWYgKChCQVNIX0ZSQU1FV09SS19ESVNQTEFZX0xFVkVMID49IF9fTEVWRUxfV0FSTklORykpOyB0aGVuCiAgICBlY2hvIC1lICIke19fV0FSTklOR19DT0xPUn1XQVJOICAgIC0gJHsxfSR7X19SRVNFVF9DT0xPUn0iID4mMgogIGZpCiAgTG9nOjpsb2dXYXJuaW5nICIkMSIKfQoKIyBAZGVzY3JpcHRpb24gbG9hZCBjb2xvcnMgdGhlbWUgY29uc3RhbnRzCiMgQHdhcm5pbmcgaWYgdHR5IG5vdCBvcGVuZWQsIG5vQ29sb3IgdGhlbWUgd2lsbCBiZSBjaG9zZW4KIyBAYXJnICQxIHRoZW1lOlN0cmluZyB0aGUgdGhlbWUgdG8gdXNlIChkZWZhdWx0LCBub0NvbG9yKQojIEBhcmcgJEAgYXJnczpTdHJpbmdbXQojIEBzZXQgX19FUlJPUl9DT0xPUiBTdHJpbmcgaW5kaWNhdGUgZXJyb3Igc3RhdHVzCiMgQHNldCBfX0lORk9fQ09MT1IgU3RyaW5nIGluZGljYXRlIGluZm8gc3RhdHVzCiMgQHNldCBfX1NVQ0NFU1NfQ09MT1IgU3RyaW5nIGluZGljYXRlIHN1Y2Nlc3Mgc3RhdHVzCiMgQHNldCBfX1dBUk5JTkdfQ09MT1IgU3RyaW5nIGluZGljYXRlIHdhcm5pbmcgc3RhdHVzCiMgQHNldCBfX1NLSVBQRURfQ09MT1IgU3RyaW5nIGluZGljYXRlIHNraXBwZWQgc3RhdHVzCiMgQHNldCBfX0RFQlVHX0NPTE9SIFN0cmluZyBpbmRpY2F0ZSBkZWJ1ZyBzdGF0dXMKIyBAc2V0IF9fSEVMUF9DT0xPUiBTdHJpbmcgaW5kaWNhdGUgaGVscCBzdGF0dXMKIyBAc2V0IF9fVEVTVF9DT0xPUiBTdHJpbmcgbm90IHVzZWQKIyBAc2V0IF9fVEVTVF9FUlJPUl9DT0xPUiBTdHJpbmcgbm90IHVzZWQKIyBAc2V0IF9fSEVMUF9USVRMRV9DT0xPUiBTdHJpbmcgdXNlZCB0byBkaXNwbGF5IGhlbHAgdGl0bGUgaW4gaGVscCBzdHJpbmdzCiMgQHNldCBfX0hFTFBfT1BUSU9OX0NPTE9SIFN0cmluZyB1c2VkIHRvIGRpc3BsYXkgaGlnaGxpZ2h0IG9wdGlvbnMgaW4gaGVscCBzdHJpbmdzCiMKIyBAc2V0IF9fUkVTRVRfQ09MT1IgU3RyaW5nIHJlc2V0IGRlZmF1bHQgY29sb3IKIwojIEBzZXQgX19IRUxQX0VYQU1QTEUgU3RyaW5nIHRvIHJlbW92ZQojIEBzZXQgX19IRUxQX1RJVExFIFN0cmluZyB0byByZW1vdmUKIyBAc2V0IF9fSEVMUF9OT1JNQUwgU3RyaW5nIHRvIHJlbW92ZQojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKVUk6OnRoZW1lKCkgewogIGxvY2FsIHRoZW1lPSIkezEtZGVmYXVsdH0iCiAgaWYgW1sgISAiJHt0aGVtZX0iID1+IC1mb3JjZSQgXV0gJiYgISBBc3NlcnQ6OnR0eTsgdGhlbgogICAgdGhlbWU9Im5vQ29sb3IiCiAgZmkKICBjYXNlICIke3RoZW1lfSIgaW4KICAgIGRlZmF1bHQgfCBkZWZhdWx0LWZvcmNlKQogICAgICB0aGVtZT0iZGVmYXVsdCIKICAgICAgOzsKICAgIG5vQ29sb3IpIDs7CiAgICAqKQogICAgICBMb2c6OmZhdGFsICJpbnZhbGlkIHRoZW1lIHByb3ZpZGVkIgogICAgICA7OwogIGVzYWMKICBpZiBbWyAiJHt0aGVtZX0iID0gImRlZmF1bHQiIF1dOyB0aGVuCiAgICBCQVNIX0ZSQU1FV09SS19USEVNRT0iZGVmYXVsdCIKICAgICMgY2hlY2sgY29sb3JzIGFwcGxpY2FibGUgaHR0cHM6Ly9taXNjLmZsb2dpc29mdC5jb20vYmFzaC90aXBfY29sb3JzX2FuZF9mb3JtYXR0aW5nCiAgICBfX0VSUk9SX0NPTE9SPSdcZVszMW0nICAgICAgICAgIyBSZWQKICAgIF9fSU5GT19DT0xPUj0nXGVbNDRtJyAgICAgICAgICAjIHdoaXRlIG9uIGxpZ2h0Qmx1ZQogICAgX19TVUNDRVNTX0NPTE9SPSdcZVszMm0nICAgICAgICMgR3JlZW4KICAgIF9fV0FSTklOR19DT0xPUj0nXGVbMzNtJyAgICAgICAjIFllbGxvdwogICAgX19TS0lQUEVEX0NPTE9SPSdcZVszM20nICAgICAgICMgWWVsbG93CiAgICBfX0RFQlVHX0NPTE9SPSdcZVszN20nICAgICAgICAgIyBHcmV5CiAgICBfX0hFTFBfQ09MT1I9J1xlWzc7NDk7MzNtJyAgICAgIyBCbGFjayBvbiBHb2xkCiAgICBfX1RFU1RfQ09MT1I9J1xlWzEwMG0nICAgICAgICAgIyBMaWdodCBtYWdlbnRhCiAgICBfX1RFU1RfRVJST1JfQ09MT1I9J1xlWzQxbScgICAgIyB3aGl0ZSBvbiByZWQKICAgIF9fSEVMUF9USVRMRV9DT0xPUj0iXGVbMTszN20iICAjIEJvbGQKICAgIF9fSEVMUF9PUFRJT05fQ09MT1I9IlxlWzE7MzRtIiAjIEJsdWUKICAgICMgSW50ZXJuYWw6IHJlc2V0IGNvbG9yCiAgICBfX1JFU0VUX0NPTE9SPSdcZVswbScgIyBSZXNldCBDb2xvcgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTU1LFNDMjAzNAogICAgX19IRUxQX0VYQU1QTEU9IiQoZWNobyAtZSAiXGVbMjs5N20iKSIKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1NSxTQzIwMzQKICAgIF9fSEVMUF9USVRMRT0iJChlY2hvIC1lICJcZVsxOzM3bSIpIgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTU1LFNDMjAzNAogICAgX19IRUxQX05PUk1BTD0iJChlY2hvIC1lICJcMDMzWzBtIikiCiAgZWxzZQogICAgQkFTSF9GUkFNRVdPUktfVEhFTUU9Im5vQ29sb3IiCiAgICAjIGNoZWNrIGNvbG9ycyBhcHBsaWNhYmxlIGh0dHBzOi8vbWlzYy5mbG9naXNvZnQuY29tL2Jhc2gvdGlwX2NvbG9yc19hbmRfZm9ybWF0dGluZwogICAgX19FUlJPUl9DT0xPUj0nJwogICAgX19JTkZPX0NPTE9SPScnCiAgICBfX1NVQ0NFU1NfQ09MT1I9JycKICAgIF9fV0FSTklOR19DT0xPUj0nJwogICAgX19TS0lQUEVEX0NPTE9SPScnCiAgICBfX0RFQlVHX0NPTE9SPScnCiAgICBfX0hFTFBfQ09MT1I9JycKICAgIF9fVEVTVF9DT0xPUj0nJwogICAgX19URVNUX0VSUk9SX0NPTE9SPScnCiAgICBfX0hFTFBfVElUTEVfQ09MT1I9JycKICAgIF9fSEVMUF9PUFRJT05fQ09MT1I9JycKICAgICMgSW50ZXJuYWw6IHJlc2V0IGNvbG9yCiAgICBfX1JFU0VUX0NPTE9SPScnCiAgICBfX0hFTFBfRVhBTVBMRT0nJwogICAgX19IRUxQX1RJVExFPScnCiAgICBfX0hFTFBfTk9STUFMPScnCiAgZmkKfQoKIyBAZGVzY3JpcHRpb24gZW5zdXJlIGxpbnV4IGRpc3RyaWJ1dGlvbiBpcyB1YnVudHUKIyBAZXhpdGNvZGUgMSBpZiBsaW51eCBkaXN0cmlidXRpb24gaXMgbm90IHVidW50dQpMaW51eDo6cmVxdWlyZVVidW50dSgpIHsKICBpZiAhIEFycmF5Ojpjb250YWlucyAiJChMaW51eDo6Z2V0RGlzdHJpYnV0b3JJZCkiICJVYnVudHUiICJEZWJpYW4iOyB0aGVuCiAgICBMb2c6OmZhdGFsICJ0aGlzIHNjcmlwdCBzaG91bGQgYmUgZXhlY3V0ZWQgdW5kZXIgVWJ1bnR1IG9yIERlYmlhbiBPUyIKICBmaQp9CgojIEBkZXNjcmlwdGlvbiBlbnN1cmUgbGludXggcnVucyB1bmRlciB3c2wKIyBAZW52IFdTTF9HQVJCQUdFX0NPTExFQ1QgaW50IDAgdG8gZGlzYWJsZSBnYXJiYWdlIGNvbGxlY3Qgb2YgY2FjaGUgZmlsZXMKIyBAZXhpdGNvZGUgMSBpZiBsaW51eCBkb2VzIG5vdCBydW4gdW5kZXIgd3NsCkxpbnV4OjpXc2w6OnJlcXVpcmVXc2woKSB7CiAgQXNzZXJ0Ojp3c2wgfHwgcmV0dXJuIDEKICBpZiBbWyAiJHtXU0xfR0FSQkFHRV9DT0xMRUNUOi0xfSIgPSAiMSIgXV07IHRoZW4KICAgIGxvY2FsIHRlbXBFbnZEaXIKICAgIHRlbXBFbnZEaXI9IiR7V1NMX1RNUERJUjotJHtQRVJTSVNURU5UX1RNUERJUjotL3RtcH19IgogICAgRmlsZTo6Z2FyYmFnZUNvbGxlY3QgIiR7dGVtcEVudkRpcn0vYmFzaF90b29sc193c2xwYXRoXyQoaWQgLXVuKSIgIjEiCiAgICB0ZW1wRW52RGlyPSIke1dTTF9UTVBESVI6LSR7UEVSU0lTVEVOVF9UTVBESVI6LS90bXB9fSIKICAgIEZpbGU6OmdhcmJhZ2VDb2xsZWN0ICIke3RlbXBFbnZEaXJ9L2Jhc2hfdG9vbHNfd3NsdmFyXyQoaWQgLXVuKSIgIjEiCiAgZmkKfQoKIyBAZGVzY3JpcHRpb24gZW5zdXJlIGNvbW1hbmQganEgaXMgYXZhaWxhYmxlCiMgQGV4aXRjb2RlIDEgaWYganEgY29tbWFuZCBub3QgYXZhaWxhYmxlCiMgQHN0ZGVyciBkaWFnbm9zdGljcyBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQKTGludXg6OnJlcXVpcmVKcUNvbW1hbmQoKSB7CiAgQXNzZXJ0Ojpjb21tYW5kRXhpc3RzIGpxCn0KCiMgQGRlc2NyaXB0aW9uIGNoZWNrIGlmIGNvbW1hbmQgc3BlY2lmaWVkIGV4aXN0cyBvciByZXR1cm4gMQojIHdpdGggZXJyb3IgYW5kIG1lc3NhZ2UgaWYgbm90CiMKIyBAYXJnICQxIGNvbW1hbmROYW1lOlN0cmluZyBvbiB3aGljaCBleGlzdGVuY2UgbXVzdCBiZSBjaGVja2VkCiMgQGFyZyAkMiBoZWxwSWZOb3RFeGlzdHM6U3RyaW5nIGEgaGVscCBjb21tYW5kIHRvIGRpc3BsYXkgaWYgdGhlIGNvbW1hbmQgZG9lcyBub3QgZXhpc3QKIwojIEBleGl0Y29kZSAxIGlmIHRoZSBjb21tYW5kIHNwZWNpZmllZCBkb2VzIG5vdCBleGlzdAojIEBzdGRlcnIgZGlhZ25vc3RpYyBpbmZvcm1hdGlvbiArIGhlbHAgaWYgc2Vjb25kIGFyZ3VtZW50IGlzIHByb3ZpZGVkCkFzc2VydDo6Y29tbWFuZEV4aXN0cygpIHsKICBsb2NhbCBjb21tYW5kTmFtZT0iJDEiCiAgbG9jYWwgaGVscElmTm90RXhpc3RzPSIkMiIKCiAgIiR7QkFTSF9GUkFNRVdPUktfQ09NTUFORDotY29tbWFuZH0iIC12ICIke2NvbW1hbmROYW1lfSIgPi9kZXYvbnVsbCAyPi9kZXYvbnVsbCB8fCB7CiAgICBMb2c6OmRpc3BsYXlFcnJvciAiJHtjb21tYW5kTmFtZX0gaXMgbm90IGluc3RhbGxlZCwgcGxlYXNlIGluc3RhbGwgaXQiCiAgICBpZiBbWyAtbiAiJHtoZWxwSWZOb3RFeGlzdHN9IiBdXTsgdGhlbgogICAgICBMb2c6OmRpc3BsYXlJbmZvICIke2hlbHBJZk5vdEV4aXN0c30iCiAgICBmaQogICAgcmV0dXJuIDEKICB9CiAgcmV0dXJuIDAKfQoKIyBAZGVzY3JpcHRpb24gY2hlY2sgaWYgdHR5IChpbnRlcmFjdGl2ZSBtb2RlKSBpcyBhY3RpdmUKIyBAbm9hcmdzCiMgQGV4aXRjb2RlIDEgaWYgdHR5IG5vdCBhY3RpdmUKIyBAZW52IE5PTl9JTlRFUkFDVElWRSBpZiAxIGNvbnNpZGVyIGFzIG5vdCBpbnRlcmFjdGl2ZSBldmVuIGlmIGVudmlyb25tZW50IGlzIGludGVyYWN0aXZlCiMgQGVudiBJTlRFUkFDVElWRSBpZiAxIGNvbnNpZGVyIGFzIGludGVyYWN0aXZlIGV2ZW4gaWYgZW52aXJvbm1lbnQgaXMgbm90IGludGVyYWN0aXZlCkFzc2VydDo6dHR5KCkgewogIGlmIFtbICIke05PTl9JTlRFUkFDVElWRTotMH0iID0gIjEiIF1dOyB0aGVuCiAgICByZXR1cm4gMQogIGZpCiAgaWYgW1sgIiR7SU5URVJBQ1RJVkU6LTB9IiA9ICIxIiBdXTsgdGhlbgogICAgcmV0dXJuIDAKICBmaQogICMgY2hlY2sgaWYgc3Rkb3V0IG9yIHN0ZGVyciBpcyBjb25uZWN0ZWQgdG8gdGVybWluYWwKICBbWyAtdCAxIHx8IC10IDIgXV0KfQoKIyBAZGVzY3JpcHRpb24gZGVsZXRlIGZpbGVzIG9sZGVyIHRoYW4gbiBkYXlzIGluIGdpdmVuIHBhdGgKIyBAd2FybmluZyB1c2UgdGhpcyBmdW5jdGlvbiB3aXRoIGNhdXRpb24gYXMgaXQgd2lsbCBkZWxldGUgYWxsIGZpbGVzIGluIGdpdmVuIHBhdGggd2l0aG91dCBhbnkgcHJvbXB0CiMgQGFyZyAkMSBwYXRoOlN0cmluZyB0aGUgZGlyZWN0b3J5IGluIHdoaWNoIGZpbGVzIHdpbGwgYmUgZGVsZXRlZCBvciB0aGUgZmlsZSB0byBkZWxldGUKIyBAYXJnICQyIG10aW1lOlN0cmluZyBleHBpcmF0aW9uIHRpbWUgaW4gZGF5cyAoZWc6IDEgbWVhbnMgMSBkYXkpIChkZWZhdWx0IHZhbHVlOiAxKS4gRWc6ICsxIG1hdGNoIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIGFjY2Vzc2VkIGF0IGxlYXN0IHR3byBkYXlzIGFnbyAocm91bmRpbmcgZWZmZWN0KQojIEBhcmcgJDMgbWF4ZGVwdGg6aW50IERlc2NlbmQgYXQgbW9zdCBsZXZlbHMgKGEgbm9uLW5lZ2F0aXZlIGludGVnZXIpIGxldmVscyBvZiBkaXJlY3RvcmllcyBiZWxvdyB0aGUgc3RhcnRpbmctcG9pbnRzLiAoZGVmYXVsdCB2YWx1ZTogMSkKIyBAZXhpdGNvZGUgMSBpZiBwYXRoIG5vdCBwcm92aWRlZCBvciBlbXB0eQojIEBleGl0Y29kZSAqIGZpbmQgY29tbWFuZCBmYWlsdXJlIGNvZGUKIyBAc3RkZXJyIGZpbmQgb3V0cHV0IG9uIGVycm9yIG9yIGRpYWdub3N0aWNzIGxvZ3MKIyBAc2VlIG1hbiBmaW5kIGF0aW1lCkZpbGU6OmdhcmJhZ2VDb2xsZWN0KCkgewogIGxvY2FsIHBhdGg9IiQxIgogIGxvY2FsIG10aW1lPSIkMiIKICBsb2NhbCBtYXhkZXB0aD0iJHszOi0xfSIKCiAgaWYgW1sgLXogIiR7cGF0aH0iIF1dOyB0aGVuCiAgICByZXR1cm4gMQogIGZpCgogIGlmIFtbICEgLWUgIiR7cGF0aH0iIF1dOyB0aGVuCiAgICAjIHBhdGggYWxyZWFkeSByZW1vdmVkCiAgICByZXR1cm4gMAogIGZpCgogIExvZzo6ZGlzcGxheUluZm8gIkdhcmJhZ2UgY29sbGVjdCBmaWxlcyBvbGRlciB0aGFuICR7bXRpbWV9IGRheXMgaW4gcGF0aCAke3BhdGh9IHdpdGggbWF4IGRlcHRoICR7bWF4ZGVwdGh9IgogIGZpbmQgIiR7cGF0aH0iIC1kZXB0aCAtbWF4ZGVwdGggIiR7bWF4ZGVwdGh9IiAtdHlwZSBmIC1tdGltZSAiJHttdGltZX0iIC1wcmludCAtZGVsZXRlCn0KCiMgQGRlc2NyaXB0aW9uIENvbXB1dGUgYSBjYWNoZSBmcm9tIHdzbHBhdGggb3B0aW9ucwojIEBhcmcgJEAgYXJnczpTdHJpbmdbXSBhcmd1bWVudHMgcGFzc2VkIHRvIHdzbHBhdGgKIyBAc3RkZXJyIGRpYWdub3N0aWNzIGluZm9ybWF0aW9uIGlzIGRpc3BsYXllZAojIEBzdGRvdXQgdGhlIGNhY2hlIGtleSBkZWR1Y2VkIGZyb20gdGhlIG9wdGlvbnMKIyBAcmVxdWlyZSBMaW51eDo6V3NsOjpyZXF1aXJlV3NsCiMgQGZlYXR1cmUgY2FjaGUKIyBAaW50ZXJuYWwKTGludXg6OldzbDo6Z2V0S2V5RnJvbVdzbHBhdGhPcHRpb25zKCkgewogIGxvY2FsIG9wdGlvbnMKICBvcHRpb25zPSQoZ2V0b3B0IC1vICJhdXdtIiAtLSAiJEAiIDI+L2Rldi9udWxsKSB8fCB7CiAgICBMb2c6OmRpc3BsYXlFcnJvciAiaW52YWxpZCBvcHRpb25zIHNwZWNpZmllZCIKICAgIHJldHVybiAxCiAgfQogIGxvY2FsIGtleT0id3NscGF0aCIKICBldmFsIHNldCAtLSAiJHtvcHRpb25zfSIKICB3aGlsZSB0cnVlOyBkbwogICAgY2FzZSAiJDEiIGluCiAgICAgIC1hIHwgLXUgfCAtdyB8IC1tKQogICAgICAgIGtleT0iJHtrZXl9JDEiCiAgICAgICAgOzsKICAgICAgLS0pCiAgICAgICAgc2hpZnQgfHwgdHJ1ZQogICAgICAgIGJyZWFrCiAgICAgICAgOzsKICAgICAgKikKICAgICAgICBzaGlmdCB8fCB0cnVlCiAgICAgICAgTG9nOjpkaXNwbGF5V2FybmluZyAiVW5rbm93biBrZXkgJDEiCiAgICAgICAgOzsKICAgIGVzYWMKICAgIHNoaWZ0IHx8IHRydWUKICBkb25lCiAgZWNobyAtRSAiJHtrZXl9XyQxIgp9CgojIEBkZXNjcmlwdGlvbiBjYWxsIHNpbXBseSBvcmlnaW5hbCB3c2xwYXRoIGNvbW1hbmQKIyBAYXJnICRAIGFyZ3M6U3RyaW5nW10gYXJncyB0byBwYXNzIHRvIHdzbHBhdGgKIyBAZXhpdGNvZGUgKiB3c2xwYXRoIGV4aXQgY29kZQojIEBzdGRvdXQgd3NscGF0aCBzdGRvdXQKIyBAcmVxdWlyZSBMaW51eDo6V3NsOjpyZXF1aXJlV3NsCkxpbnV4OjpXc2w6Om9yaWdpbmFsV3NscGF0aCgpIHsKICB3c2xwYXRoICIkQCIKfQoKIyBAZGVzY3JpcHRpb24gcmV0cmlldmUgbGludXggZGlzdHJpYnV0b3IgaWQKIyBAbm9hcmdzCiMgQGV4aXRjb2RlIDEgaWYgbHNiX3JlbGVhc2UgZmFpbHMgb3Igbm90IGZvdW5kCiMgQHN0ZG91dCB0aGUgbGludXggZGlzdHJpYnV0b3IgaWQKTGludXg6OmdldERpc3RyaWJ1dG9ySWQoKSB7CiAgbHNiX3JlbGVhc2UgLWEgMj4vZGV2L251bGwgfCBzZWQgLUVuICdzL0Rpc3RyaWJ1dG9yIElEOlsgXHRdKyguKykvXDEvcCcKfQoKIyBAZGVzY3JpcHRpb24gbG9nIG1lc3NhZ2UgdG8gZmlsZQojIEBhcmcgJDEgbWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQpMb2c6OmxvZ1NraXBwZWQoKSB7CiAgaWYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgPj0gX19MRVZFTF9JTkZPKSk7IHRoZW4KICAgIExvZzo6bG9nTWVzc2FnZSAiJHsyOi1TS0lQUEVEfSIgIiQxIgogIGZpCn0KCiMgQGRlc2NyaXB0aW9uIGxvZyBtZXNzYWdlIHRvIGZpbGUKIyBAYXJnICQxIG1lc3NhZ2U6U3RyaW5nIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXkKTG9nOjpsb2dTdWNjZXNzKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMID49IF9fTEVWRUxfSU5GTykpOyB0aGVuCiAgICBMb2c6OmxvZ01lc3NhZ2UgIiR7MjotU1VDQ0VTU30iICIkMSIKICBmaQp9CgojIEBkZXNjcmlwdGlvbiBsb2cgbWVzc2FnZSB0byBmaWxlCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6bG9nV2FybmluZygpIHsKICBpZiAoKEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTCA+PSBfX0xFVkVMX1dBUk5JTkcpKTsgdGhlbgogICAgTG9nOjpsb2dNZXNzYWdlICIkezI6LVdBUk5JTkd9IiAiJDEiCiAgZmkKfQoKIyBGVU5DVElPTlMKCmZhY2FkZV9tYWluX2VtYmVkRnJhbWV3b3JrRnVuY3Rpb25iaW5GaWxldHBsKCkgewojIFJFUVVJUkVTCkVudjo6cmVxdWlyZUxvYWQKVUk6OnJlcXVpcmVUaGVtZQpMaW51eDo6cmVxdWlyZVVidW50dQpMaW51eDo6V3NsOjpyZXF1aXJlV3NsCkxvZzo6cmVxdWlyZUxvYWQKTGludXg6OnJlcXVpcmVKcUNvbW1hbmQKQ29tcGlsZXI6OkZhY2FkZTo6cmVxdWlyZUNvbW1hbmRCaW5EaXIKCmlmIEFzc2VydDo6ZnVuY3Rpb25FeGlzdHMgaW5pdEZhY2FkZTsgdGhlbgogIGluaXRGYWNhZGUKZmkKRW5naW5lOjpDb25maWc6OmxvYWRDb25maWcKIyBAZGVzY3JpcHRpb24gY3JlYXRlIHN1ZG9lciBmaWxlIGFuZCBhZGQgdHJhcHMgdG8gcmVtb3ZlIGl0IGF0IHRoZSBlbmQKIyBAYXJnICQxIHN1ZG9lckZpbGU6U3RyaW5nIHRoZSBmaWxlIHBhdGggdG8gY3JlYXRlCiMgQGVudiBVU0VSTkFNRQojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIzMTcKbG9jYWwgc3Vkb2VyRmlsZT0iJHtTVURPRVJfRklMRV9QUkVGSVh9L2V0Yy9zdWRvZXJzLmQvYmFzaC1kZXYtZW52LW5vLXBhc3N3b3JkIgppZiBbWyAtZiAiJHtzdWRvZXJGaWxlfSIgXV07IHRoZW4KICAjIHN1ZG9lckZpbGUgcHJvYmFibHkgYWxyZWFkeSBtYW5hZ2VkIGJ5IHBhcmVudCBzY3JpcHQKICB0cnVlCmVsc2UKICBjbGVhblN1ZG9lcigpIHsKICAgIGlmIFtbIC1mICIke3N1ZG9lckZpbGV9IiBdXTsgdGhlbgogICAgICAke1NVRE86LXN1ZG99IHJtIC1mICIke3N1ZG9lckZpbGV9IiB8fCB0cnVlCiAgICBmaQogIH0KICB0cmFwIGNsZWFuU3Vkb2VyIEVYSVQgSFVQIFFVSVQgQUJSVCBURVJNCgogIExvZzo6ZGlzcGxheUluZm8gIkNyZWF0aW5nIHN1ZG9lciBmaWxlIgogIGVjaG8gIiR7VVNFUk5BTUV9IEFMTD0oQUxMKSBOT1BBU1NXRDogQUxMIiB8CiAgICAke1NVRE86LXN1ZG99IHRlZSAiJHtzdWRvZXJGaWxlfSIgPi9kZXYvbnVsbAogICR7U1VETzotc3Vkb30gY2htb2QgMDQ0MCAiJHtzdWRvZXJGaWxlfSIKZmkKCiMgQHJlcXVpcmUgQ29tcGlsZXI6OkZhY2FkZTo6cmVxdWlyZUNvbW1hbmRCaW5EaXIKCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1NCxTQzIwMTYKZnVuY3Rpb25Ub0NhbGw9J0dpdGh1Yjo6dXBncmFkZVJlbGVhc2UnCiIke2Z1bmN0aW9uVG9DYWxsfSIgIiRAIgoKfQoKZmFjYWRlX21haW5fZW1iZWRGcmFtZXdvcmtGdW5jdGlvbmJpbkZpbGV0cGwgIiRAIgo="

Compiler::Embed::extractFileFromBase64 \
  "${embed_function_GithubUpgradeRelease}" \
  "${encoded_binary_file_GithubUpgradeRelease}"

facade_main_Fzfsh() {
# REQUIRES
Linux::requireUbuntu
Env::requireLoad
UI::requireTheme
Git::requireGitCommand
Log::requireLoad
Linux::Wsl::requireWsl
Compiler::Embed::requireEmbedBinDir
Compiler::Facade::requireCommandBinDir

if Assert::functionExists initFacade; then
  initFacade
fi
Engine::Config::loadConfig
# @description create sudoer file and add traps to remove it at the end
# @arg $1 sudoerFile:String the file path to create
# @env USERNAME
# shellcheck disable=SC2317
local sudoerFile="${SUDOER_FILE_PREFIX}/etc/sudoers.d/bash-dev-env-no-password"
if [[ -f "${sudoerFile}" ]]; then
  # sudoerFile probably already managed by parent script
  true
else
  cleanSudoer() {
    if [[ -f "${sudoerFile}" ]]; then
      ${SUDO:-sudo} rm -f "${sudoerFile}" || true
    fi
  }
  trap cleanSudoer EXIT HUP QUIT ABRT TERM

  Log::displayInfo "Creating sudoer file"
  echo "${USERNAME} ALL=(ALL) NOPASSWD: ALL" |
    ${SUDO:-sudo} tee "${sudoerFile}" >/dev/null
  ${SUDO:-sudo} chmod 0440 "${sudoerFile}"
fi

# @require Compiler::Facade::requireCommandBinDir
# ROOT_DIR_RELATIVE_TO_BIN_DIR=..
# FACADE
# IMPLEMENT InstallScripts::interface
# EMBED Github::upgradeRelease as githubUpgradeRelease

declare -a BASH_FRAMEWORK_ARGV_FILTERED=()

copyrightCallback() {
  if [[ -z "${copyrightBeginYear}" ]]; then
    copyrightBeginYear="$(date +%Y)"
  fi
  echo "Copyright (c) ${copyrightBeginYear}-now François Chastanet"
}

# shellcheck disable=SC2317 # if function is overridden
updateArgListInfoVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(--verbose)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListDebugVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(-vv)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListTraceVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(-vvv)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListEnvFileCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListLogLevelCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListDisplayLevelCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListNoColorCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(--no-color)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListThemeCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListQuietCallback() { :; }

# shellcheck disable=SC2317 # if function is overridden
optionHelpCallback() {
  installScriptCommand help
  exit 0
}

# shellcheck disable=SC2317 # if function is overridden
optionVersionCallback() {
  echo "${SCRIPT_NAME} version 1.0"
  exit 0
}

# shellcheck disable=SC2317 # if function is overridden
optionEnvFileCallback() {
  local envFile="$2"
  Log::displayWarning "Command ${SCRIPT_NAME} - Option --env-file is deprecated and will be removed in the future"
  if [[ ! -f "${envFile}" || ! -r "${envFile}" ]]; then
    Log::displayError "Command ${SCRIPT_NAME} - Option --env-file - File '${envFile}' doesn't exist"
    exit 1
  fi
}

# shellcheck disable=SC2317 # if function is overridden
optionInfoVerboseCallback() {
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='--verbose'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_INFO}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_INFO}" >> "${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionDebugVerboseCallback() {
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='-vv'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_DEBUG}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_DEBUG}" >> "${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionTraceVerboseCallback() {
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='-vvv'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_TRACE}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_DEBUG}" >> "${overrideEnvFile}"
}

getLevel() {
  local levelName="$1"
  case "${levelName^^}" in
    OFF)
      echo "${__LEVEL_OFF}"
      ;;
    ERR | ERROR)
      echo "${__LEVEL_ERROR}"
      ;;
    WARN | WARNING)
      echo "${__LEVEL_WARNING}"
      ;;
    INFO)
      echo "${__LEVEL_INFO}"
      ;;
    DEBUG | TRACE)
      echo "${__LEVEL_DEBUG}"
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${level}"
      return 1
  esac
}

getVerboseLevel() {
  local levelName="$1"
  case "${levelName^^}" in
    OFF)
      echo "${__VERBOSE_LEVEL_OFF}"
      ;;
    ERR | ERROR | WARN | WARNING | INFO)
      echo "${__VERBOSE_LEVEL_INFO}"
      ;;
    DEBUG)
      echo "${__VERBOSE_LEVEL_DEBUG}"
      ;;
    TRACE)
      echo "${__VERBOSE_LEVEL_TRACE}"
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${level}"
      return 1
  esac
}

# shellcheck disable=SC2317 # if function is overridden
optionDisplayLevelCallback() {
  local level="$2"
  local logLevel verboseLevel
  logLevel="$(getLevel "${level}")"
  verboseLevel="$(getVerboseLevel "${level}")"
  BASH_FRAMEWORK_ARGS_VERBOSE=${verboseLevel}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${logLevel}" >> "${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionLogLevelCallback() {
  local level="$2"
  local logLevel verboseLevel
  logLevel="$(getLevel "${level}")"
  verboseLevel="$(getVerboseLevel "${level}")"
  BASH_FRAMEWORK_ARGS_VERBOSE=${verboseLevel}
  echo "BASH_FRAMEWORK_LOG_LEVEL=${logLevel}" >> "${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionLogFileCallback() {
  local logFile="$2"
  echo "BASH_FRAMEWORK_LOG_FILE='${logFile}'" >> "${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionQuietCallback() {
  echo "BASH_FRAMEWORK_QUIET_MODE=1" >> "${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionNoColorCallback() {
  UI::theme "noColor"
}

# shellcheck disable=SC2317 # if function is overridden
optionThemeCallback() {
  UI::theme "$2"
}

displayConfig() {
  echo "Config"
  UI::drawLine "-"
  local var
  while read -r var; do
    printf '%-40s = %s\n' "${var}" "$(declare -p "${var}" | sed -E -e 's/^[^=]+=(.*)/\1/')"
  done < <(typeset -p | awk 'match($3, "^(BASH_FRAMEWORK_[^=]+)=", m) { print m[1] }' | sort)
  exit 0
}

optionBashFrameworkConfigCallback() {
  if [[ ! -f "$2" ]]; then
    Log::fatal "Command ${SCRIPT_NAME} - Bash framework config file '$2' does not exists"
  fi
}

defaultFrameworkConfig="$(
  cat <<'EOF'
# copied from src/_includes/.framework-config.default
# shellcheck disable=SC2034

REAL_SCRIPT_FILE="${REAL_SCRIPT_FILE:-$(readlink -e "$(realpath "${BASH_SOURCE[0]}")")}"
FRAMEWORK_ROOT_DIR="${FRAMEWORK_ROOT_DIR:-$(cd "$(readlink -e "${REAL_SCRIPT_FILE%/*}")/../.." && pwd -P)}"
FRAMEWORK_SRC_DIR="${FRAMEWORK_SRC_DIR:-${FRAMEWORK_ROOT_DIR}/src}"
FRAMEWORK_BIN_DIR="${FRAMEWORK_BIN_DIR:-${FRAMEWORK_ROOT_DIR}/bin}"
FRAMEWORK_VENDOR_DIR="${FRAMEWORK_VENDOR_DIR:-${FRAMEWORK_ROOT_DIR}/vendor}"
FRAMEWORK_VENDOR_BIN_DIR="${FRAMEWORK_VENDOR_BIN_DIR:-${FRAMEWORK_ROOT_DIR}/vendor/bin}"

# describe the functions that will be skipped from being imported
FRAMEWORK_FUNCTIONS_IGNORE_REGEXP="${FRAMEWORK_FUNCTIONS_IGNORE_REGEXP:-^(Namespace::functions|Functions::myFunction|Namespace::requireSomething|Acquire::ForceIPv4)$}"
# describe the files that do not contain function to be imported
NON_FRAMEWORK_FILES_REGEXP="${NON_FRAMEWORK_FILES_REGEXP:-(^bin/|.framework-config|.bats$|/testsData/|^manualTests/|/_.sh$|/ZZZ.sh$|/__all.sh$|^src/_binaries|^src/_includes|^src/batsHeaders.sh$|^src/_standalone)}"
# describe the files that are allowed to not have an associated bats file
BATS_FILE_NOT_NEEDED_REGEXP="${BATS_FILE_NOT_NEEDED_REGEXP:-(^bin/|.framework-config|.bats$|/testsData/|^manualTests/|/_.sh$|/ZZZ.sh$|/__all.sh$|^src/batsHeaders.sh$|^src/_includes)}"
# describe the files that are allowed to not have a function matching the filename
FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP="${FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP:-^bin/|^\.framework-config$|\.tpl$|/testsData/|^manualTests/|\.bats$}"
# Source directories
if [[ ! -v FRAMEWORK_SRC_DIRS ]]; then
  FRAMEWORK_SRC_DIRS=(
    "${FRAMEWORK_ROOT_DIR}/src"
  )
fi

# export here all the variables that will be used in your templates
export REPOSITORY_URL="${REPOSITORY_URL:-https://github.com/fchastanet/bash-tools-framework}"

BASH_FRAMEWORK_THEME="${BASH_FRAMEWORK_THEME:-default}"
BASH_FRAMEWORK_LOG_LEVEL="${BASH_FRAMEWORK_LOG_LEVEL:-0}"
BASH_FRAMEWORK_DISPLAY_LEVEL="${BASH_FRAMEWORK_DISPLAY_LEVEL:-3}"
BASH_FRAMEWORK_LOG_FILE="${BASH_FRAMEWORK_LOG_FILE:-${FRAMEWORK_ROOT_DIR}/logs/$(basename "$0").log}"
BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION="${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION:-5}"
EOF
)"

overrideEnvFile="$(Framework::createTempFile "overrideEnvFile")"

commandOptionParseFinished() {
  # load default template framework config
  defaultEnvFile="${PERSISTENT_TMPDIR}/.framework-config"
  echo "${defaultFrameworkConfig}" > "${defaultEnvFile}"
  local -a files=("${defaultEnvFile}")
  if [[ -f "${envFile}" ]]; then
    files+=("${envFile}")
  fi
  # shellcheck disable=SC2154
  if [[ -f "${optionBashFrameworkConfig}" ]]; then
    files+=("${optionBashFrameworkConfig}")
  fi
  files+=("${overrideEnvFile}")
  Env::requireLoad "${files[@]}"
  Log::requireLoad
  # shellcheck disable=SC2154
  if [[ "${optionConfig}" = "1" ]]; then
    displayConfig
  fi
}

export SKIP_INSTALL
export SKIP_CONFIGURE
export SKIP_TEST
export SKIP_DEPENDENCIES

installScriptCommand() {
  local options_parse_cmd="$1"
  shift || true

  if [[ "${options_parse_cmd}" = "parse" ]]; then
    SKIP_CONFIGURE="0"
    local -i options_parse_optionParsedCountSKIP_CONFIGURE
    ((options_parse_optionParsedCountSKIP_CONFIGURE = 0)) || true
    SKIP_INSTALL="0"
    local -i options_parse_optionParsedCountSKIP_INSTALL
    ((options_parse_optionParsedCountSKIP_INSTALL = 0)) || true
    SKIP_TEST="0"
    local -i options_parse_optionParsedCountSKIP_TEST
    ((options_parse_optionParsedCountSKIP_TEST = 0)) || true
    SKIP_DEPENDENCIES="0"
    local -i options_parse_optionParsedCountSKIP_DEPENDENCIES
    ((options_parse_optionParsedCountSKIP_DEPENDENCIES = 0)) || true
    local -i options_parse_optionParsedCountOptionBashFrameworkConfig
    ((options_parse_optionParsedCountOptionBashFrameworkConfig = 0)) || true
    optionConfig="0"
    local -i options_parse_optionParsedCountOptionConfig
    ((options_parse_optionParsedCountOptionConfig = 0)) || true
    optionInfoVerbose="0"
    local -i options_parse_optionParsedCountOptionInfoVerbose
    ((options_parse_optionParsedCountOptionInfoVerbose = 0)) || true
    optionDebugVerbose="0"
    local -i options_parse_optionParsedCountOptionDebugVerbose
    ((options_parse_optionParsedCountOptionDebugVerbose = 0)) || true
    optionTraceVerbose="0"
    local -i options_parse_optionParsedCountOptionTraceVerbose
    ((options_parse_optionParsedCountOptionTraceVerbose = 0)) || true
    optionNoColor="0"
    local -i options_parse_optionParsedCountOptionNoColor
    ((options_parse_optionParsedCountOptionNoColor = 0)) || true
    optionTheme="default"
    local -i options_parse_optionParsedCountOptionTheme
    ((options_parse_optionParsedCountOptionTheme = 0)) || true
    optionHelp="0"
    local -i options_parse_optionParsedCountOptionHelp
    ((options_parse_optionParsedCountOptionHelp = 0)) || true
    optionVersion="0"
    local -i options_parse_optionParsedCountOptionVersion
    ((options_parse_optionParsedCountOptionVersion = 0)) || true
    optionQuiet="0"
    local -i options_parse_optionParsedCountOptionQuiet
    ((options_parse_optionParsedCountOptionQuiet = 0)) || true
    local -i options_parse_optionParsedCountOptionLogLevel
    ((options_parse_optionParsedCountOptionLogLevel = 0)) || true
    local -i options_parse_optionParsedCountOptionLogFile
    ((options_parse_optionParsedCountOptionLogFile = 0)) || true
    local -i options_parse_optionParsedCountOptionDisplayLevel
    ((options_parse_optionParsedCountOptionDisplayLevel = 0)) || true
    # shellcheck disable=SC2034
    local -i options_parse_parsedArgIndex=0
    while (($# > 0)); do
      local options_parse_arg="$1"
      local argOptDefaultBehavior=0
      case "${options_parse_arg}" in
        # Option 1/18
        # Option SKIP_CONFIGURE --skip-config|--skip-configure|--skip-configuration variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --skip-config | --skip-configure | --skip-configuration)
          # shellcheck disable=SC2034
          SKIP_CONFIGURE="1"
          if ((options_parse_optionParsedCountSKIP_CONFIGURE >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountSKIP_CONFIGURE))
          ;;
        # Option 2/18
        # Option SKIP_INSTALL --skip-install|--skip-installation variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --skip-install | --skip-installation)
          # shellcheck disable=SC2034
          SKIP_INSTALL="1"
          if ((options_parse_optionParsedCountSKIP_INSTALL >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountSKIP_INSTALL))
          ;;
        # Option 3/18
        # Option SKIP_TEST --skip-test|--skip-tests variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --skip-test | --skip-tests)
          # shellcheck disable=SC2034
          SKIP_TEST="1"
          if ((options_parse_optionParsedCountSKIP_TEST >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountSKIP_TEST))
          ;;
        # Option 4/18
        # Option SKIP_DEPENDENCIES --skip-dependencies|--skip-deps variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --skip-dependencies | --skip-deps)
          # shellcheck disable=SC2034
          SKIP_DEPENDENCIES="1"
          if ((options_parse_optionParsedCountSKIP_DEPENDENCIES >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountSKIP_DEPENDENCIES))
          ;;
        # Option 5/18
        # Option optionBashFrameworkConfig --bash-framework-config variableType String min 0 max 1 authorizedValues '' regexp ''
        --bash-framework-config)
          shift
          if (($# == 0)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
            return 1
          fi
          if ((options_parse_optionParsedCountOptionBashFrameworkConfig >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionBashFrameworkConfig))
          # shellcheck disable=SC2034
          optionBashFrameworkConfig="$1"
          optionBashFrameworkConfigCallback "${options_parse_arg}" "${optionBashFrameworkConfig}"
          ;;
        # Option 6/18
        # Option optionConfig --config variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --config)
          # shellcheck disable=SC2034
          optionConfig="1"
          if ((options_parse_optionParsedCountOptionConfig >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionConfig))
          ;;
        # Option 7/18
        # Option optionInfoVerbose --verbose|-v variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --verbose | -v)
          # shellcheck disable=SC2034
          optionInfoVerbose="1"
          if ((options_parse_optionParsedCountOptionInfoVerbose >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionInfoVerbose))
          optionInfoVerboseCallback "${options_parse_arg}"
          updateArgListInfoVerboseCallback "${options_parse_arg}"
          ;;
        # Option 8/18
        # Option optionDebugVerbose -vv variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        -vv)
          # shellcheck disable=SC2034
          optionDebugVerbose="1"
          if ((options_parse_optionParsedCountOptionDebugVerbose >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionDebugVerbose))
          optionDebugVerboseCallback "${options_parse_arg}"
          updateArgListDebugVerboseCallback "${options_parse_arg}"
          ;;
        # Option 9/18
        # Option optionTraceVerbose -vvv variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        -vvv)
          # shellcheck disable=SC2034
          optionTraceVerbose="1"
          if ((options_parse_optionParsedCountOptionTraceVerbose >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionTraceVerbose))
          optionTraceVerboseCallback "${options_parse_arg}"
          updateArgListTraceVerboseCallback "${options_parse_arg}"
          ;;
        # Option 10/18
        # Option optionEnvFiles --env-file variableType StringArray min 0 max -1 authorizedValues '' regexp ''
        --env-file)
          shift
          if (($# == 0)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionEnvFiles))
          optionEnvFiles+=("$1")
          optionEnvFileCallback "${options_parse_arg}" "${optionEnvFiles[@]}"
          updateArgListEnvFileCallback "${options_parse_arg}" "${optionEnvFiles[@]}"
          ;;
        # Option 11/18
        # Option optionNoColor --no-color variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --no-color)
          # shellcheck disable=SC2034
          optionNoColor="1"
          if ((options_parse_optionParsedCountOptionNoColor >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionNoColor))
          optionNoColorCallback "${options_parse_arg}"
          updateArgListNoColorCallback "${options_parse_arg}"
          ;;
        # Option 12/18
        # Option optionTheme --theme variableType String min 0 max 1 authorizedValues 'default|default-force|noColor' regexp ''
        --theme)
          shift
          if (($# == 0)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
            return 1
          fi
          if [[ ! "$1" =~ default|default-force|noColor ]]; then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(default|default-force|noColor)"
            return 1
          fi
          if ((options_parse_optionParsedCountOptionTheme >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionTheme))
          # shellcheck disable=SC2034
          optionTheme="$1"
          optionThemeCallback "${options_parse_arg}" "${optionTheme}"
          updateArgListThemeCallback "${options_parse_arg}" "${optionTheme}"
          ;;
        # Option 13/18
        # Option optionHelp --help|-h variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --help | -h)
          # shellcheck disable=SC2034
          optionHelp="1"
          if ((options_parse_optionParsedCountOptionHelp >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionHelp))
          optionHelpCallback "${options_parse_arg}"
          ;;
        # Option 14/18
        # Option optionVersion --version variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --version)
          # shellcheck disable=SC2034
          optionVersion="1"
          if ((options_parse_optionParsedCountOptionVersion >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionVersion))
          optionVersionCallback "${options_parse_arg}"
          ;;
        # Option 15/18
        # Option optionQuiet --quiet|-q variableType Boolean min 0 max 1 authorizedValues '' regexp ''
        --quiet | -q)
          # shellcheck disable=SC2034
          optionQuiet="1"
          if ((options_parse_optionParsedCountOptionQuiet >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionQuiet))
          optionQuietCallback "${options_parse_arg}"
          updateArgListQuietCallback "${options_parse_arg}"
          ;;
        # Option 16/18
        # Option optionLogLevel --log-level variableType String min 0 max 1 authorizedValues 'OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE' regexp ''
        --log-level)
          shift
          if (($# == 0)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
            return 1
          fi
          if [[ ! "$1" =~ OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE ]]; then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE)"
            return 1
          fi
          if ((options_parse_optionParsedCountOptionLogLevel >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionLogLevel))
          # shellcheck disable=SC2034
          optionLogLevel="$1"
          optionLogLevelCallback "${options_parse_arg}" "${optionLogLevel}"
          updateArgListLogLevelCallback "${options_parse_arg}" "${optionLogLevel}"
          ;;
        # Option 17/18
        # Option optionLogFile --log-file variableType String min 0 max 1 authorizedValues '' regexp ''
        --log-file)
          shift
          if (($# == 0)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
            return 1
          fi
          if ((options_parse_optionParsedCountOptionLogFile >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionLogFile))
          # shellcheck disable=SC2034
          optionLogFile="$1"
          optionLogFileCallback "${options_parse_arg}" "${optionLogFile}"
          updateArgListLogFileCallback "${options_parse_arg}" "${optionLogFile}"
          ;;
        # Option 18/18
        # Option optionDisplayLevel --display-level variableType String min 0 max 1 authorizedValues 'OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE' regexp ''
        --display-level)
          shift
          if (($# == 0)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
            return 1
          fi
          if [[ ! "$1" =~ OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE ]]; then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE)"
            return 1
          fi
          if ((options_parse_optionParsedCountOptionDisplayLevel >= 1)); then
            Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
            return 1
          fi
          ((++options_parse_optionParsedCountOptionDisplayLevel))
          # shellcheck disable=SC2034
          optionDisplayLevel="$1"
          optionDisplayLevelCallback "${options_parse_arg}" "${optionDisplayLevel}"
          updateArgListDisplayLevelCallback "${options_parse_arg}" "${optionDisplayLevel}"
          ;;
        -*)
          if [[ "${argOptDefaultBehavior}" = "0" ]]; then
            Log::displayError "Command ${SCRIPT_NAME} - Invalid option ${options_parse_arg}"
            return 1
          fi
          ;;
        *)
          if [[ "${argOptDefaultBehavior}" = "0" ]]; then
            Log::displayError "Command ${SCRIPT_NAME} - Argument - too much arguments provided"
            return 1
          fi
          ;;
      esac
      shift || true
    done
    commandOptionParseFinished
    InstallScripts::command
    Log::displayDebug "Command ${SCRIPT_NAME} - parse arguments: ${BASH_FRAMEWORK_ARGV[*]}"
    Log::displayDebug "Command ${SCRIPT_NAME} - parse filtered arguments: ${BASH_FRAMEWORK_ARGV_FILTERED[*]}"
  elif [[ "${options_parse_cmd}" = "help" ]]; then
    Array::wrap2 ' ' 80 0 "\e[1;37mDESCRIPTION:\e[0m" "$(helpDescriptionCallback)"
    echo

    echo -e "$(Array::wrap2 " " 80 2 "${__HELP_TITLE_COLOR}USAGE:${__RESET_COLOR}" "${SCRIPT_NAME}" "[OPTIONS]")"
    echo -e "$(Array::wrap2 " " 80 2 "${__HELP_TITLE_COLOR}USAGE:${__RESET_COLOR}" \
      "${SCRIPT_NAME}" \
      "[--skip-config|--skip-configure|--skip-configuration]" "[--skip-install|--skip-installation]" "[--skip-test|--skip-tests]" "[--skip-dependencies|--skip-deps]" "[--bash-framework-config <String>]" "[--config]" "[--verbose|-v]" "[-vv]" "[-vvv]" "[--env-file <String>]" "[--no-color]" "[--theme <String>]" "[--help|-h]" "[--version]" "[--quiet|-q]" "[--log-level <String>]" "[--log-file <String>]" "[--display-level <String>]")"
    echo
    echo -e "${__HELP_TITLE_COLOR}OPTIONS:${__RESET_COLOR}"
    echo -e "  ${__HELP_OPTION_COLOR}--skip-config${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-configure${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-configuration${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(skip\ software\ configuration)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--skip-install${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-installation${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(skip\ software\ installation)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--skip-test${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-tests${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(skip\ software\ installation\ test)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--skip-dependencies${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-deps${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(install\ the\ software\ requested\ without\ resolving\ dependencies)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo
    echo -e "${__HELP_TITLE_COLOR}GLOBAL OPTIONS:${__RESET_COLOR}"
    echo -e "  ${__HELP_OPTION_COLOR}--bash-framework-config <String>${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(use\ alternate\ bash\ framework\ configuration.)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--config${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(Display\ configuration)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--verbose${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-v${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(info\ level\ verbose\ mode\ \(alias\ of\ --display-level\ INFO\))
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}-vv${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(debug\ level\ verbose\ mode\ \(alias\ of\ --display-level\ DEBUG\))
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}-vvv${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(trace\ level\ verbose\ mode\ \(alias\ of\ --display-level\ TRACE\))
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--env-file <String>${__HELP_NORMAL} {list} (optional)"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(Load\ the\ specified\ env\ file\ \(deprecated\,\ please\ use\ --bash-framework-config\ option\ instead\))
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--no-color${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(Produce\ monochrome\ output.\ alias\ of\ --theme\ noColor.)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--theme <String>${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(choose\ color\ theme\ -\ default-force\ means\ colors\ will\ be\ produced\ even\ if\ command\ is\ piped)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo '    Default value: default'
    echo '    Possible values: default|default-force|noColor'
    echo -e "  ${__HELP_OPTION_COLOR}--help${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-h${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(Display\ this\ command\ help)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--version${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(Print\ version\ information\ and\ quit)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--quiet${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-q${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(quiet\ mode\,\ doesn\'t\ display\ any\ output)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--log-level <String>${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(Set\ log\ level)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo '    Possible values: OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE'
    echo -e "  ${__HELP_OPTION_COLOR}--log-file <String>${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(Set\ log\ file)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo -e "  ${__HELP_OPTION_COLOR}--display-level <String>${__HELP_NORMAL} {single}"
    local -a helpArray
    # shellcheck disable=SC2054
    helpArray=(set\ display\ level)
    echo -e "    $(Array::wrap2 " " 76 4 "${helpArray[@]}")"
    echo '    Possible values: OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE'
    Array::wrap2 ' ' 76 0 "$(helpLongDescriptionCallback)"
    echo
    echo -n -e "${__HELP_TITLE_COLOR}VERSION: ${__RESET_COLOR}"
    echo '1.0'
    echo
    echo -e "${__HELP_TITLE_COLOR}AUTHOR:${__RESET_COLOR}"
    echo '[François Chastanet](https://github.com/fchastanet)'
    echo
    echo -e "${__HELP_TITLE_COLOR}SOURCE FILE:${__RESET_COLOR}"
    echo 'https://github.com/fchastanet/bash-dev-env/tree/master/src/_binaries/installScripts/Fzf.sh'
    echo
    echo -e "${__HELP_TITLE_COLOR}LICENSE:${__RESET_COLOR}"
    echo 'MIT License'
    echo
    Array::wrap2 ' ' 76 4 "$(copyrightCallback)"
  else
    Log::displayError "Command ${SCRIPT_NAME} - Option command invalid: '${options_parse_cmd}'"
    return 1
  fi
}

# default action called by the facade if no interface action recognized
defaultFacadeAction() {
  installScriptCommand parse "${BASH_FRAMEWORK_ARGV[@]}"
}

stringOrNone() {
  local string="$1"
  echo -e "${string:-${__HELP_EXAMPLE}None${__HELP_NORMAL}}"
}

helpDescriptionCallback() {
  helpDescription
  echo
}

helpLongDescriptionCallback() {
  helpDescription
  echo

  echo -e "${__HELP_TITLE}List of needed variables:${__HELP_NORMAL}"
  stringOrNone "$(helpVariables)"

  echo -e "${__HELP_TITLE}List of dependencies:${__HELP_NORMAL}"
  stringOrNone "$(dependencies)"
}

scriptName() {
  echo "Fzf"
}

helpDescription() {
  echo "Fzf"
}

helpVariables() {
  true
}

listVariables() {
  true
}

defaultVariables() {
  true
}

checkVariables() {
  true
}

fortunes() {
  if command -v bat &>/dev/null; then
    fortunes+=("Fzf -- bat - Use bat command to pre-visualize one or multiple files")
  fi

  if command -v fzf &>/dev/null; then
    fortunes+=("Fzf -- fzf - Use CTRL-T - Paste the selected file path(s) into the command line")
    fortunes+=("Fzf -- fzf - Use CTRL-R - search command line from zsh/bash history")
    fortunes+=("Fzf -- fzf - Use ALT-C - easily select sub directory of current directory")
  fi

  if command -v fd &>/dev/null; then
    fortunes+=("Fzf -- fd -- fd is a program to find entries in your filesystem. It is a simple, fast and user-friendly alternative to find. While it does not aim to support all of find's powerful functionality, it provides sensible (opinionated) defaults for a majority of use cases. - https://github.com/sharkdp/fd")
  fi

}

dependencies() {
  return 0
}

breakOnConfigFailure() {
  echo breakOnConfigFailure
}

breakOnTestFailure() {
  echo breakOnTestFailure
}

install() {
  Linux::Apt::update
  Linux::Apt::install \
    tree # tree command is used by some fzf key binding

  Log::displayInfo "install fzf"
  SUDO=sudo Git::cloneOrPullIfNoChanges \
    "/opt/fzf" \
    "https://github.com/junegunn/fzf.git"

  sudo /opt/fzf/install --bin
  sudo ln -sf /opt/fzf/bin/fzf /usr/local/bin/fzf

  # shellcheck disable=SC2317
  function installDeb() {
    sudo dpkg -i "$1"
  }
  export -f installDeb

  # shellcheck disable=SC2154
  SUDO=sudo "${embed_function_GithubUpgradeRelease}" \
    "/usr/bin/fd" \
    "https://github.com/sharkdp/fd/releases/download/v@latestVersion@/fd_@latestVersion@_amd64.deb" \
    --version \
    Version::getCommandVersionFromPlainText \
    installDeb \
    Version::parse

  SUDO=sudo "${embed_function_GithubUpgradeRelease}" \
    "/usr/bin/bat" \
    "https://github.com/sharkdp/bat/releases/download/v@latestVersion@/bat_@latestVersion@_amd64.deb" \
    --version \
    Version::getCommandVersionFromPlainText \
    installDeb \
    Version::parse
}

configure() {
  :
}

testInstall() {
  local -i failures=0
  Version::checkMinimal "fd" --version "8.4.0" || ((++failures))
  Version::checkMinimal "fzf" --version "0.44.1" || ((++failures))
  Version::checkMinimal "bat" --version "0.22.1" || ((++failures))

  return "${failures}"
}

testConfigure() {
  :
}

local action=$1
shift || true
case ${action} in
  scriptName)
    scriptName "$@"
    ;;
  helpDescription)
    helpDescription "$@"
    ;;
  helpVariables)
    helpVariables "$@"
    ;;
  listVariables)
    listVariables "$@"
    ;;
  defaultVariables)
    defaultVariables "$@"
    ;;
  checkVariables)
    checkVariables "$@"
    ;;
  fortunes)
    fortunes "$@"
    ;;
  dependencies)
    dependencies "$@"
    ;;
  breakOnConfigFailure)
    breakOnConfigFailure "$@"
    ;;
  breakOnTestFailure)
    breakOnTestFailure "$@"
    ;;
  install)
    install "$@"
    ;;
  configure)
    configure "$@"
    ;;
  testInstall)
    testInstall "$@"
    ;;
  testConfigure)
    testConfigure "$@"
    ;;
  *)
    if Assert::functionExists defaultFacadeAction; then
      defaultFacadeAction "$1" "$@"
    else
      Log::displayError "invalid action requested: ${action}"
      exit 1
    fi
    ;;
esac
exit 0
}

facade_main_Fzfsh "$@"
