#!/usr/bin/env bash
###############################################################################
# GENERATED FROM https://github.com/fchastanet/bash-dev-env/tree/master/src/_installScripts/_Configs/ShellBashDefaultConfig-binary.yaml
# DO NOT EDIT IT
# @generated
###############################################################################
# shellcheck disable=SC2288,SC2034



# ensure that no user aliases could interfere with
# commands used in this script
unalias -a || true
shopt -u expand_aliases

# shellcheck disable=SC2034
((failures = 0)) || true

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# Command Substitution can inherit errexit option since bash v4.4
shopt -s inherit_errexit || true

# if set, and job control is not active, the shell runs the last command
# of a pipeline not executed in the background in the current shell
# environment.
shopt -s lastpipe

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file
# matches the wildcard
shopt -s nullglob

# ensure regexp are interpreted without accentuated characters
export LC_ALL=POSIX

export TERM=xterm-256color

# avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# store command arguments for later usage
# shellcheck disable=SC2034
declare -a BASH_FRAMEWORK_ARGV=("$@")
# shellcheck disable=SC2034
declare -a ORIGINAL_BASH_FRAMEWORK_ARGV=("$@")

# @see https://unix.stackexchange.com/a/386856
# shellcheck disable=SC2317
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT

################################################
# Temp dir management
################################################

KEEP_TEMP_FILES="${KEEP_TEMP_FILES:-0}"
export KEEP_TEMP_FILES

# PERSISTENT_TMPDIR is not deleted by traps
PERSISTENT_TMPDIR="${TMPDIR:-/tmp}/bash-framework"
export PERSISTENT_TMPDIR
if [[ ! -d "${PERSISTENT_TMPDIR}" ]]; then
  mkdir -p "${PERSISTENT_TMPDIR}"
fi

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${PERSISTENT_TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
# shellcheck disable=SC2317
cleanOnExit() {
  local rc=$?
  if [[ "${KEEP_TEMP_FILES:-0}" = "1" ]]; then
    Log::displayInfo "KEEP_TEMP_FILES=1 temp files kept here '${TMPDIR}'"
  elif [[ -n "${TMPDIR+xxx}" ]]; then
    Log::displayDebug "KEEP_TEMP_FILES=0 removing temp files '${TMPDIR}'"
    rm -Rf "${TMPDIR:-/tmp/fake}" >/dev/null 2>&1
  fi
  exit "${rc}"
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM


SCRIPT_NAME=${0##*/}
REAL_SCRIPT_FILE="$(readlink -e "$(realpath "${BASH_SOURCE[0]}")")"
if [[ -n "${EMBED_CURRENT_DIR}" ]]; then
  CURRENT_DIR="${EMBED_CURRENT_DIR}"
else
  CURRENT_DIR="${REAL_SCRIPT_FILE%/*}"
fi
FRAMEWORK_ROOT_DIR="$(cd "${CURRENT_DIR}/.." && pwd -P)"
FRAMEWORK_SRC_DIR="${FRAMEWORK_ROOT_DIR}/src"
FRAMEWORK_BIN_DIR="${FRAMEWORK_ROOT_DIR}/bin"
FRAMEWORK_VENDOR_DIR="${FRAMEWORK_ROOT_DIR}/vendor"
FRAMEWORK_VENDOR_BIN_DIR="${FRAMEWORK_ROOT_DIR}/vendor/bin"

# @description Log namespace provides 2 kind of functions
# - Log::display* allows to display given message with
#   given display level
# - Log::log* allows to log given message with
#   given log level
# Log::display* functions automatically log the message too
# @see Env::requireLoad to load the display and log level from .env file

# @description log level off
export __LEVEL_OFF=0
# @description log level error
export __LEVEL_ERROR=1
# @description log level warning
export __LEVEL_WARNING=2
# @description log level info
export __LEVEL_INFO=3
# @description log level success
export __LEVEL_SUCCESS=3
# @description log level debug
export __LEVEL_DEBUG=4

# @description verbose level off
export __VERBOSE_LEVEL_OFF=0
# @description verbose level info
export __VERBOSE_LEVEL_INFO=1
# @description verbose level info
export __VERBOSE_LEVEL_DEBUG=2
# @description verbose level info
export __VERBOSE_LEVEL_TRACE=3


# @description check if an element is contained in an array
#
# @arg $1 needle:String
# @arg $@ array:String[]
# @exitcode 0 if found
# @exitcode 1 otherwise
# @example
#   Array::contains "${libPath}" "${__BASH_FRAMEWORK_IMPORTED_FILES[@]}"
Array::contains() {
  local element
  for element in "${@:2}"; do
    [[ "${element}" = "$1" ]] && return 0
  done
  return 1
}


# @description concatenate each element of an array with a separator
# but wrapping text when line length is more than provided argument
# The algorithm will try not to cut the array element if it can.
# - if an arg can be placed on current line it will be,
#   otherwise current line is printed and arg is added to the new
#   current line
# - Empty arg is interpreted as a new line.
# - Add \r to arg in order to force break line and avoid following
#   arg to be concatenated with current arg.
#
# @arg $1 glue:String
# @arg $2 maxLineLength:int
# @arg $3 indentNextLine:int
# @arg $@ array:String[]
Array::wrap2() {
  local glue="${1-}"
  local -i glueLength="${#glue}"
  shift || true
  local -i maxLineLength=$1
  shift || true
  local -i indentNextLine=$1
  shift || true
  local indentStr=""
  if ((indentNextLine > 0)); then
    indentStr="$(head -c "${indentNextLine}" </dev/zero | tr '\0' " ")"
  fi
  if (($# == 0)); then
    return 0
  fi

  printCurrentLine() {
    if ((isNewline == 0)) || ((previousLineEmpty == 1)); then
      echo
    fi
    ((isNewline = 1))
    echo -en "${indentStr}"
    ((currentLineLength = indentNextLine)) || true
  }
  appendToCurrentLine() {
    local text="$1"
    local -i length=$2
    ((currentLineLength += length)) || true
    ((isNewline = 0)) || true
    if [[ "${text: -1}" = $'\r' ]]; then
      text="${text:0:-1}"
      echo -en "${text%%+([[:blank:]])}"
      printCurrentLine
    else
      echo -en "${text%%+([[:blank:]])}"
    fi
  }

  (
    local currentLine
    local -i currentLineLength=0 isNewline=1 argLength=0
    local -a additionalLines
    local -i previousLineEmpty=0
    local arg=""

    while (($# > 0)); do
      arg="$1"
      shift || true

      # replace tab by 2 spaces
      arg="${arg//$'\t'/  }"
      # remove trailing spaces
      arg="${arg%[[:blank:]]}"
      if [[ "${arg}" = $'\n' || -z "${arg}" ]]; then
        printCurrentLine
        ((previousLineEmpty = 1))
        continue
      else
        if ((previousLineEmpty == 1)); then
          printCurrentLine
        fi
        ((previousLineEmpty = 0)) || true
      fi
      # convert eol to args
      mapfile -t additionalLines <<<"${arg}"
      if ((${#additionalLines[@]} > 1)); then
        set -- "${additionalLines[@]}" "$@"
        continue
      fi

      ((argLength = ${#arg})) || true

      # empty arg
      if ((argLength == 0)); then
        if ((isNewline == 0)); then
          # isNewline = 0 means currentLine is not empty
          printCurrentLine
        fi
        continue
      fi

      if ((isNewline == 0)); then
        glueLength="${#glue}"
      else
        glueLength="0"
      fi
      if ((currentLineLength + argLength + glueLength > maxLineLength)); then
        if ((argLength + glueLength > maxLineLength)); then
          # arg is too long to even fit on one line
          # we have to split the arg on current and next line
          local -i remainingLineLength
          ((remainingLineLength = maxLineLength - currentLineLength - glueLength))
          appendToCurrentLine "${glue:0:${glueLength}}${arg:0:${remainingLineLength}}" "$((glueLength + remainingLineLength))"
          printCurrentLine
          arg="${arg:${remainingLineLength}}"
          # remove leading spaces
          arg="${arg##[[:blank:]]}"

          set -- "${arg}" "$@"
        else
          # the arg can fit on next line
          printCurrentLine
          appendToCurrentLine "${arg}" "${argLength}"
        fi
      else
        appendToCurrentLine "${glue:0:${glueLength}}${arg}" "$((glueLength + argLength))"
      fi
    done
    if [[ "${currentLine}" != "" ]] && [[ ! "${currentLine}" =~ ^[\ \t]+$ ]]; then
      printCurrentLine
    fi
  ) | sed -E -e 's/[[:blank:]]+$//'
}


# @description check if command specified exists or return 1
# with error and message if not
#
# @arg $1 commandName:String on which existence must be checked
# @arg $2 helpIfNotExists:String a help command to display if the command does not exist
#
# @exitcode 1 if the command specified does not exist
# @stderr diagnostic information + help if second argument is provided
Assert::commandExists() {
  local commandName="$1"
  local helpIfNotExists="$2"

  "${BASH_FRAMEWORK_COMMAND:-command}" -v "${commandName}" >/dev/null 2>/dev/null || {
    Log::displayError "${commandName} is not installed, please install it"
    if [[ -n "${helpIfNotExists}" ]]; then
      Log::displayInfo "${helpIfNotExists}"
    fi
    return 1
  }
  return 0
}


# @description check if param is valid email address
# @warning it is a very simple check, no RFC validation
# @arg $1 emailAddress:String the full email address
# @exitcode 1 if invalid email address
Assert::emailAddress() {
  local expectedRegexp="^\S+@\S+$"

  [[ "$1" =~ ${expectedRegexp} ]]
}


# @description asserts that first argument is file that exists with specified ownership
# @arg $1 file:String
# @arg $2 user:String expected owner user name of the file (default: USERNAME or id -un command)
# @arg $3 group:String expected owner group name of the file (default: USERGROUP or id -gn command)
# @env USERNAME String if arg $2 is not provided
# @env USERGROUP String if arg $3 is not provided
# @env SUDO String allows to use custom sudo prefix command
# @exitcode 1 if missing file
# @exitcode 2 if incorrect user ownership
# @exitcode 3 if incorrect group ownership
# @stderr diagnostics information is displayed
Assert::fileExists() {
  local file="$1"
  local user="${2:-${USERNAME}}"
  local group="${3:-${USERGROUP}}"
  if [[ -n "${user}" ]]; then
    Log::displayInfo "Check ${file} exists with user ${user}:${group}"
  else
    Log::displayInfo "Check ${file} exists"
  fi
  if ! ${SUDO:-} test -f "${file}" &>/dev/null; then
    Log::displayError "missing file ${file}"
    return 1
  fi
  if [[ -n "${user}" && "${user}" != "$(${SUDO:-} stat -c '%U' "${file}")" ]]; then
    Log::displayError "incorrect user ownership on file ${file}"
    return 2
  fi
  if [[ -n "${group}" && "${group}" != "$(${SUDO:-} stat -c '%G' "${file}")" ]]; then
    Log::displayError "incorrect group ownership on file ${file}"
    return 3
  fi
}


# @description check if argument respects 2 or more words separated by a space
# it supports accentuated characters and names with hyphen(-)
# @arg $1 firstNameLastName:String
# @exitcode 1 if regexp not matches
# @see https://regex101.com/r/JyyfOM/1
Assert::firstNameLastName() {
  local regexp="^[^ ]+([ ][^ ]+)+$"
  [[ $1 =~ ${regexp} ]]
}


# @description checks if function name provided exists
# @arg $1 functionName:String
# @exitcode 1 if function name doesn't exist
Assert::functionExists() {
  declare -F "$1" >/dev/null
}


# @description check if argument respects ldap login naming convention
# only using lowercase characters a-z
# @arg $1 ldapLogin:String
# @exitcode 1 if regexp not matches
Assert::ldapLogin() {
  [[ $1 =~ ^[a-z]+$ ]]
}


# @description check if tty (interactive mode) is active
# @noargs
# @exitcode 1 if tty not active
# @env NON_INTERACTIVE if 1 consider as not interactive even if environment is interactive
# @env INTERACTIVE if 1 consider as interactive even if environment is not interactive
Assert::tty() {
  if [[ "${NON_INTERACTIVE:-0}" = "1" ]]; then
    return 1
  fi
  if [[ "${INTERACTIVE:-0}" = "1" ]]; then
    return 0
  fi
  tty -s
}


# @description check if argument respects this framework variable naming convention
# - if variable begins with an uppercase or underscore, following letters have to be uppercase or underscore
# - variable name can includes ':' or '_' or digits but not as first letter
# here valid variable name examples
#
# @arg $1 variableName:String
# @exitcode 1 if regexp not matches
# @see https://regex101.com/r/BUlPXS/1
Assert::validVariableName() {
  [[ "$1" =~ (^[a-z][A-Za-z_0-9:]+$)|(^[A-Z_][A-Z_0-9:]+$) ]]
}


# @description checks if variable name provided exists
# @arg $1 varName:String
# @exitcode 1 if variable doesn't exist
# @exitcode 2 if variable value empty
# @exitcode 3 if variable name invalid
# @see Assert::validVariableName
# @stderr diagnostics information is displayed
Assert::varExistsAndNotEmpty() {
  local varName="$1"
  if ! Assert::validVariableName "${varName}"; then
    Log::displayError "${varName} - invalid variable name"
    return 3
  fi
  if [[ -z "${!varName+unset}" ]]; then
    Log::displayError "${varName} - not defined"
    return 1
  elif [[ -z "${!varName}" ]]; then
    Log::displayError "${varName} - please provide a value"
    return 2
  fi
}


# @description determine if the script is executed under WSL
# cspell:disable
# @example text
#   uname GitBash windows (with wsl) => MINGW64_NT-10.0 ZOXFL-6619QN2 2.10.0(0.325/5/3) 2018-06-13 23:34 x86_64 Msys
#   uname GitBash windows (wo wsl)   => MINGW64_NT-10.0 frsa02-j5cbkc2 2.9.0(0.318/5/3) 2018-01-12 23:37 x86_64 Msys
#   uname wsl => Linux ZOXFL-6619QN2 4.4.0-17134-Microsoft #112-Microsoft Thu Jun 07 22:57:00 PST 2018 x86_64 x86_64 x86_64 GNU/Linux
# cspell:enable
#
# @exitcode 1 on error
Assert::wsl() {
  [[ "$(uname -o)" = "GNU/Linux" ]]
}


# @description Backup given file in the same directory or in BACKUP_DIR directory
# backup file name is composed by following fields separated by -:
#   - if BACKUP_DIR is not empty then escaped dir name separated by @
#   - filename(without path)
#   - date with format %Y%m%d_%H:%M:%S (Eg: 20240326_14:45:08)
# @arg $1 file:String the file to backup
# @stderr messages about backup file location
# @env SUDO String allows to use custom sudo prefix command
# @env BACKUP_DIR if not set backup the file in the same directory as original file
# @exitcode 1 on copy failure
Backup::file() {
  local file="$1"
  if [[ -f "${file}" ]]; then
    local backupFile fileDirname escapedDirname
    fileDirname="${file%/*}"
    escapedDirname=${fileDirname/\//}      # remove first slash
    escapedDirname=${escapedDirname//\//@} # replace all slashes by @
    if [[ -z "${BACKUP_DIR:-}" ]]; then
      backupFile="${fileDirname}/${file##*/}-$(date +"%Y%m%d_%H:%M:%S")"
    else
      backupFile="${BACKUP_DIR}/${escapedDirname}@${file##*/}-$(date +"%Y%m%d_%H:%M:%S")"
    fi
    Log::displayInfo "Backup file '${file}' to ${backupFile}"
    ${SUDO:-} cp "${file}" "${backupFile}"
  fi
}


# @description get property value from file
# if not present compute it using propertyNotFoundCallback (if provided) and store it in property file
# @arg $1 propertyFile:String the file in which the property will be searched
# @arg $2 key:String the property key to search in property file
# @arg $3 propertyNotFoundCallback:Function (optional) a callback to call if property key is not found in property file
# @arg $@ args:String[] (optional) the arguments to pass to the propertyNotFoundCallback
# @exitcode 1 if value is not found
# @exitcode * if propertyNotFoundCallback fails
# @stdout the property value given by property file or by the propertyNotFoundCallback
Cache::getPropertyValue2() {
  local propertyFile="$1"
  local -n propertiesMap=$2
  local -n getPropertyValue2_val=$3
  local key="$4"
  local propertyNotFoundCallback=$5
  shift 5 || true
  local -a args=("$@")

  if [[ "${#propertiesMap[@]}" = "0" && -s "${propertyFile}" ]]; then
    local line
    while IFS="" read -r line; do
      if [[ "${line}" =~ ^([^=]+)=(.+)$ ]]; then
        propertiesMap["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
      fi
    done <"${propertyFile}"
  fi

  if [[ -n "${propertiesMap[${key}]+abc}" ]]; then
    getPropertyValue2_val="${propertiesMap[${key}]}"
    return 0
  elif [[ "$(type -t "${propertyNotFoundCallback}")" = "function" ]]; then
    getPropertyValue2_val="$("${propertyNotFoundCallback}" "${args[@]}")" || return $?
    propertiesMap["${key}"]="${getPropertyValue2_val}"
    echo "${key}=${getPropertyValue2_val}" >>"${propertyFile}"
    return 0
  fi
  return 1
}


# @description convert base64 encoded back to target dir
# it is advised to include the md5sum of the binFile in the path of the target dir
#
# @arg $1 targetDir:string the directory in which tar archive will be untarred
# @arg $2 base64:string the base64 encoded tar czf archive
# @stderr diagnostics information is displayed
Compiler::Embed::extractDirFromBase64() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_TAR_COMMAND_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireTarCommand has not been loaded"
    exit 1
  fi

  local targetDir="$1"
  local base64="$2"

  if [[ ! -d "${targetDir}" ]]; then
    mkdir -p "${targetDir}"
    (
      cd "${targetDir}" || exit 1
      tr -d '\n ' <<<"${base64}" | base64 -d | tar -xzf - 2>/dev/null || {
        Log::displayError "untar failure, invalid base64 string"
        exit 1
      }
    ) || return 1
  fi
}


# @description convert base64 encoded back to target file
# if target file is executable prepend dir of target
# file to PATH to make binary available everywhere
# it is advised to include in the path of the target file
# the md5sum of the binFile
#
# @arg $1 targetFile:String the file to write
# @arg $2 binFileBase64:String the base64 encoded file
# @arg $3 fileMode:String the chmod to set on the file
# @set PATH String prepend target embedded file binary directory to PATH variable if binary executable
Compiler::Embed::extractFileFromBase64() {
  local targetFile="$1"
  local binFileBase64="$2"
  local fileMode="${3:-+x}"
  local targetDir="${targetFile%/*}"

  if [[ ! -f "${targetFile}" ]]; then
    if [[ ! -d "${targetDir}" ]]; then
      mkdir -p "${targetDir}"
    fi
    tr -d '\n ' <<<"${binFileBase64}" | base64 -d >"${targetFile}"
    chmod "${fileMode}" "${targetFile}"
  fi

  if [[ -x "${targetFile}" ]]; then
    Env::pathPrepend "${targetDir}"
  fi
}


# @description copy folder structure to target directory
# merge embedDir with overridden directory if provided and available
# @arg $1 embedDir:String the path embedded
# @arg $2 overrideDir:String the path overridden
# @arg $3 subDir:String the sub-directory to copy from embedDir and/or overrideDir
# @arg $4 targetDir:String the target directory (default: ${HOME}/${subDir})
# @env SUDO String allows to use custom sudo prefix command
# @env HOME used for default value of targetDir arg
# @env OVERWRITE_CONFIG_FILES indicates if target directory should be overwritten if it exists
# @env PRETTY_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @env IGNORE_MISSING_SOURCE_DIR
Conf::copyStructure() {
  local embedDir="$1"
  local overrideDir="$2"
  local subDir="$3"
  local targetDir="${4:-${HOME}/${subDir}}"

  local configDir
  # shellcheck disable=SC2154
  configDir="$(Conf::getOverriddenDir "${embedDir}" "${overrideDir}")"
  if [[ -d "${configDir}/${subDir}" ]]; then
    # shellcheck disable=SC2154
    OVERWRITE_CONFIG_FILES=${OVERWRITE_CONFIG_FILES:-1} \
      PRETTY_ROOT_DIR="${embedDir%/*}" \
      Install::structure "${configDir}/${subDir}" "${targetDir}"
  elif [[ "${IGNORE_MISSING_SOURCE_DIR:-0}" = "1" ]]; then
    return 0
  else
    Log::displayError "Directory ${subDir} does not exists in '${embedDir}' or '${overrideDir}'"
    return 1
  fi
}


# @description generate temp directory where default
# and overridden directories have been merged
#   - if overridden dir exists, create a new temp folder
#     - copy all files from default folder
#     - overwrite with files from overridden folder
#     - (Later) delete files listed in .remove$$ file
#     - return the path of this temp folder
#   - else just return the default folder path
# Then it is easier to pick overridden or default files/folders
#
# @arg $1 defaultDir:String usually the embed directory
# @arg $2 overriddenDirPath:String the path to the directory
#   that could be overridden
# @exitcode 1 if default dir does not exist
# @exitcode 2 if error during copy
Conf::getOverriddenDir() {
  local -a overriddenDirPaths=("$@")
  local overriddenDirPath

  local tempDir
  tempDir="$(mktemp -d)"
  (
    shopt -s dotglob
    for overriddenDirPath in "${overriddenDirPaths[@]}"; do
      if [[ -d "${overriddenDirPath}" && -n "$(ls -A "${overriddenDirPath}" || true)" ]]; then
        Log::displayInfo "Conf::getOverriddenDir - use overridden files from ${overriddenDirPath}"
        cp -R "${overriddenDirPath}/." "${tempDir}"
      else
        if [[ -z "${overriddenDirPath}" ]]; then
          Log::displayError "Conf::getOverriddenDir - empty overridden directory path"
        else
          Log::displayInfo "Conf::getOverriddenDir - directory ${overriddenDirPath} does not exist or is empty"
        fi
      fi
    done
  ) || {
    Log::displayError "Conf::getOverriddenDir - error during copy"
    return 2
  }
  echo "${tempDir}"
}


# @description Get the path to the windows terminal
# @noargs
# @stdout The path to the windows terminal
Conf::getWindowsTerminalPath() {
  # cspell:ignore wekyb, bbwe
  echo "${WINDOWS_PROFILE_DIR}/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe"
}


# @description list files of dir with given extension and display it as a list one by line
#
# @arg $1 dir:String the directory to list
# @arg $2 prefix:String the profile file prefix (default: "")
# @arg $3 ext:String the extension
# @arg $4 findOptions:String find options, eg: -type d (Default value: '-type f')
# @arg $5 indentStr:String the indentation can be any string compatible with sed not containing any / (Default value: '       - ')
# @stdout list of files without extension/directory
# @example text
#       - default.local
#       - default.remote
#       - localhost-root
# @exitcode 1 if directory does not exists
Conf::list() {
  local dir="$1"
  local prefix="${2:-}"
  local ext="${3}"
  local findOptions="${4--type f}"
  local indentStr="${5-       - }"

  if [[ ! -d "${dir}" ]]; then
    Log::displayError "Directory ${dir} does not exist"
  fi
  if [[ -n "${ext}" && "${ext:0:1}" != "." ]]; then
    ext=".${ext}"
  fi
  (
    # shellcheck disable=SC2086
    cd "${dir}" &&
      find . -maxdepth 1 ${findOptions} -name "${prefix}*${ext}" |
      sed -E "s#^\./${prefix}##g" |
        sed -E "s#${ext}\$##g" | sort | sed -E "s#^#${indentStr}#"
  )
}


# @description Load the nearest config file
# in next example will search first .framework-config file in "srcDir1"
# then if not found will go in up directories until /
# then will search in "srcDir2"
# then if not found will go in up directories until /
# source the file if found
# @example
#   Conf::loadNearestFile ".framework-config" "srcDir1" "srcDir2"
#
# @arg $1 configFileName:String config file name to search
# @arg $2 loadedFile:String (passed by reference) will return the loaded config file name
# @arg $@ srcDirs:String[] source directories in which the config file will be searched
# @exitcode 0 if file found
# @exitcode 1 if file not found
Conf::loadNearestFile() {
  local configFileName="$1"
  local -n loadedFile="$2"
  shift 2 || true
  local -a srcDirs=("$@")
  for srcDir in "${srcDirs[@]}"; do
    configFile="$(File::upFind "${srcDir}" "${configFileName}" || true)"
    if [[ -n "${configFile}" ]]; then
      # shellcheck source=/.framework-config
      source "${configFile}" || Log::fatal "error while loading config file '${configFile}'"
      Log::displayDebug "Config file ${configFile} is loaded"
      # shellcheck disable=SC2034
      loadedFile="${configFile}"
      return 0
    fi
  done

  Log::displayDebug "Config file '${configFileName}' not found in any source directories provided"
  return 1
}


# @description check validity of .env variables
# @env CHECK_ENV int 0 to avoid checking environment
# @noargs
Engine::Config::checkEnv() {
  local envFile="$1"
  if [[ "${CHECK_ENV:-1}" = "0" ]]; then
    return 0
  fi
  # avoid checks if .env file didn't changed
  local envFileMd5Cache="${PERSISTENT_TMPDIR:-/tmp}/bash-dev-env-enf-file-checksum"
  if md5sum -c "${envFileMd5Cache}" &>/dev/null; then
    return 0
  else
    md5sum "${envFile}" >"${envFileMd5Cache}"
  fi
  local errorCount=0 || true
  checkNotEmpty() {
    local var="$1"
    if ! Assert::varExistsAndNotEmpty "${var}"; then
      ((++errorCount))
      return 1
    fi
  }
  checkVarAndDir() {
    local var="$1"
    local mode="${2:-}"
    local status=0
    if checkNotEmpty "${var}"; then
      if [[ ! -d "${!var}" ]] && ! mkdir -p "${!var}"; then
        Log::displayError "variable ${var} - impossible to create the directory '${!var}'"
        ((errorCount++))
        return 1
      fi
      if [[ "${mode}" =~ w && ! -w "${!var}" ]]; then
        Log::displayError "variable ${var} - directory '${!var}' is not writable"
        ((status++))
        ((errorCount++))
      fi
      if [[ "${mode}" =~ r && ! -r "${!var}" ]]; then
        Log::displayError "variable ${var} - directory '${!var}' is not accessible"
        ((status++))
        ((errorCount++))
      fi
    fi

    return "${status}"
  }
  checkValidValues() {
    local var="$1"
    shift || true
    local -a validValues=("$@")
    if ! Array::contains "${!var}" "${validValues[@]}"; then
      Log::displayError "variable ${var} - value ${!var} is not part of the following values ${validValues[*]}"
      ((++errorCount))
    fi
  }
  checkIsArray() {
    local var="$1"
    declare -p "${var}" 2>/dev/null | grep -q 'declare \-a'
  }

  if ! echo "${ID}" | grep -qEw 'debian|ubuntu'; then
    Log::fatal "This script is built to support only Debian or Ubuntu distributions. You are using ${ID}."
  fi

  if checkNotEmpty USERNAME && ! getent passwd "${USERNAME}" 2>/dev/null >/dev/null; then
    Log::displayError "USERNAME - user '${USERNAME}' does not exist"
    ((errorCount++))
  fi

  if [[ -n "${SSH_LOGIN:-}" ]] && ! Assert::ldapLogin "${SSH_LOGIN}"; then
    Log::displayError "SSH_LOGIN - invalid ldap login (format expected firstNameLastName) in ${BASH_DEV_ENV_ROOT_DIR}/.env file"
    ((errorCount++))
  fi

  if checkNotEmpty "GIT_USERNAME" && ! Assert::firstNameLastName "${GIT_USERNAME}"; then
    Log::displayError "GIT_USERNAME - invalid format, expected : firstName lastName"
    ((errorCount++))
  fi

  if checkNotEmpty "GIT_USER_MAIL" && ! Assert::emailAddress "${GIT_USER_MAIL}"; then
    Log::displayError "GIT_USER_MAIL - invalid email address"
    ((errorCount++))
  fi

  if checkNotEmpty "AWS_USER_MAIL" && ! Assert::emailAddress "${AWS_USER_MAIL}"; then
    Log::displayError "AWS_USER_MAIL - invalid email address"
    ((errorCount++))
  fi

  if ! checkIsArray "CONF_OVERRIDE_DIRS"; then
    Log::displayError "CONF_OVERRIDE_DIRS - invalid format, expected : array of strings"
    ((errorCount++))
  fi
  ((i = 0)) || true
  local dir
  for dir in "${CONF_OVERRIDE_DIRS[@]}"; do
    if [[ ! -d "${dir}" ]]; then
      Log::displayError "CONF_OVERRIDE_DIRS[${i}] - directory '${dir}' does not exist"
      ((errorCount++))
    fi
    if [[ ! -r "${dir}" ]]; then
      Log::displayError "CONF_OVERRIDE_DIRS[${i}] - directory '${dir}' is not readable"
      ((errorCount++))
    fi
    ((++i))
  done
  checkVarAndDir PROJECTS_DIR r || true
  checkVarAndDir BACKUP_DIR rw || true
  checkVarAndDir LOGS_DIR rw || true
  checkVarAndDir INSTALL_SCRIPTS_ROOT_DIR r || true
  checkVarAndDir HOME rw || true

  checkValidValues UPGRADE_UBUNTU_VERSION 0 lts dev
  checkValidValues PREFERRED_SHELL ShellBash ShellZsh
  checkValidValues ZSH_PREFERRED_THEME ohmyposh powerlevel10k/powerlevel10k sindresorhus/pure starship/starship

  checkValidValues SHOW_FORTUNES 0 1
  checkValidValues SHOW_MOTD 0 1
  checkValidValues OVERWRITE_CONFIG_FILES 0 1
  checkValidValues CHANGE_WINDOWS_FILES 0 1
  checkValidValues CAN_TALK_DURING_INSTALLATION 0 1
  checkValidValues INSTALL_INTERACTIVE 0 1

  checkNotEmpty WSLCONFIG_MAX_MEMORY
  checkValidValues WSLCONFIG_SWAP 0 1
  export CHECK_ENV=0
  return "${errorCount}"
}


# @description if .env does not exist, initialize it with .env.template
Engine::Config::createEnvFileFromTemplate() {
  local envFile="$1"
  local envFileTemplate="$2"

  if [[ ! -f "${envFile}" ]]; then
    echo "${envFileTemplate}" >"${envFile}"
    Log::displayError "a default env file has been created, please edit ${envFile}"
    return 1
  fi
}


# @description load .env file
# @arg $1 envFile:String the file to load
Engine::Config::loadConfig() {
  if [[ "${BASH_DEV_ENV_CONFIG_LOADED:-0}" = "1" ]]; then
    return 0
  fi
Linux::requireTarCommand
Compiler::Embed::extractFileFromBase64 \
  "${PERSISTENT_TMPDIR:-/tmp}/e45723bdbf29adda89f24f72a94da7e21df12389872dca4558684132a580a936/envFileTemplate" \
  "IyEvYmluL2Jhc2gKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CgojIC0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tCiMgR2VuZXJhbCBpbmZvcm1hdGlvbgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIHdz \
bCB1c2VybmFtZSB3aXRoIGRlZmF1bHQgcGFzc3dvcmQgd3NsClVTRVJOQU1FPSJ3c2wiCgpIT01F \
PSIvaG9tZS93c2wiCgpXSU5ET1dTX1VTRVJOQU1FPSJGcmFuY29pc0NoYXN0YW5ldCIKCiMgLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0KIyBHaXQgJiBTU0ggaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLQoKIyBpZiAxLCBpdCBpbmRpY2F0ZXMgeW91IGFjY2VwdCB0aGF0IHlvdXIgZ2l0IGtl \
eSB3aWxsIGJlIGxvYWRlZC4KIyBpZiAwLCBjb25maWd1cmF0aW9ucyB0aGF0IG5lZWQgdG8gYmUg \
YXV0aGVudGljYXRlZCB3aWxsIGJlIHNraXBwZWQuCiMgRGlzdHJvIG1vZGU6IGluIGFueSBjYXNl \
LCB5b3VyIGtleSBpcyBub3QgY29waWVkLgpBVVRIT1JJWkVfU1NIX0tFWV9VU0FHRT0xCgojIHlv \
dXIgbG9naW4gdG8gY29ubmVjdCB0byBzc2ggc2VydmVycyBpZiBhbnkKU1NIX0xPR0lOPSIiCgoj \
IHlvdXIgZ2l0IGZ1bGwgbmFtZSAnRmlyc3ROYW1lIExhc3ROYW1lJwpHSVRfVVNFUk5BTUU9IiIK \
CiMgZW1haWwgdXNlZCBmb3IgZ2l0ICdsZGFwQGRvbWFpbi5jb20nCkdJVF9VU0VSX01BSUw9IiIK \
CiMgZGVmYXVsdCBnaXQgbWVyZ2UgdG9vbCB0byB1c2UKR0lUX01FUkdFX1RPT0w9InZzY29kZSIK \
CiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBBV1MgaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLQoKIyBlbWFpbCB1c2VkIHRvIGNvbm5lY3QgdG8gYXdzCkFXU19VU0VSX01BSUw9ImZj \
aGFzdGFuZXRAZ21haWwuY29tIgoKIyBhcHAgaWQgdG8gY29ubmVjdCB0byBhd3MgYWNjb3VudApB \
V1NfQVBQX0lEPSIiCgpBV1NfUFJPRklMRT0iIgpBV1NfREVGQVVMVF9SRUdJT049IiIKQVdTX1RF \
U1RfU0VDUkVUX0lEPSIiCkFXU19ERUZBVUxUX0RPQ0tFUl9SRUdJU1RSWV9JRD0iIgoKIyB3aWxs \
IHVzZSBhd3MgY29uZmlndXJlIHNzbyB0byBjb25uZWN0IHRvIGF3cyAoaW5zdGVhZCBvZiBzYW1s \
MmF3cykKVVNFX0FXU19DT05GSUdVUkVfU1NPPTEKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBL \
OFMgaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBLdWJlRGVmYXVsdENvbmZp \
ZyB+Ly5rdWJlL2NvbmZpZyBnZW5lcmF0aW9uCiMgYXdzIHJlZ2lvbiBvZiB0aGUgY2x1c3RlciAo \
RWc6IHVzLWVhc3QtMSkKS1VCRV9DT05GSUdfUkVHSU9OX0NPREU9CgojIGF3cyBhcm4gb2YgdGhl \
IGNsdXN0ZXIuCiMgRWc6IGFybjphd3M6ZWNzOnJlZ2lvbjphd3NfYWNjb3VudF9pZDpjbHVzdGVy \
L015Q2x1c3RlcgpLVUJFX0NPTkZJR19DTFVTVEVSX0FSTj0KCiMgLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0KIyBEaXJlY3RvcmllcwojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIG92ZXJyaWRkZW4gY29u \
ZiBkaXJlY3RvcnkgdGhhdCB3aWxsIGJlIHVzZWQgdG8gb3ZlcnJpZGUKIyB0aGUgZGVmYXVsdCBj \
b25maWd1cmF0aW9uIHRoYXQgYXJlIGVtYmVkZGVkIGluIGJpbmFyaWVzCkNPTkZfT1ZFUlJJREVf \
RElSUz0oCiAgIiR7QkFTSF9ERVZfRU5WX1JPT1RfRElSfS9jb25mLm92ZXJyaWRlIgopCgojIHdo \
ZXJlIHRvIGluc3RhbGwgYmFzaC10b29scywgLi4uCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1 \
MwpQUk9KRUNUU19ESVI9IiR7SE9NRX0vcHJvamVjdHMiCgojIHdoZXJlIG92ZXJyaWRkZW4gY29u \
ZmlnIGZpbGVzIHdpbGwgYmUgYmFja2VkIHVwCkJBQ0tVUF9ESVI9IiR7QkFTSF9ERVZfRU5WX1JP \
T1RfRElSfS9iYWNrdXAiCiMgYmFja3VwIGZpbGVzL2RpcnMgYmVmb3JlIGluc3RhbGxpbmcgbmV3 \
IGZpbGUgKHVzdWFsbHkgMSwgYnV0IDAgaWYgdXNpbmcgZGlzdHJvKQpCQUNLVVBfQkVGT1JFX0lO \
U1RBTEw9MQoKIyBsb2dzIGRpcmVjdG9yeQpMT0dTX0RJUj0iJHtCQVNIX0RFVl9FTlZfUk9PVF9E \
SVJ9L2xvZ3MiCgojIGluc3RhbGxTY3JpcHRzIHJvb3QgZGlyCklOU1RBTExfU0NSSVBUU19ST09U \
X0RJUj0iJHtCQVNIX0RFVl9FTlZfUk9PVF9ESVJ9L2luc3RhbGxTY3JpcHRzIgoKIyAtLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLQojIEluc3RhbGxhdGlvbiBjb25maWd1cmF0aW9uCiMgLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0KCiMgQ29uZmlndXJhdGlvbiBmaWxlcyBhcmUgb3ZlcndyaXR0ZW4gZXZlbiBpZiBl \
eGlzdHMKIyAhISEhIEZpcnN0IHRpbWUgaW5pdGlhbGl6YXRpb246IGxldCB0aGlzIHZhbHVlIHRv \
IDEgISEhIQojIFZhbHVlIDA6CiMgLSBJZiB0YXJnZXQgY29uZmlndXJhdGlvbiBmaWxlIGV4aXN0 \
cywgZGlzcGxheXMgYSBtZXNzYWdlIGFuZCBkbyBub3Qgb3ZlcndyaXRlIHRoZSBmaWxlCiMgLSBJ \
ZiB0YXJnZXQgY29uZmlndXJhdGlvbiBmaWxlIGRvZXNuJ3QgZXhpc3QsIGluc3RhbGxzIHRoZSBm \
aWxlCiMgVmFsdWUgMQojIC0gaW5zdGFsbCBvciBvdmVyd3JpdGUgdGhlIGZpbGUgd2l0aG91dCBj \
aGVja2luZyBleGlzdGVuY2UKT1ZFUldSSVRFX0NPTkZJR19GSUxFUz0xCgojIFdpbmRvd3MgZmls \
ZXMgY2FuIGJlIG92ZXJyaWRkZW4gaWYgMQojIGlmIDAKIyAtIHNraXAgY2hhbmdlcyB0byAlVVNF \
UlBST0ZJTEUlLy53c2xjb25maWcKIyAtIHNraXAgY29weWluZyBmb250cwpDSEFOR0VfV0lORE9X \
U19GSUxFUz0xCgojIEluZGljYXRlIHRoYXQgaW5zdGFsbCBzY3JpcHQgY2FuIHdhcm4geW91IHVz \
aW5nIHNwZWFrZXIgd2hlbiB5b3VyIGlucHV0IGlzIG5lZWRlZApDQU5fVEFMS19EVVJJTkdfSU5T \
VEFMTEFUSU9OPTEKCiMgaWYgMCBpbnN0YWxsIHNjcmlwdCB3aWxsIHNraXAgYWxsIGludGVyYWN0 \
aXZlIGFjdGl2aXR5IChzYW1sMmF3cywgLi4uKSwKIyBzbyBkZXBlbmRlbnQgaW5zdGFsbGF0aW9u \
IHdpbGwgYmUgc2tpcHBlZCBhcyB3ZWxsCklOU1RBTExfSU5URVJBQ1RJVkU9MQoKIyBkaXNwbGF5 \
IGVsYXBzZWQgdGltZSBzaW5jZSBsYXN0IGxvZwpESVNQTEFZX0RVUkFUSU9OPTEKCiMgMCAgID0+ \
IG5vIHVwZ3JhZGUgYXQgYWxsCiMgbHRzID0+IFVQR1JBREUgdG8gbGF0ZXN0IHVidW50dSBsdHMg \
dmVyc2lvbgojIGRldiA9PiBVUEdSQURFIHRvIGxhdGVzdCB1YnVudHUgZGV2IHZlcnNpb24KIyBV \
c2UgaWYgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLAojIGNvdWxkIGNhdXNlIHNvbWUgcGFj \
a2FnZXMgdG8gbm90IGJlaW5nIGF2YWlsYWJsZSB5ZXQKVVBHUkFERV9VQlVOVFVfVkVSU0lPTj0w \
CgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgUHJvZmlsZSBjb25maWd1cmF0aW9uCiMgLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0KCiMgQ2hvb3NlIHlvdXIgcHJlZmVycmVkIHNoZWxsCiMgcG9zc2libGUg \
Y2hvaWNlczogU2hlbGxCYXNoIChMZWdhY3kgZXhwZXJpZW5jZSksIFNoZWxsWnNoIChSZWNvbW1l \
bmRlZCBleHBlcmllbmNlKQpQUkVGRVJSRURfU0hFTEw9IlNoZWxsWnNoIgoKIyBac2ggdGhlbWUg \
dG8gdXNlCiMgcG9zc2libGUgY2hvaWNlczogcG93ZXJsZXZlbDEway9wb3dlcmxldmVsMTBrLCBv \
aG15cG9zaCwgc2luZHJlc29yaHVzL3B1cmUsIHN0YXJzaGlwL3N0YXJzaGlwClpTSF9QUkVGRVJS \
RURfVEhFTUU9InBvd2VybGV2ZWwxMGsvcG93ZXJsZXZlbDEwayIKCiMgaWYgcHJlZmVycmVkIHRo \
ZW1lIGlzIG9obXlwb3NoLCB0aGUgcGF0aCB0byB0aGUgdGhlbWUgZmlsZQpQT1NIX1RIRU1FX1BB \
VEg9IiR7SE9NRX0vLmJhc2gtZGV2LWVudi90aGVtZXMuZC9vaG15cG9zaFRoZW1lcy9qYW5kZWRv \
YmJlbGVlci55YW1sIgoKIyBpZiBwcmVmZXJyZWQgdGhlbWUgaXMgc3RhcnNoaXAKU1RBUlNISVBf \
VEhFTUU9IiR7SE9NRX0vLmJhc2gtZGV2LWVudi90aGVtZXMuZC9zdGFyc2hpcFRoZW1lcy9kZWZh \
dWx0LnRvbWwiClNUQVJTSElQX0NBQ0hFPSIke0hPTUV9Ly5jYWNoZS8uc3RhcnNoaXAiCgojIERp \
c3BsYXkgRm9ydHVuZSB0b29sdGlwIGF0IGJhc2gvenNoIHNlc3Npb24gb3BlbgpTSE9XX0ZPUlRV \
TkVTPTEKCiMgRGlzcGxheSBNT1REIGF0IGJhc2gvenNoIHNlc3Npb24gb3BlbgpTSE9XX01PVEQ9 \
MQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIFdTTENPTkZJRwojIFRoZXNlIHBhcmFtZXRlcnMg \
YXV0b21hdGljYWxseSBjb25maWd1cmUgJVVTRVJQUk9GSUxFJS8ud3NsY29uZmlnIGZpbGUuCiMg \
QHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy93aW5kb3dzL3dzbC93c2wtY29u \
ZmlnCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgUmVjb21tZW5kZWQgNTAlIG9mIHRvdGFsIG1l \
bW9yeQpXU0xDT05GSUdfTUFYX01FTU9SWT04R0IKCiMgcGVyc29uYWxseSBJIHByZWZlciBydW4g \
b3V0IG9mIG1lbW9yeSBpbnN0ZWFkIG9mIGJlZ2lubmluZyBzd2FwcGluZwojIFNvIEkga25vdyBp \
bW1lZGlhdGVseSBpZiBzb21lIHByb2Nlc3NlcyBoYXZlIHRvIGJlIHN0b3BwZWQKV1NMQ09ORklH \
X1NXQVA9MAoKIyBpZiAxIGl0IHdpbGwgY29tcHV0ZSBhdXRvbWF0aWNhbGx5IHRoZSBtYXggdmhk \
IHNpemUKIyBkZWZhdWx0ICgxLzMgb2YgZGlzayBzaXplLCBtaW4gMTUwR0IpCiMgaWYgMCBpdCB3 \
aWxsIHVzZSB3c2wgZGVmYXVsdCB2YWx1ZSAoMVRCKQpXU0xDT05GSUdfQ09NUFVURV9NQVhfVkhE \
X1NJWkU9MQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIEhhY2tzCiMgb24gc29tZSBjb25maWd1 \
cmF0aW9ucyB3ZSBoYXZlIHRvIGZvcmNlIHBhdGggb2Ygc29tZSB3aW5kb3dzIGNvbW1hbmRzCiMg \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0KCiNQT1dFUlNIRUxMX0JJTj0vbW50L2MvV2luZG93cy9TeXN0 \
ZW0zMi9XaW5kb3dzUG93ZXJTaGVsbC92MS4wL3Bvd2Vyc2hlbGwuZXhlCiNJUENPTkZJR19CSU49 \
L21udC9jL1dpbmRvd3Mvc3lzdGVtMzIvaXBjb25maWcuZXhlCiNXU0xfRVhFX0JJTj0vbW50L2Mv \
V2luZG93cy9zeXN0ZW0zMi93c2wuZXhlCgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgR2VuZXJh \
bCBkaXN0cmlidXRpb24gaW5mb3JtYXRpb24KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBob3N0 \
bmFtZSBvZiB0aGUgZGlzdHJvCkRJU1RST19IT1NUTkFNRT0id3NsSG9zdCIK" \
  "755"

declare -gx embed_file_envFileTemplate="${PERSISTENT_TMPDIR:-/tmp}/e45723bdbf29adda89f24f72a94da7e21df12389872dca4558684132a580a936/envFileTemplate"

  local envFile="${BASH_DEV_ENV_ROOT_DIR}/.env"
  # shellcheck disable=SC2154
  Engine::Config::createEnvFileFromTemplate \
    "${envFile}" "${embed_file_envFileTemplate}" || exit 1
  set -o allexport
  # shellcheck source=/.env.template
  source <(echo "${embed_file_envFileTemplate}")
  # shellcheck source=/.env
  source "${BASH_DEV_ENV_ROOT_DIR}/.env"
  set +o allexport
  export STATS_DIR="${LOGS_DIR}/stats"
  if [[ ! -d "${STATS_DIR}" ]]; then
    mkdir -p "${STATS_DIR}" || true
  fi
  export LOGS_INSTALL_SCRIPTS_DIR="${LOGS_DIR}/installScripts"
  if [[ ! -d "${LOGS_INSTALL_SCRIPTS_DIR}" ]]; then
    mkdir -p "${LOGS_INSTALL_SCRIPTS_DIR}" || true
  fi

  # load environment variables ID, VERSION_CODENAME
  Engine::Config::loadOsRelease
  Engine::Config::loadUserVariables

  if ! Engine::Config::checkEnv "${BASH_DEV_ENV_ROOT_DIR}/.env"; then
    Log::displayError "one or more variables are invalid, check above logs and fix '${envFile}' file accordingly"
    return 1
  fi

  Engine::Config::loadHostIp

  Engine::Config::requireWslu

  #Linux::Wsl::initEnv
  Engine::Config::loadWslVariables

  Log::requireLoad

  Engine::Config::loadSshKey

  Engine::Config::loadLocaleConfig

  export BASH_DEV_ENV_CONFIG_LOADED=1
}


# @description deduce wsl host ip
# @set HOST_IP exported env containing the IP
Engine::Config::loadHostIp() {
  HOST_IP="$(/sbin/ip route | awk '/default/ { print $3 }')"

  export HOST_IP
}


# @description load locale configuration
Engine::Config::loadLocaleConfig() {
  if [[ "${BASH_DEV_ENV_CONFIG_LOADED:-0}" = "1" ]]; then
    return 0
  fi
  if [[ "${LOAD_LOCALE_CONFIG:-1}" = "1" && ! -f "${PERSISTENT_TMPDIR}/localeConfig.initialized" ]]; then
    Log::displayInfo "Initializing locale en_US.UTF-8"
    export PATH="${PATH}:${HOME}/.local/bin"
    sudo sed -E -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    echo 'LANG="en_US.UTF-8"' | sudo tee /etc/default/locale >/dev/null
    echo "LANG=en_US.UTF-8" | sudo tee /etc/locale.conf >/dev/null
    sudo locale-gen en_US.UTF-8
    sudo dpkg-reconfigure --frontend=noninteractive locales
    export LC_ALL=C
    export LANG=en_US.UTF-8
    export LC_MESSAGES=en_US.UTF-8
    touch "${PERSISTENT_TMPDIR}/localeConfig.initialized"
  fi
}


# @description load /etc/os-release file
# @set NAME
# @set VERSION
# @set ID
# @set ID_LIKE
# @set PRETTY_NAME
# @set VERSION_ID
# @set HOME_URL
# @set SUPPORT_URL
# @set BUG_REPORT_URL
# @set PRIVACY_POLICY_URL
# @set VERSION_CODENAME
# @set UBUNTU_CODENAME
Engine::Config::loadOsRelease() {
  if [[ ! -f /etc/os-release ]]; then
    Log::displayError "file /etc/os-release does not exists"
    return 1
  fi
  # This will load environment variables ID, VERSION_CODENAME, ...
  set -o allexport
  source /etc/os-release
  set +o allexport
}


# @description load pageant and ssh key
# you can provide ssh key by env variable SSH_PRIVATE_KEY
# or if empty, file ~/.ssh/id_rsa will be used if present
# @env SSH_PRIVATE_KEY ssh key provided by env variable
# @env AUTHORIZE_SSH_KEY_USAGE if 0, no ssh key is loaded
# @env LOAD_SSH_KEY feature flag used in distro mode
# @env SKIP_REQUIRES ignore loading if set to 1
Engine::Config::loadSshKey() {
  if [[ "${LOAD_SSH_KEY:-1}" = "0" || "${SKIP_REQUIRES:-0}" = "1" ]]; then
    # ignore in distro mode
    return 0
  fi
  if [[ "${AUTHORIZE_SSH_KEY_USAGE:-0}" = "0" ]]; then
    Log::displaySkipped "Ssh key will not be loaded as you set AUTHORIZE_SSH_KEY_USAGE to 0"
    return 0
  fi
  if [[ -n "${SSH_AUTH_SOCK}" && -n "${SSH_AGENT_PID}" ]]; then
    Log::displaySkipped "Ssh agent skipped as variables SSH_AUTH_SOCK and SSH_AGENT_PID are set"
    return 0
  fi

  if [[ -z "${SSH_PRIVATE_KEY}" && ! -f "${HOME}/.ssh/id_rsa" ]]; then
    Log::displayError "File '${HOME}/.ssh/id_rsa' is missing and env variable SSH_PRIVATE_KEY is empty"
    return 1
  fi
  local errorCode=0
  ssh-add -l &>/dev/null || errorCode=$?
  if [[ "${errorCode}" = "2" ]]; then
    # ssh agent is not started
    Log::displayInfo "Starting ssh agent"
    eval "$(ssh-agent)" || return 2
    export SSH_AUTH_SOCK
    export SSH_AGENT_PID
  fi

  if [[ -n "${SSH_PRIVATE_KEY}" ]]; then
    base64 -d <<<"${SSH_PRIVATE_KEY}" >"${HOME}/.ssh/id_rsa" || {
      Log::displayError "Failed to decode SSH_PRIVATE_KEY"
      return 2
    }
    chmod 600 "${HOME}/.ssh/id_rsa" || {
      Log::displayError "Failed to set permissions on SSH key"
      return 3
    }
  fi
  ssh-keygen -f ~/.ssh/id_rsa -y >~/.ssh/id_rsa.pub || {
    Log::displayError "Failed to generate public key from private key"
    return 4
  }
  ssh-add "${HOME}/.ssh/id_rsa" || return 5

  # Check key has been added to ssh agent
  ssh-add -l &>/dev/null || {
    Log::displayError "Your ssh key has not been loaded"
    return 6
  }
}


# @description deduce HOME, USER_ID, USERGROUP_ID and USERGROUP from USERNAME
# @env USERNAME String the name of the user
# @set USER_ID String
# @set USERGROUP String
# @set USERGROUP_ID String
# @set USER_SHELL String current user shell
# @set HOME String
# @env REMOTE String prefix command to run commands remotely
Engine::Config::loadUserVariables() {
  # deduce user home and group
  local -a split
  local IFS=':'
  # shellcheck disable=SC2207
  split=($(${REMOTE:-} getent passwd "${USERNAME}"))
  USER_ID="${split[2]}"
  USERGROUP_ID="${split[3]}"
  HOME="${split[5]}"
  USER_SHELL="${split[6]}"
  USERGROUP="$(${REMOTE:-} id -gn "${USERNAME}")"

  if [[ -z "${USERGROUP}" || -z "${HOME}" ]]; then
    Log::displayError "USERNAME - unable to deduce USERGROUP, HOME from USERNAME"
    return 1
  fi

  export HOME
  export USER_ID
  export USERGROUP_ID
  export USERGROUP
  export USER_SHELL
}


# @description load wsl env variables
# @set BASE_MNT_C
# @set WINDOWS_DIR
# @set WINDOWS_PROFILE_DIR
# @set LOCAL_APP_DATA
# @set WINDOW_PATH
# @set WSL_EXE_BIN
# @set IPCONFIG_BIN
# @set POWERSHELL_BIN
# @env WSL_EXE_BIN
# @env IPCONFIG_BIN
# @env POWERSHELL_BIN
Engine::Config::loadWslVariables() {
  if ! Assert::wsl; then
    # skip
    return 0
  fi

  local IFS=' '
  local -a split=()
  # shellcheck disable=SC2207
  split=($(grep -m 1 -E 'C:\\[^ ]+ ([^ ]+) ' /proc/mounts 2>/dev/null)) || {
    # probably not wsl after all
    return 0
  }
  # shellcheck disable=SC1003
  BASE_MNT_C="${split[1]}"
  export BASE_MNT_C

  Linux::Wsl::cachedWslpathFromWslVar2 WINDOWS_DIR SystemRoot
  WINDOWS_DIR="${WINDOWS_DIR:-${BASE_MNT_C:-/mnt/c}/Windows}"
  export WINDOWS_DIR

  Linux::Wsl::cachedWslpathFromWslVar2 WINDOWS_PROFILE_DIR USERPROFILE
  WINDOWS_PROFILE_DIR="${WINDOWS_PROFILE_DIR:-${BASE_MNT_C:-/mnt/c}/Users/${WINDOWS_USERNAME}}"
  export WINDOWS_PROFILE_DIR

  Linux::Wsl::cachedWslpathFromWslVar2 LOCAL_APP_DATA LOCALAPPDATA
  export LOCAL_APP_DATA

  # WINDOW_PATH
  Linux::Wsl::cachedWslvar2 WINDOW_PATH PATH
  WINDOW_PATH="${WINDOW_PATH//;/:}"
  WINDOW_PATH="${WINDOW_PATH//\\//}"
  WINDOW_PATH="${WINDOW_PATH//C:/${BASE_MNT_C:-/mnt/c}}"

  deduceBin() {
    local var="$1"
    local expectedFullPath="$2"
    local expectedBin="$3"
    if [[ -z "${!var+xxx}" ]]; then
      eval "${var}=${expectedFullPath}"
      if ! command -v "${!var}" >/dev/null 2>&1; then
        eval "${var}=$(command -v "${expectedBin}" 2>/dev/null)"
      fi
    fi
    if [[ -z "${!var:-}" ]] || ! command -v "${!var}" >/dev/null 2>&1; then
      Log::fatal "variable ${var} - command ${expectedBin} not found"
    fi
    # shellcheck disable=SC2163
    export "${var}"
  }

  checkBinary() {
    local var="$1"
    if [[ -z "${var}" || ! -x "${!var}" ]]; then
      Log::displayError "variable ${var} - binary '${!var}' does not exist or not executable"
      ((errorCount++))
    fi
  }

  local errorCount=0
  # IPCONFIG_BIN - which ipconfig.exe does not work when executed as root
  deduceBin IPCONFIG_BIN "${WINDOWS_DIR}/System32/ipconfig.exe" "ipconfig.exe"
  checkBinary IPCONFIG_BIN

  deduceBin WSL_EXE_BIN "${WINDOWS_DIR}/System32/wsl.exe" "wsl.exe"
  checkBinary WSL_EXE_BIN

  deduceBin POWERSHELL_BIN "${WINDOWS_DIR}/System32/WindowsPowerShell/v1.0/powershell.exe" "powershell.exe"
  checkBinary POWERSHELL_BIN

  return "${errorCount}"
}


# @description install apt wslu if necessary providing wslvar, wslpath
Engine::Config::requireWslu() {
  if [[ "${LOAD_WSLU:-1}" = "0" ]]; then
    return 0
  fi
  if ! command -v wslvar &>/dev/null; then
    Log::displayInfo "Installing pre-requisite Wslu : wslvar, wslpath, ... commands"
    Linux::Apt::installIfNecessary --no-install-recommends wslu

    # Fix WSL2 interop issue
    # @see https://github.com/microsoft/WSL/issues/7181
    sudo systemctl mask systemd-binfmt.service
    sudo update-binfmts --enable
  fi
}


# @description default env file with all default values
# @stdout the default env filepath
Env::createDefaultEnvFile() {
  local envFile
  envFile="$(Framework::createTempFile "createDefaultEnvFileEnvFile")" || return 2

  (
    echo "BASH_FRAMEWORK_THEME=${BASH_FRAMEWORK_THEME:-default}"
    echo "BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL:-${__LEVEL_OFF}}"
    echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL:-${__LEVEL_INFO}}"
    # shellcheck disable=SC2016
    echo 'BASH_FRAMEWORK_LOG_FILE="${BASH_FRAMEWORK_LOG_FILE:-"${FRAMEWORK_ROOT_DIR}/logs/${SCRIPT_NAME}.log"}"'
    echo "BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION=${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION:-5}"
  ) >"${envFile}"
  echo "${envFile}"
}


# @description prepend directories to the PATH environment variable
# @arg $@ args:String[] list of directories to prepend
# @set PATH update PATH with the directories prepended
Env::pathPrepend() {
  local arg
  for arg in "$@"; do
    if [[ -d "${arg}" && ":${PATH}:" != *":${arg}:"* ]]; then
      PATH="$(realpath "${arg}"):${PATH}"
    fi
  done
}


# @description ensure env files are loaded
# @arg $@ list of default files to load at the end
# @exitcode 1 if one of env files fails to load
# @stderr diagnostics information is displayed
# shellcheck disable=SC2120
Env::requireLoad() {
  export REQUIRE_FUNCTION_ENV_REQUIRE_LOAD_LOADED=1

  local -a defaultFiles=("$@")
  # get list of possible config files
  local -a configFiles=()
  local defaultEnvFile
  defaultEnvFile="$(Env::createDefaultEnvFile)" || return 1
  configFiles+=("${defaultEnvFile}")
  if [[ -n "${BASH_FRAMEWORK_ENV_FILES[0]+1}" ]]; then
    # BASH_FRAMEWORK_ENV_FILES is an array
    configFiles+=("${BASH_FRAMEWORK_ENV_FILES[@]}")
  fi
  if [[ -f "${FRAMEWORK_ROOT_DIR}/.framework-config" ]]; then
    configFiles+=("${FRAMEWORK_ROOT_DIR}/.framework-config")
  fi
  local localFrameworkConfigFile
  BASH_FRAMEWORK_DISPLAY_LEVEL="${__LEVEL_INFO}" \
    BASH_FRAMEWORK_LOG_LEVEL="${__LEVEL_OFF}" \
    Conf::loadNearestFile ".framework-config" localFrameworkConfigFile "$(pwd)" || true
  if [[ -f "${localFrameworkConfigFile}" ]]; then
    configFiles+=("${localFrameworkConfigFile}")
  fi
  configFiles+=("${optionEnvFiles[@]}")
  configFiles+=("${defaultFiles[@]}")

  while IFS='' read -r file; do
    # shellcheck source=/src/Env/createDefaultEnvFile.sh
    CURRENT_LOADED_ENV_FILE="${file}" source "${file}" || {
      Log::displayError "while loading config file: ${file}"
      return 1
    }
  done < <(printf '%s\n' "${configFiles[@]}" | awk '!x[$0]++')
}


# @description get number of seconds since last modification of the file
# @arg $1 file:String file path
# @exitcode 1 if file does not exist
# @stdout number of seconds since last modification of the file
File::elapsedTimeSinceLastModification() {
  local file="$1"
  if [[ ! -f "${file}" ]]; then
    return 1
  fi
  local lastModificationTimeSeconds diff
  lastModificationTimeSeconds="$(stat -c %Y "${file}")"
  ((diff = $(date +%s) - lastModificationTimeSeconds))
  echo -n "${diff}"
}


# @description delete files older than n days in given path
# @warning use this function with caution as it will delete all files in given path without any prompt
# @arg $1 path:String the directory in which files will be deleted or the file to delete
# @arg $2 mtime:String expiration time in days (eg: 1 means 1 day) (default value: 1). Eg: +1 match files that have been accessed at least two days ago (rounding effect)
# @arg $3 maxdepth:int Descend at most levels (a non-negative integer) levels of directories below the starting-points. (default value: 1)
# @exitcode 1 if path not provided or empty
# @exitcode * find command failure code
# @stderr find output on error or diagnostics logs
# @see man find atime
File::garbageCollect() {
  local path="$1"
  local mtime="$2"
  local maxdepth="${3:-1}"

  if [[ -z "${path}" ]]; then
    return 1
  fi

  if [[ ! -e "${path}" ]]; then
    # path already removed
    return 0
  fi

  Log::displayInfo "Garbage collect files older than ${mtime} days in path ${path} with max depth ${maxdepth}"
  find "${path}" -depth -maxdepth "${maxdepth}" -type f -mtime "${mtime}" -print -delete
}


# @description print the resolved path relative to DIR
# do not check for path existence
# @arg $1 srcFile:String the file to resolve
# @arg $2 relativeTo:String the directory
# @stdout the resolved path relative to DIR
File::relativeToDir() {
  local srcFile="$1"
  local relativeTo="$2"

  realpath -m --relative-to="${relativeTo}" "${srcFile}"
}


# @description search a file in parent directories
#
# @arg $1 fromPath:String path
# @arg $2 fileName:String
# @arg $3 untilInclusivePath:String (optional) find for given file until reaching this folder (default value: /)
# @arg $@ untilInclusivePaths:String[] list of untilInclusivePath
# @stdout The filename if found
# @exitcode 1 if the command failed or file not found
File::upFind() {
  local fromPath="$1"
  shift || true
  local fileName="$1"
  shift || true
  local untilInclusivePath="${1:-/}"
  shift || true

  if [[ -f "${fromPath}" ]]; then
    fromPath="${fromPath%/*}"
  fi
  while true; do
    if [[ -f "${fromPath}/${fileName}" ]]; then
      echo "${fromPath}/${fileName}"
      return 0
    fi
    if Array::contains "${fromPath}" "${untilInclusivePath}" "$@" "/"; then
      return 1
    fi
    fromPath="$(readlink -f "${fromPath}"/..)"
  done
  return 1
}

# shellcheck disable=SC2120

# @description uniq command need input file to be sorted
# here We are using awk that do not need file to be sorted
# to get uniq values
# iterates over each file and prints (default awk behavior)
# each unique line; only takes first value and ignores duplicates
# Note ! be careful of memory usage as each unique $0 is stored in an array
# @exitcode * if one of the filter command fails
# @stdin you can use stdin as alternative to str argument
# @stdout the filtered content
# shellcheck disable=SC2120
Filters::uniqUnsorted() {
  awk '!seen[$0]++' "$@"
}


# @description create a temp file using default TMPDIR variable
# @env TMPDIR String (default value /tmp)
# @arg $1 templateName:String template name to use(optional)
Framework::createTempFile() {
  mktemp -p "${TMPDIR:-/tmp}" -t "${1:-}.XXXXXXXXXXXX"
}


# @description installs file to given directory
#
# callbacks parameters `${fromFile} ${targetFile} $@`
# @arg $1 fromFile - original file to copy
# @arg $2 targetFile - target file
# @arg $3 userName:String (optional) (default: ${USERNAME}) the user name that will be used to set target files ownership
# @arg $4 userGroup:String (optional) (default: ${USERNAME}) the group name that will be used to set target files ownership
# @arg $5 successCallback:Function the callback to call when file is installed successfully, by default setUserRights callback is called
# @arg $6 failureCallback:Function the callback to call when file installation has failed, by default unableToCopyCallback callback is called
# @arg $@ callbacksParams:String[] additional parameters passed to callbacks
# @exitcode 1 if fromFile is not readable
# @exitcode 2 if backup file failure
# @exitcode 3 if copy failure
# @exitcode 0 on success or if OVERWRITE_CONFIG_FILES=0
# @exitcode 0 on success or if CHANGE_WINDOWS_FILES=0 and target file is a windows file
# @env OVERWRITE_CONFIG_FILES Boolean (default:0) if 1 will overwrite existing directory
# @env CHANGE_WINDOWS_FILES Boolean (default:0) if 1 and target file is in windows file system, overwrite it
# @env USERNAME (default: root) the user name that will be used to set target files ownership
# @env USERGROUP (default: root) the group name that will be used to set target files ownership
# @env BASE_MNT_C String windows C drive base PATH
# @env FRAMEWORK_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @env SUDO String allows to use custom sudo prefix command
# @env BACKUP_BEFORE_INSTALL Boolean (default: 1) backup file before installing the file
Install::file() {
  local fromFile="$1"
  local targetFile="$2"
  local userName="${3:-${USERNAME:-root}}"
  local userGroup="${4:-${USERGROUP:-root}}"
  local successCallback=${5:-Install::setUserRightsCallback}
  local failureCallback=${6:-Install::unableToCopyCallback}
  shift 6 || true

  if [[ ! -f "${fromFile}" || ! -r "${fromFile}" ]]; then
    Log::displayError "cannot read source file '${fromFile}'"
    return 1
  fi

  # skip if OVERWRITE_CONFIG_FILES is 0 and target file exists
  if [[ "${OVERWRITE_CONFIG_FILES}" = "0" && -f "${targetFile}" ]]; then
    Log::displayWarning "File '${targetFile}' exists - Skip install (because OVERWRITE_CONFIG_FILES=0 in .env file)"
    return 0
  fi

  # skip if CHANGE_WINDOWS_FILES is 0 and target dir is c drive
  if [[ "${CHANGE_WINDOWS_FILES}" = "0" && "${targetFile}" =~ ^${BASE_MNT_C} ]]; then
    Log::displayWarning "File '${targetFile}' - Skip install (because CHANGE_WINDOWS_FILES=0 in .env file)"
    return 0
  fi

  local targetDir="${targetFile%/*}"
  if ! ${SUDO} test -d "${targetDir}"; then
    ${SUDO:-} mkdir -p "${targetDir}"
    ${SUDO:-} chown "${userName}":"${userGroup}" "${targetDir}"
  fi
  local fromDir="${fromFile%/*}"
  local fromFilename="${fromFile##*/}"

  local prettyFromDir
  # shellcheck disable=SC2295
  prettyFromDir="${fromDir#${PRETTY_ROOT_DIR:-${FRAMEWORK_ROOT_DIR}}/}"
  if diff -q "${fromFile}" "${targetFile}" &>/dev/null; then
    Log::displayStatus "No changes detected. No need to update '${targetFile}' from '${prettyFromDir}/${fromFilename}'"
    return 0
  fi

  if [[ "${BACKUP_BEFORE_INSTALL:-1}" = "1" ]]; then
    Backup::file "${targetFile}" || return 2
  fi

  if ${SUDO:-} cp "${fromFile}" "${targetFile}"; then
    # shellcheck disable=SC2295
    Log::displaySuccess "Installed file '${targetFile}' from '${prettyFromDir}/${fromFilename}'"
    ${successCallback} "${fromFile}" "${targetFile}" "${userName}" "${userGroup}" "${prettyFromDir}" "${fromFilename}"
  else
    # shellcheck disable=SC2295
    Log::displayError "unable to copy file '${targetFile}' from '${fromDir#${FRAMEWORK_ROOT_DIR}/}/${fromFilename}'"
    ${failureCallback} "${fromFile}" "${targetFile}" "${userName}" "${userGroup}" "${prettyFromDir}" "${fromFilename}"
    return 3
  fi
}


# @description install callback
#   set file with root ownership and execution bit
# @arg $1 fromFile:String
# @arg $2 targetFile:String
# @arg $3 userName:String (optional) (default: ${USERNAME}) the user name that will be used to set target files ownership
# @arg $4 userGroup:String (optional) (default: ${USERNAME}) the group name that will be used to set target files ownership
# @env USERNAME (default: root) the user name that will be used to set target files ownership
# @env USERGROUP (default: root) the group name that will be used to set target files ownership
# @env SUDO String allows to use custom sudo prefix command
# @exitcode 1 on any failure
# @see Install::file
Install::setUserRightsCallback() {
  # shellcheck disable=SC2034 # $1 not used
  local fromFile="$1"
  local targetFile="$2"
  local userName="${3:-${USERNAME:-root}}"
  local userGroup="${4:-${USERGROUP:-root}}"

  ${SUDO:-} chown "${userName}":"${userGroup}" "${targetFile}"
}


# @description install dir to given directory but backup it before
# @arg $1 fromDir:String the source base directory
# @arg $2 toDir:String the target base directory
# @env OVERWRITE_CONFIG_FILES Boolean (default:0) if 1 will overwrite existing files
# @env CHANGE_WINDOWS_FILES Boolean (default:0) if 1 and target directory is in windows file system, overwrite it
# @env USERNAME (default: ${USERNAME} if SUDO empty else root) the user name that will be used to set target files ownership
# @env USERGROUP (default: ${USERGROUP} if SUDO empty else root) the group name that will be used to set target files ownership
# @env BASE_MNT_C String windows C drive base PATH
# @env PRETTY_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @env SUDO String allows to use custom sudo prefix command
# @env BACKUP_BEFORE_INSTALL Boolean (default:1) backup directory before installing the dir
# @exitcode 1 if source directory is not readable
# @exitcode 2 if error during structure replication
# @exitcode 2 if error during file copy
# @exitcode 0 if copy successful
# @exitcode 0 with warning message if CHANGE_WINDOWS_FILES=0 and target directory in C drive
# @stderr diagnostics information is displayed, skipped information if OVERWRITE_CONFIG_FILES or CHANGE_WINDOWS_FILES are set to 1
Install::structure() {
  local fromDir="$1"
  local toDir="$2"
  local userName="root"
  local userGroup="root"
  if [[ -z "${SUDO:-}" ]]; then
    userName="${USERNAME:-root}"
    userGroup="${USERGROUP:-root}"
  fi

  if [[ ! -d "${fromDir}" || ! -r "${fromDir}" ]]; then
    Log::displayError "Install::structure - cannot read source directory '${fromDir}'"
    return 1
  fi

  # skip if CHANGE_WINDOWS_FILES is 0 and target dir is c drive
  if [[ "${CHANGE_WINDOWS_FILES:-0}" = "0" && "${toDir}" =~ ^${BASE_MNT_C:-/mnt/c} ]]; then
    Log::displayWarning "Install::structure - Directory '${fromDir}' - Skip install (because CHANGE_WINDOWS_FILES=0 in .env file)"
    return 0
  fi

  # first replicate directory structure
  # shellcheck disable=SC2317
  createStructure() {
    local dir="$1"
    if ! ${SUDO} test -d "${dir}"; then
      if ! ${SUDO:-} mkdir -p "${dir}"; then
        Log::displayError "Install::structure - impossible to create directory '${dir}'"
        exit 1
      fi
    fi

    if ! ${SUDO:-} chown "${userName}":"${userGroup}" "${dir}"; then
      Log::displayError "Install::structure - impossible to update directory owner '${dir}' with ${userName}:${userGroup}"
      exit 1
    fi
  }
  local dir

  (
    local dir
    shopt -s lastpipe
    # -links 2 allows to exclude empty directories
    ${SUDO:-} find "${fromDir}" -depth -type d -links 2 -print0 |
      while read -rd '' dir; do
        if ! createStructure "${toDir}/${dir#"${fromDir}"}"; then
          # error already reported by createStructure
          exit 1
        fi
      done || {
      if [[ "${PIPESTATUS[0]}" != "0" ]]; then
        Log::displayError "Install::structure - replicated directory structure - find directories on '${fromDir}' resulted in an error"
        exit 2
      fi
    }
  ) || return 2

  # for each file, copy it
  (
    local file
    shopt -s lastpipe
    ${SUDO:-} find "${fromDir}" -depth -type f -print0 |
      while read -rd '' file; do
        local localFile="${file#"${fromDir}/"}"
        if ! Install::file "${fromDir}/${localFile}" "${toDir}/${localFile}"; then
          # error already reported by Install::file
          exit 1
        fi
      done || {
      if [[ "${PIPESTATUS[0]}" != "0" ]]; then
        Log::displayError "Install::structure - replicated file structure - find files on '${fromDir}' resulted in an error"
        exit 2
      fi
    }
  ) || return 3

  # shellcheck disable=SC2295
  Log::displaySuccess "Installed directory '${toDir#${PRETTY_ROOT_DIR}/}' from '${fromDir#${PRETTY_ROOT_DIR}/}'"
}


# @description install callback
#   default callback used called when file copy has failed
# @arg $1 fromFile:String
# @arg $2 targetFile:String
# @env FRAMEWORK_ROOT_DIR used to make paths relative to this directory to reduce length of messages
# @exitcode 1 always fail
# @stderr diagnostics information is displayed
# @see Install::file
Install::unableToCopyCallback() {
  local fromDir="$1"
  local fileName="$2"
  local targetFile="$3"
  Log::fatal "unable to copy file '${fromDir#"${FRAMEWORK_ROOT_DIR}/"}/${fileName}' to '${targetFile}'"
}


# @description the command launch different actions(install, configure, test)
# depending on the options selected
# @env SKIP_INSTALL
# @env SKIP_CONFIGURE
# @env SKIP_TEST
# @env STATS_DIR
# @env LOGS_INSTALL_SCRIPTS_DIR
InstallScripts::command() {
  local logsDir="${LOGS_INSTALL_SCRIPTS_DIR:-#}"
  local statsDir="${STATS_DIR:-#}"
  local fullScriptName
  fullScriptName="$(fullScriptName)"
  local scriptName="${fullScriptName//\//@}"
  rm -f "${statsDir}/${scriptName}-"* || true

  # shellcheck disable=SC2317
  onInterrupt() {
    Log::displayError "${scriptName} aborted"
    exit 1
  }
  trap onInterrupt INT TERM ABRT

  local startDate logFile statsFile
  local installStatus="0"
  sourceHook() {
    local hookName="$1"
    local configDir
    # shellcheck disable=SC2154
    local -a overriddenDirs=()
    # shellcheck disable=SC2154
    if [[ -d "${embed_dir_hooks_dir}" ]]; then
      overriddenDirs+=("${embed_dir_hooks_dir}")
    fi
    local dir
    for dir in "${CONF_OVERRIDE_DIRS[@]}"; do
      overriddenDirs+=("${dir}/${scriptName//\//@}")
    done
    configDir="$(Conf::getOverriddenDir "${overriddenDirs[@]}")" || return 0

    # ensure necessary functions are imported
    # Assert::dirExists
    # Assert::fileExists
    hook="${configDir}/${hookName}.sh"
    if [[ -n "${hook}" && -f "${hook}" && -x "${hook}" ]]; then
      Log::displayInfo "Running hook ${hook}"
      # shellcheck source=src/_installScripts/_Defaults/SimpleTest-hooks/preInstall.sh
      source "${hook}" || {
        Log::displayError "${scriptName} - unable to load hook '${hook}'"
        exit 1
      }
    fi
  }
  local globalStatsFile="${statsDir}/${scriptName}-global.stat"
  local hook
  if [[ "${SKIP_INSTALL}" = "0" ]] && ! InstallScripts::scriptFunctionEmpty install; then
    LOG_CONTEXT="${scriptName} - " Log::headLine "INSTALL" "Installing ${scriptName}"
    logFile="${logsDir}/${scriptName}-install.log"
    statsFile="${statsDir}/${scriptName}-install.stat"

    # break at first install error
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        LOG_CONTEXT="${scriptName} - " Stats::statusLine "${statsFile}" "Installation"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preInstall || ((++failures))
      install || ((++failures))
      sourceHook postInstall || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}"
  fi

  local testInstallStatus="0"
  if [[ "${SKIP_TEST}" = "0" && "${installStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty testInstall; then
    Log::headLine "TEST" "Testing ${scriptName} installation"
    logFile="${logsDir}/${scriptName}-test-install.log"
    statsFile="${statsDir}/${scriptName}-test-install.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Test Install ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preTestInstall || ((++failures))
      testInstall || ((++failures))
      sourceHook postTestInstall || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || testInstallStatus="$?" || true
    if [[ "${testInstallStatus}" != "0" ]] && breakOnTestFailure; then
      # break if test script error
      exit "${testInstallStatus}"
    fi
  fi

  local configStatus="0"
  if [[ "${SKIP_CONFIGURE}" = "0" && "${installStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty configure; then
    Log::headLine "CONFIG" "Configuring ${scriptName}"
    logFile="${logsDir}/${scriptName}-config.log"
    statsFile="${statsDir}/${scriptName}-config.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Configuration ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preConfigure || ((++failures))
      configure || ((++failures))
      sourceHook postConfigure || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || configStatus="$?" || true

    if [[ "${configStatus}" != "0" ]] && breakOnConfigFailure; then
      # break if config script error
      exit "${configStatus}"
    fi
  fi

  local testConfigStatus="0"
  if [[ "${SKIP_TEST}" = "0" && "${installStatus}" = "0" && "${configStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty configure; then
    Log::headLine "TEST" "Testing ${scriptName} configuration"
    logFile="${logsDir}/${scriptName}-test-configuration.log"
    statsFile="${statsDir}/${scriptName}-test-configuration.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Test Configuration ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      sourceHook preTestConfigure || ((++failures))
      testConfigure || ((++failures))
      sourceHook postTestConfigure || ((++failures))
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || testConfigStatus="$?" || true
    if [[ "${testConfigStatus}" != "0" ]] && breakOnTestFailure; then
      # break if test script error
      exit "${testConfigStatus}"
    fi
  fi

  local cleanBeforeExportStatus="0"
  if [[ "${PREPARE_EXPORT}" = "1" && "${installStatus}" = "0" ]] &&
    ! InstallScripts::scriptFunctionEmpty cleanBeforeExport; then
    Log::headLine "CLEAN" "Cleaning ${scriptName}"
    logFile="${logsDir}/${scriptName}-clean-before-export.log"
    statsFile="${statsDir}/${scriptName}-clean-before-export.stat"
    (
      startDate="$(date +%s)"
      # shellcheck disable=SC2317
      computeStats() {
        local rc=$1
        Stats::statusLine "${statsFile}" "Cleaning ${scriptName}"
        Stats::computeFromLog \
          "${logFile}" "${rc}" "${statsFile}" "${startDate}"
        Stats::aggregateGlobalStats \
          "${globalStatsFile}" "1" "${statsFile}"
        exit "${rc}"
      }
      trap 'computeStats "$?"' EXIT INT TERM ABRT

      local -i failures=0
      if ! InstallScripts::scriptFunctionEmpty cleanBeforeExport; then
        cleanBeforeExport || ((++failures))
        if [[ "${failures}" = "0" ]] && ! InstallScripts::scriptFunctionEmpty testCleanBeforeExport; then
          testCleanBeforeExport || ((++failures))
        fi
      fi
      exit "${failures}"
    ) 2>&1 | tee "${logFile}" || cleanBeforeExportStatus="$?" || true

    if [[ "${cleanBeforeExportStatus}" != "0" ]]; then
      # break if config script error
      exit "${cleanBeforeExportStatus}"
    fi
  fi
}


# @description check that function is implemented
InstallScripts::isFunctionImplemented() {
  local functionName="$1"
  if ! Assert::functionExists "${functionName}"; then
    Log::displayError "$(scriptName) - Function ${functionName} is not implemented"
    return 1
  fi
}


# @description check that all needed functions are implemented
InstallScripts::isInterfaceMandatoryFunctionImplemented() {
  local -i failures=0
  InstallScripts::isFunctionImplemented helpDescription || ((++failures))
  InstallScripts::isFunctionImplemented helpLongDescription || ((++failures))
  InstallScripts::isFunctionImplemented scriptName || ((++failures))
  InstallScripts::isFunctionImplemented dependencies || ((++failures))
  InstallScripts::isFunctionImplemented listVariables || ((++failures))
  InstallScripts::isFunctionImplemented fortunes || ((++failures))
  InstallScripts::isFunctionImplemented helpVariables || ((++failures))
  InstallScripts::isFunctionImplemented defaultVariables || ((++failures))
  InstallScripts::isFunctionImplemented checkVariables || ((++failures))
  InstallScripts::isFunctionImplemented breakOnConfigFailure || ((++failures))
  InstallScripts::isFunctionImplemented breakOnTestFailure || ((++failures))
  InstallScripts::isFunctionImplemented install || ((++failures))
  InstallScripts::isFunctionImplemented testInstall || ((++failures))
  InstallScripts::isFunctionImplemented configure || ((++failures))
  InstallScripts::isFunctionImplemented testConfigure || ((++failures))
  return "${failures}"
}


# @description check if function is empty
# @arg $1 function:Function
# @exitcode 0 if function is considered empty (body with : or true)
InstallScripts::scriptFunctionEmpty() {
  local pattern="^[ \t]+(:|true)"
  if ! declare -f "$1" &>/dev/null; then
    return 0
  fi
  local functionBody
  functionBody=$(declare -f "$1")
  local line3 line4
  line3=$(sed '3q;d' <<<"${functionBody}")
  line4=$(sed '4q;d' <<<"${functionBody}")
  [[ "${line3}" =~ ${pattern} && "${line4}" = "}" ]]
}


# @description apt-get install
# @arg $@ softwares:String[] list of softwares to install
# @feature Retry::default
# Linux::requireSudoCommand
# @stdout diagnostics logs
Linux::Apt::install() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  Log::displayInfo "Apt install $*"
  Retry::default sudo apt-get install -y -q "$@"
}


# @description apt-get install if package is not installed yet
# @arg $@ packages:String[] list of packages to install
# @feature Retry::default
# Linux::requireSudoCommand
# @env SKIP_APT_GET_UPDATE
# @stdout diagnostics logs
Linux::Apt::installIfNecessary() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  local -a packages=("$@")
  local package
  local -i installNeeded=0
  for package in "${packages[@]}"; do
    if [[ "${package}" =~ ^[-]{1,2} ]]; then
      continue
    fi
    if ! Linux::Apt::isPackageInstalled "${package}"; then
      Log::displayInfo "Package ${package} is not installed"
      installNeeded=1
    fi
  done
  if ((installNeeded == 1)); then
    if [[ "${SKIP_APT_GET_UPDATE:-0}" = "0" ]]; then
      Linux::Apt::update
    fi
    Linux::Apt::install "${packages[@]}"
    for package in "${packages[@]}"; do
      if [[ "${package}" =~ ^-- ]]; then
        continue
      fi
      if ! Linux::Apt::isPackageInstalled "${package}"; then
        Log::displayWarning "Package ${package} does not appear to have been installed, check if you could have chosen the wrong package name (Eg: python3.9-distutils instead of python3-distutils)"
      fi
    done
  else
    Log::displayInfo "Apt install avoided as packages are already installed : ${packages[*]}"
  fi
}


# @description check if apt package is installed
# @arg $1 package:String the package name to check
# @stdout diagnostics logs
Linux::Apt::isPackageInstalled() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  local package="$1"
  dpkg -l "${package}" | grep -Eq "^ii  ${package}"
}


# @description update apt packages list
# @feature Retry::default
# Linux::requireSudoCommand
# @stdout diagnostics logs
Linux::Apt::update() {

  if [[ "${REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::requireUbuntu has not been loaded"
    exit 1
  fi

  Log::displayInfo "Apt update ..."
  Retry::default sudo apt-get update -y --fix-missing -o Acquire::ForceIPv4=true
}


declare -Agx bash_tools_wslpath=()
# @description retrieve wslpath using cache (cache is refreshed every day)
# @arg $@ args:String[] arguments to pass to wslpath
# @env WSL_TMPDIR String temp directory to store the wslpath cache (default value: PERSISTENT_TMPDIR), you can use TMPDIR instead
# @exitcode * if Linux::Wsl::originalWslpath cannot find the path
# @stderr diagnostics information is displayed
# @feature cache
Linux::Wsl::cachedWslpath2() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  # shellcheck disable=SC2034
  local -n cachedWslpath2_value=$1
  shift || true
  local tempEnvFile key
  tempEnvFile="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_tools_wslpath"

  key="$(Linux::Wsl::getKeyFromWslpathOptions "$@")"
  Cache::getPropertyValue2 \
    "${tempEnvFile}" \
    bash_tools_wslpath \
    cachedWslpath2_value \
    "${key}" \
    Linux::Wsl::originalWslpath "$@"
}


# @description retrieve path from wslvar and then use wslpath to resolve it
# using cache (cache is refreshed every day)
# @arg $1 var:String the var to retrieve using wslvar
# @arg $@ args:String[] (optional) additional arguments to pass to wslvar
# @env WSL_TMPDIR String temp directory to store the wslpath cache (default value: PERSISTENT_TMPDIR), you can use TMPDIR instead
# @exitcode 1 if var cannot be found in cache nor using Linux::Wsl::originalWslvar
# @exitcode 2 if path cannot be found in cache nor using Linux::Wsl::originalWslpath
# @stderr diagnostics information is displayed
# @feature cache
Linux::Wsl::cachedWslpathFromWslVar2() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  # shellcheck disable=SC2034
  local -n cachedWslpathFromWslVar2_value=$1
  shift || true
  local value
  Linux::Wsl::cachedWslvar2 value "$@" || return 1
  Linux::Wsl::cachedWslpath2 cachedWslpathFromWslVar2_value "${value}" || return 2
}


declare -Agx bash_tools_wslvar=()
# @description retrieve wslvar using cache (cache is refreshed every day)
# @arg $1 cachedWslvar2_var:&String the variable to set by reference if the value is found
# @arg $@ args:String[] arguments to pass to wslvar
# @env WSL_TMPDIR String temp directory to store the wslvar cache (default value: PERSISTENT_TMPDIR), you can use TMPDIR instead
# @exitcode * if Linux::Wsl::originalWslvar cannot find the variable
# @stderr diagnostics information is displayed
# @feature cache
Linux::Wsl::cachedWslvar2() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  # shellcheck disable=SC2034
  local -n cachedWslvar2_var="$1"
  shift || true
  local -a args=("$@")
  local tempWslvarFile="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_tools_wslvar"
  local key
  key="$(Linux::Wsl::getKeyFromWslpathOptions "${args[@]}")"
  Cache::getPropertyValue2 \
    "${tempWslvarFile}" \
    bash_tools_wslvar \
    cachedWslvar2_var \
    "${key}" \
    Linux::Wsl::originalWslvar "${args[@]}"
}


# @description Compute a cache from wslpath options
# @arg $@ args:String[] arguments passed to wslpath
# @stderr diagnostics information is displayed
# @stdout the cache key deduced from the options
# @feature cache
# @internal
Linux::Wsl::getKeyFromWslpathOptions() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  local options
  options=$(getopt -o "auwm" -- "$@" 2>/dev/null) || {
    Log::displayError "invalid options specified"
    return 1
  }
  local key="wslpath"
  eval set -- "${options}"
  while true; do
    case "$1" in
      -a | -u | -w | -m)
        key="${key}$1"
        ;;
      --)
        shift || true
        break
        ;;
      *)
        shift || true
        Log::displayWarning "Unknown key $1"
        ;;
    esac
    shift || true
  done
  key="${key}_$1"
  # replace some characters \:/
  key="${key//\\//}"
  key="${key//:/_}"
  key="${key////_}"
  echo "${key}"
}


# @description call simply original wslpath command
# @arg $@ args:String[] args to pass to wslpath
# @exitcode * wslpath exit code
# @stdout wslpath stdout
Linux::Wsl::originalWslpath() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  wslpath "$@" | sed -z '$ s/[\r\n]$//'
}


# @description call simply original wslvar command
# @arg $@ args:String[] args to pass to wslvar
# @exitcode * wslvar exit code
# @stdout wslvar stdout
Linux::Wsl::originalWslvar() {

  if [[ "${REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Linux::Wsl::requireWsl has not been loaded"
    exit 1
  fi

  wslvar "$@" | sed -z '$ s/[\r\n]$//'
}


# @description ensure linux runs under wsl
# @env WSL_GARBAGE_COLLECT int 0 to disable garbage collect of cache files
# @exitcode 1 if linux does not run under wsl
Linux::Wsl::requireWsl() {
  export REQUIRE_FUNCTION_LINUX__WSL_REQUIRE_WSL_LOADED=1

  Assert::wsl || return 1
  if [[ "${WSL_GARBAGE_COLLECT:-1}" = "1" ]]; then
    local tempEnvDir
    tempEnvDir="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}"
    File::garbageCollect "${tempEnvDir}/bash_tools_wslpath_${USER_ID:-$(id -un)}" "1"
    tempEnvDir="${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}"
    File::garbageCollect "${tempEnvDir}/bash_tools_wslvar_${USER_ID:-$(id -un)}" "1"
  fi
}


# @description retrieve linux distributor id
# @noargs
# @exitcode 1 if lsb_release fails or not found
# @stdout the linux distributor id
Linux::getDistributorId() {
  (
    source /etc/os-release
    echo "${ID}"
  )
}


# @description ensure command tar is available
# @exitcode 1 if tar command not available
# @stderr diagnostics information is displayed
Linux::requireTarCommand() {
  export REQUIRE_FUNCTION_LINUX_REQUIRE_TAR_COMMAND_LOADED=1

  Assert::commandExists tar
}


# @description ensure linux distribution is ubuntu
# @exitcode 1 if linux distribution is not ubuntu
Linux::requireUbuntu() {
  export REQUIRE_FUNCTION_LINUX_REQUIRE_UBUNTU_LOADED=1

  if ! Array::contains "$(Linux::getDistributorId)" "ubuntu" "debian"; then
    Log::fatal "this script should be executed under Ubuntu or Debian OS"
  fi
}


declare -g FIRST_LOG_DATE LOG_LAST_LOG_DATE LOG_LAST_LOG_DATE_INIT LOG_LAST_DURATION_STR
FIRST_LOG_DATE="${EPOCHREALTIME/[^0-9]/}"
LOG_LAST_LOG_DATE="${FIRST_LOG_DATE}"
LOG_LAST_LOG_DATE_INIT=1
LOG_LAST_DURATION_STR=""

# @description compute duration since last call to this function
# the result is set in following env variables.
# in ss.sss (seconds followed by milliseconds precision 3 decimals)
# @noargs
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @set LOG_LAST_LOG_DATE_INIT int (default 1) set to 0 at first call, allows to detect reference log
# @set LOG_LAST_DURATION_STR String the last duration displayed
# @set LOG_LAST_LOG_DATE String the last log date that will be used to compute next diff
Log::computeDuration() {
  if ((${DISPLAY_DURATION:-0} == 1)); then
    local -i duration=0
    local -i delta=0
    local durationStr deltaStr
    local -i currentLogDate
    currentLogDate="${EPOCHREALTIME/[^0-9]/}"
    if ((LOG_LAST_LOG_DATE_INIT == 1)); then
      LOG_LAST_LOG_DATE_INIT=0
      LOG_LAST_DURATION_STR="Ref"
    else
      duration=$(((currentLogDate - FIRST_LOG_DATE) / 1000000))
      delta=$(((currentLogDate - LOG_LAST_LOG_DATE) / 1000000))
      if ((duration > 59)); then
        durationStr=$(date -ud "@${duration}" +'%H:%M:%S')
      else
        durationStr="${duration}s"
      fi
      if ((delta > 59)); then
        deltaStr=$(date -ud "@${delta}" +'%H:%M:%S')
      else
        deltaStr="${delta}s"
      fi
      LOG_LAST_DURATION_STR="${durationStr}/+${deltaStr}"
    fi
    LOG_LAST_LOG_DATE="${currentLogDate}"
    # shellcheck disable=SC2034
    local microSeconds="${EPOCHREALTIME#*.}"
    LOG_LAST_DURATION_STR="$(printf '%(%T)T.%03.0f\n' "${EPOCHSECONDS}" "${microSeconds:0:3}")(${LOG_LAST_DURATION_STR}) - "
  else
    # shellcheck disable=SC2034
    LOG_LAST_DURATION_STR=""
  fi
}


# @description Display message using debug color (gray)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayDebug() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_DEBUG)); then
    Log::computeDuration
    echo -e "${__DEBUG_COLOR}DEBUG   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logDebug "$1"
}


# @description Display message using error color (red)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayError() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_ERROR)); then
    Log::computeDuration
    echo -e "${__ERROR_COLOR}ERROR   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logError "$1"
}


# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayHelp() {
  local type="${2:-HELP}"
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    Log::computeDuration
    echo -e "${__HELP_COLOR}${type}    - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logHelp "$1" "${type}"
}


# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayInfo() {
  local type="${2:-INFO}"
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    Log::computeDuration
    echo -e "${__INFO_COLOR}${type}    - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logInfo "$1" "${type}"
}


# @description Display message using skip color (yellow)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displaySkipped() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    Log::computeDuration
    echo -e "${__SKIPPED_COLOR}SKIPPED - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logSkipped "$1"
}


# @description Display message using info color (blue) but warning level
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayStatus() {
  local type="${2:-STATUS}"
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_WARNING)); then
    Log::computeDuration
    echo -e "${__INFO_COLOR}${type}  - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logStatus "$1" "${type}"
}


# @description Display message using success color (bg green/fg white)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displaySuccess() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    Log::computeDuration
    echo -e "${__SUCCESS_COLOR}SUCCESS - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logSuccess "$1"
}


# @description Display message using warning color (yellow)
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::displayWarning() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_WARNING)); then
    Log::computeDuration
    echo -e "${__WARNING_COLOR}WARN    - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  fi
  Log::logWarning "$1"
}


# @description Display message using error color (red) and exit immediately with error status 1
# @arg $1 message:String the message to display
# @env DISPLAY_DURATION int (default 0) if 1 display elapsed time information between 2 info logs
# @env LOG_CONTEXT String allows to contextualize the log
Log::fatal() {
  Log::computeDuration
  echo -e "${__ERROR_COLOR}FATAL   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}${1}${__RESET_COLOR}" >&2
  Log::logFatal "$1"
  exit 1
}


# @description Get the text representation of a log level
# @arg $1 level:String the log level to convert
# @exitcode 1 if the level is invalid
Log::getLevelText() {
  local level="$1"
  case "${level}" in
    "${__LEVEL_OFF}")
      echo OFF
      ;;
    "${__LEVEL_ERROR}")
      echo ERROR
      ;;
    "${__LEVEL_WARNING}")
      echo WARNING
      ;;
    "${__LEVEL_INFO}")
      echo INFO
      ;;
    "${__LEVEL_DEBUG}")
      echo DEBUG
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${level}"
      return 1
      ;;
  esac
}


# @description Display given text on full line with TEST_COLOR style
# @arg $1 text:String text to display
Log::headLine() {
  local type="$1"
  local text="$2"
  local message="${type}   - ${text}"
  if [[ -z "${type}" ]]; then
    message="${text}"
  else
    Log::computeDuration
    message="$(printf '%-7s - %s%s' "${type}" "${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR:-}" "${text}")"
  fi
  echo -e "${__TEST_COLOR}$(UI::textLine "${message}" " ")${__RESET_COLOR}" >&2
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logDebug() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_DEBUG)); then
    Log::logMessage "${2:-DEBUG}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logError() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_ERROR)); then
    Log::logMessage "${2:-ERROR}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logFatal() {
  Log::logMessage "${2:-FATAL}" "$1"
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logHelp() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-HELP}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logInfo() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-INFO}" "$1"
  fi
}


# @description Internal: common log message
# @example text
#   [date]|[levelMsg]|message
#
# @example text
#   2020-01-19 19:20:21|ERROR  |log error
#   2020-01-19 19:20:21|SKIPPED|log skipped
#
# @arg $1 levelMsg:String message's level description (eg: STATUS, ERROR, ...)
# @arg $2 msg:String the message to display
# @env BASH_FRAMEWORK_LOG_FILE String log file to use, do nothing if empty
# @env BASH_FRAMEWORK_LOG_LEVEL int log level log only if > OFF or fatal messages
# @stderr diagnostics information is displayed
Log::logMessage() {

  if [[ "${REQUIRE_FUNCTION_ENV_REQUIRE_LOAD_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Env::requireLoad has not been loaded"
    exit 1
  fi

  if [[ "${REQUIRE_FUNCTION_LOG_REQUIRE_LOAD_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Log::requireLoad has not been loaded"
    exit 1
  fi

  local levelMsg="$1"
  local msg="$2"
  local date

  if [[ -n "${BASH_FRAMEWORK_LOG_FILE}" ]] && ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    date="$(date '+%Y-%m-%d %H:%M:%S')"
    touch "${BASH_FRAMEWORK_LOG_FILE}"
    printf "%s|%7s|%s\n" "${date}" "${levelMsg}" "${msg}" >>"${BASH_FRAMEWORK_LOG_FILE}"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logSkipped() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-SKIPPED}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logStatus() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_WARNING)); then
    Log::logMessage "${2:-STATUS}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logSuccess() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-SUCCESS}" "$1"
  fi
}


# @description log message to file
# @arg $1 message:String the message to display
Log::logWarning() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_WARNING)); then
    Log::logMessage "${2:-WARNING}" "$1"
  fi
}


# @description activate or not Log::display* and Log::log* functions
# based on BASH_FRAMEWORK_DISPLAY_LEVEL and BASH_FRAMEWORK_LOG_LEVEL
# environment variables loaded by Env::requireLoad
# try to create log file and rotate it if necessary
# @noargs
# @set BASH_FRAMEWORK_LOG_LEVEL int to OFF level if BASH_FRAMEWORK_LOG_FILE is empty or not writable
# @env BASH_FRAMEWORK_DISPLAY_LEVEL int
# @env BASH_FRAMEWORK_LOG_LEVEL int
# @env BASH_FRAMEWORK_LOG_FILE String
# @env BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION int do log rotation if > 0
# @exitcode 0 always successful
# @stderr diagnostics information about log file is displayed
Log::requireLoad() {
  export REQUIRE_FUNCTION_LOG_REQUIRE_LOAD_LOADED=1


  if [[ "${REQUIRE_FUNCTION_ENV_REQUIRE_LOAD_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement Env::requireLoad has not been loaded"
    exit 1
  fi

  if [[ "${REQUIRE_FUNCTION_UI_REQUIRE_THEME_LOADED:-0}" != 1 ]]; then
    echo >&2 "Requirement UI::requireTheme has not been loaded"
    exit 1
  fi

  if [[ -z "${BASH_FRAMEWORK_LOG_FILE:-}" ]]; then
    BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
    export BASH_FRAMEWORK_LOG_LEVEL
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    if [[ ! -f "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      if [[ ! -d "${BASH_FRAMEWORK_LOG_FILE%/*}" ]]; then
        if ! mkdir -p "${BASH_FRAMEWORK_LOG_FILE%/*}" 2>/dev/null; then
          BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
          echo -e "${__ERROR_COLOR}ERROR   - directory ${BASH_FRAMEWORK_LOG_FILE%/*} is not writable${__RESET_COLOR}" >&2
        fi
      elif ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null; then
        BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
        echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
      fi
    elif [[ ! -w "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
    fi
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    # will always be created even if not in info level
    Log::logMessage "INFO" "Logging to file ${BASH_FRAMEWORK_LOG_FILE} - Log level ${BASH_FRAMEWORK_LOG_LEVEL}"
    if ((BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION > 0)); then
      Log::rotate "${BASH_FRAMEWORK_LOG_FILE}" "${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION}"
    fi
  fi
}


# @description To be called before logging in the log file
# @arg $1 file:string log file name
# @arg $2 maxLogFilesCount:int maximum number of log files
Log::rotate() {
  local file="$1"
  local maxLogFilesCount="${2:-5}"

  if [[ ! -f "${file}" ]]; then
    Log::displayDebug "Log file ${file} doesn't exist yet"
    return 0
  fi
  local i
  for ((i = maxLogFilesCount - 1; i > 0; i--)); do
    Log::displayInfo "Log rotation ${file}.${i} to ${file}.$((i + 1))"
    mv "${file}."{"${i}","$((i + 1))"} &>/dev/null || true
  done
  if cp "${file}" "${file}.1" &>/dev/null; then
    echo >"${file}" # reset log file
    Log::displayInfo "Log rotation ${file} to ${file}.1"
  fi
}


declare -Ag allDepsResultSeen=()
declare -ag allDepsResult=()

# @description get recursively all the dependencies of each config from configs arg
#
# The parent argument must be set to "your software selection" when you call it,
# then the value will change when this function will be called recursively with the
# parent dependency
#
# Algorithm
#   For each config in configs
#     - load config definition
#     - mark this config as seen to avoid to recompute it later, in the case where another
#       definition depends on it
#     - call installScripts_${config}_dependencies function if exists (skipped if not)
#     - add these new dependencies if any to current dependencies list
#     - call recursively Profiles::allDepsRecursive with these dependencies
#     - add in allDepsResult the current config if it was not seen yet
#   This has constructed a tree with the most deep dependency present in the first items
#
# @warning allDepsResultSeen and allDepsResult global variables have to reset to empty array every time you call this function
#
# @arg $1 scriptsDir:String base directory where dependencies can be retrieved
# @arg $2 parent:String set to "your software selection" when you call it
# @arg $@ configs:String[] list of configurations to load, each config can depend on an other one
# @exitcode 1 if one of the dependency cannot be found
# @exitcode 2 if error while loading one of the dependency definition
# @exitcode 3 if error while calling dependencies function of the dependency's definition
# @set allDepsResultSeen String[] list of dependencies already seen
# @set allDepsResult String[] the final list of dependencies sorted by the most to less dependent
# @stderr diagnostics information is displayed
Profiles::allDepsRecursive() {
  local scriptsDir="$1"
  local parent="$2"
  shift 2 || true
  local i
  local addDep=0
  local -a deps=()
  local -a newDeps

  for i in "$@"; do
    if [[ "${allDepsResultSeen["${i}"]}" = 'stored' ]]; then
      continue
    fi
    if [[ ! -f "${scriptsDir}/${i}" ]]; then
      Log::displayError "Dependency ${i} doesn't exist"
      return 1
    fi

    if ! readarray -t newDeps < <(SKIP_REQUIRES=1 "${scriptsDir}/${i}" dependencies); then
      Log::displayError "Dependency ${i} - ${scriptsDir}/${i} dependencies failure"
      return 3
    fi
    if [[ -z "${allDepsResultSeen[${i}]+exists}" ]]; then
      addDep=1
      allDepsResultSeen["${i}"]='stored'
    fi
    # remove duplicates from deps preserving order
    mapfile -t deps < <(
      IFS=$'\n'
      printf "%s\n" "${deps[@]}" | awk '!x[$0]++'
    )
    if ((${#newDeps} > 0)); then
      Log::displayInfo "${i} depends on ${newDeps[*]}"
      Profiles::allDepsRecursive "${scriptsDir}" "${i}" "${newDeps[@]}" || return $?
    fi
    if [[ "${addDep}" = "1" ]]; then
      Log::displayInfo "${i} is a dependency of ${parent}"
      allDepsResult+=("${i}")
    fi
    addDep=0
  done
}


# @description deduce profile path from given profile name
# if 2 profiles are named identically the first existing profile
# will be used beginning with srcAlt profiles
# @arg $1 profileName:String
# @stdout the path of the profile, no output if profile not found
# @exitcode 1 if profile not found
Profiles::getProfilePath() {
  local profileName="$1"
  local dir
  for dir in "${BASH_DEV_ENV_ROOT_DIR}/srcAlt/"*; do
    profilePath="${dir}/profiles/profile.${profileName}.sh"
    if [[ -f "${profilePath}" ]]; then
      echo "${profilePath}"
      return 0
    fi
  done
  local profilePath="${BASH_DEV_ENV_ROOT_DIR}/profiles/profile.${profileName}.sh"
  if [[ -f "${profilePath}" ]]; then
    echo "${profilePath}"
    return 0
  fi

  return 1
}


# @description load profile file based on profileFile argument
# The profile file is profileDir/profile.profile.sh
# This file should define the variable CONFIG_LIST with array type
# @arg $1 profileFile:String full profile path
# @exitcode 1 if argument is not provided
# @exitcode 2 if profile not found
# @exitcode 3 if profile found but CONFIG_LIST variable unset
# @exitcode 4 if profile found but CONFIG_LIST variable empty
# @exitcode 5 if error occurs during profile loading
# @stderr diagnostics information is displayed
# @see Profiles::allDepsRecursive in order to load all the dependencies recursively based on this list
# @set CONFIG_LIST
Profiles::loadProfile() {
  local profileFile="$1"

  if [[ -z "${profileFile}" ]]; then
    Log::displayError "This method needs exactly 1 parameter"
    return 1
  fi

  # load the profile
  Log::displayInfo "Loading profile '${profileFile}'"
  if [[ ! -f "${profileFile}" ]]; then
    Log::displayError "profile ${profileFile} not found"
    return 2
  fi

  # shellcheck source=src/Profiles/testsData/profile.test1.sh
  source "${profileFile}" || return 5

  if [[ ! -v CONFIG_LIST ]]; then
    Log::displayError "Profile ${profileFile} missing variable CONFIG_LIST"
    return 3
  fi
  if [[ ${#CONFIG_LIST[@]} -eq 0 ]]; then
    Log::displayError "Profile ${profileFile} variable CONFIG_LIST cannot be empty"
    return 4
  fi

  # remove duplicates from profile preserving order
  mapfile -t CONFIG_LIST < <(
    IFS=$'\n' printf '%s\n' "${CONFIG_LIST[@]}" | Filters::uniqUnsorted
  )
}


# @description Retry a command 5 times with a delay of 15 seconds between each attempt
# @arg $@ command:String[] the command to run
# @exitcode 0 on success
# @exitcode 1 if max retries count reached
# @env RETRY_MAX_RETRY int max retries
# @env RETRY_DELAY_BETWEEN_RETRIES int delay between attempts
Retry::default() {
  Retry::parameterized "${RETRY_MAX_RETRY:-5}" "${RETRY_DELAY_BETWEEN_RETRIES:-15}" "" "$@"
}


# @description Retry a command several times depending on parameters
# @arg $1 maxRetries:int    $1 max retries
# @arg $2 delay:int between attempt
# @arg $3 message:String to display to describe the attempt
# @arg $@ rest of parameters, the command to run
# @exitcode 0 on success
# @exitcode 1 if max retries count reached
# @exitcode 2 if maxRetries invalid value
Retry::parameterized() {
  local maxRetries=$1
  shift || true
  local delayBetweenTries=$1
  shift || true
  local message="$1"
  shift || true
  local retriesCount=1
  if [[ "${maxRetries}" -lt 1 ]]; then
    Log::displayError "invalid maxRetry value"
    return 2
  fi

  while true; do
    Log::displayInfo "Attempt ${retriesCount}/${maxRetries}: ${message}"
    if "$@"; then
      break
    elif [[ "${retriesCount}" -lt "${maxRetries}" ]]; then
      Log::displayDebug "Command failed. Wait for ${delayBetweenTries} seconds"
      ((retriesCount++))
      sleep "${delayBetweenTries}"
    else
      Log::displayError "The command has failed after ${retriesCount} attempts."
      return 1
    fi
  done
  return 0
}


# @description aggregate number of skip/error/... log messages
# and export the result in aggregateStatFile
# @arg $1 statFile:String the current stat file to add to aggregateStatFile
# @arg $2 appCount:int number of app requested to be installed
# @arg $@ statFiles:String[] the files in which each step stats have been aggregated aggregated
# if it doesn't exist, the file is created with needed variables set to 0
# stats will be saved
Stats::aggregateGlobalStats() {
  local aggregateStatFile="$1"
  local appCount="$2"
  shift 2 || true
  local -a statFiles=("$@")

  (
    if [[ ! -f "${aggregateStatFile}" ]]; then
      Stats::aggregateStatsInitialContent "${appCount}" >"${aggregateStatFile}"
    fi
    # shellcheck source=src/Stats/aggregateStats.example
    source "${aggregateStatFile}"

    local -i globalError=0
    local -i globalWarning=0
    local -i globalSkipped=0
    local -i globalHelp=0
    local -i globalSuccess=0
    local -i globalStatus=0
    ((globalDuration = duration)) || true
    for statFile in "${statFiles[@]}"; do
      if [[ ! -f "${statFile}" ]]; then
        continue
      fi
      # shellcheck source=src/Stats/logStats.example
      source "${statFile}"

      # all statuses need to be 0 for global status to be O
      globalError=$((globalError || error))
      globalWarning=$((globalWarning || warning))
      globalSkipped=$((globalSkipped || skipped))
      globalHelp=$((globalHelp || help))
      globalSuccess=$((globalSuccess || success))
      globalStatus=$((globalStatus || status))
      globalDuration=$((globalDuration + duration))
    done
    # shellcheck source=src/Stats/aggregateStats.example
    source "${aggregateStatFile}"
    ((count++)) || true
    if ((globalStatus == 0)); then
      ((statusSuccess++)) || true
    fi
    if ((globalStatus > 0 || globalError > 0)); then
      ((error++)) || true
    fi
    if ((globalWarning > 0)); then
      ((warning++)) || true
    fi
    if ((globalSkipped > 0)); then
      ((skipped++)) || true
    fi
    if ((globalHelp > 0)); then
      ((help++)) || true
    fi
    if ((globalSuccess > 0)); then
      ((success++)) || true
    fi
    (
      echo "count=${count}"
      echo "appCount=${appCount}"
      echo "error=${error}"
      echo "warning=${warning}"
      echo "skipped=${skipped}"
      echo "help=${help}"
      echo "success=${success}"
      echo "duration=${globalDuration}"
      echo "statusSuccess=${statusSuccess}"
    ) >"${aggregateStatFile}"
  )
}


# @description default aggregateStats file Content
Stats::aggregateStatsInitialContent() {
  local appCount="$1"
  echo "count=0"
  echo "appCount=${appCount}"
  echo "error=0"
  echo "warning=0"
  echo "skipped=0"
  echo "help=0"
  echo "success=0"
  echo "duration=0"
  echo "statusSuccess=0"
}


# @description extract stats form log
# @arg $1 logFile:String the log file to parse
# @arg $2 status:int the status of the command associated to that log file
# @arg $3 statsFile:String where to write stats
# @arg $4 startDate:String date at which log started
# @stdout output with the format provided by this example src/Stats/aggregateStats.example
# @see src/Stats/aggregateStats.example
Stats::computeFromLog() {
  local logFile="$1"
  local status="$2"
  local statsFile="$3"
  local startDate="$4"
  local endDate
  endDate="$(date +%s)"
  local duration="$((endDate - startDate))"

  local logStatsAwkScript
  logStatsAwkScript="$(
    cat <<'EOF'
BEGIN {
  error=0
  warning=0
  skipped=0
  help=0
  success=0
}
{
  buffer = substr($0, 1, 20)
  if(match(buffer, /(ERROR)[ ]+- /, arr) != 0) {
    error+=1
  } else if(match(buffer, /(WARNING)[ ]+- /, arr) != 0) {
    warning+=1
  } else if(match(buffer, /(SKIPPED)[ ]+- /, arr) != 0) {
    skipped+=1
  } else if(match(buffer, /(ERROR)[ ]+- /, arr) != 0) {
    error+=1
  } else if(match(buffer, /(HELP)[ ]+- /, arr) != 0) {
    help+=1
  } else if(match(buffer, /(SUCCESS)[ ]+- /, arr) != 0) {
    success+=1
  }

}
END {
  error = (stat != 0) || error
  print "error=" error
  print "warning=" warning
  print "skipped=" skipped
  print "help=" help
  success = (stat == 0) || success
  print "success=" success
}

EOF
  )"

  (
    if [[ -f "${logFile}" ]]; then
      awk -v status="${status}" --source "${logStatsAwkScript}" "${logFile}"
      echo "status=${status}"
      echo "duration=${duration}"
    else
      # not executed
      echo "status=-1"
    fi
  ) >"${statsFile}"
}


# @description display message to reflect last installation status
# @arg $1:statFile
# @arg $2:msg
Stats::statusLine() {
  local statFile="$1"
  local msg="$2"
  if [[ ! -f "${statFile}" ]]; then
    return 0
  fi
  Log::computeDuration
  (
    # shellcheck source=src/Stats/logStats.example
    source "${statFile}" || exit 1

    local color="${__TEST_ERROR_COLOR}"
    local statusMsg
    if [[ "${status}" = "0" ]]; then
      if [[ "${skipped}" = "0" ]]; then
        color="${__SUCCESS_COLOR}"
        statusMsg="SUCCESS - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR}${msg} successful"
      fi
    elif [[ "${status}" = "-1" ]]; then
      statusMsg="ABORTED - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR}${msg} not executed"
    else
      statusMsg="ERROR   - ${LOG_CONTEXT:-}${LOG_LAST_DURATION_STR}${msg} in error"
    fi
    # overwrite final TEST line
    echo -e "${color}${statusMsg}${__RESET_COLOR}"
  )
}


# @description draw a line with the character passed in parameter repeated depending on terminal width
# @arg $1 character:String character to use as separator (default value #)
UI::drawLine() {
  local character="${1:-#}"
  local -i width=${COLUMNS:-0}
  if ((width == 0)) && [[ -t 1 ]]; then
    width=$(tput cols)
  fi
  if ((width == 0)); then
    width=80
  fi
  printf -- "${character}%.0s" $(seq "${COLUMNS:-$([[ -t 1 ]] && tput cols || echo '80')}")
  echo
}


# @description load color theme
# @noargs
# @env BASH_FRAMEWORK_THEME String theme to use
# @env LOAD_THEME int 0 to avoid loading theme
# @exitcode 0 always successful
UI::requireTheme() {
  export REQUIRE_FUNCTION_UI_REQUIRE_THEME_LOADED=1

  if [[ "${LOAD_THEME:-1}" = "1" ]]; then
    UI::theme "${BASH_FRAMEWORK_THEME-default}"
  fi
}


# @description Display given text and complete the rest of the line with given character
# @arg $1 text:String text to display
# @arg $2 character:String (default:#) character to use to complete the line
UI::textLine() {
  local text="$1"
  local character="${2:-#}"
  ((textSize = ${#text}))
  ((fullWith = $(tput cols)))
  ((remainingWidth = $((fullWith - textSize))))
  echo -n "${text}"
  printf '%*s\n' "${remainingWidth}" '' | tr ' ' "${character}"
}


# @description load colors theme constants
# @warning if tty not opened, noColor theme will be chosen
# @arg $1 theme:String the theme to use (default, noColor)
# @arg $@ args:String[]
# @set __ERROR_COLOR String indicate error status
# @set __INFO_COLOR String indicate info status
# @set __SUCCESS_COLOR String indicate success status
# @set __WARNING_COLOR String indicate warning status
# @set __SKIPPED_COLOR String indicate skipped status
# @set __DEBUG_COLOR String indicate debug status
# @set __HELP_COLOR String indicate help status
# @set __TEST_COLOR String not used
# @set __TEST_ERROR_COLOR String not used
# @set __HELP_TITLE_COLOR String used to display help title in help strings
# @set __HELP_OPTION_COLOR String used to display highlight options in help strings
#
# @set __RESET_COLOR String reset default color
#
# @set __HELP_EXAMPLE String to remove
# @set __HELP_TITLE String to remove
# @set __HELP_NORMAL String to remove
# shellcheck disable=SC2034
UI::theme() {
  local theme="${1-default}"
  if [[ ! "${theme}" =~ -force$ ]] && ! Assert::tty; then
    theme="noColor"
  fi
  case "${theme}" in
    default | default-force)
      theme="default"
      ;;
    noColor) ;;
    *)
      Log::fatal "invalid theme provided"
      ;;
  esac
  if [[ "${theme}" = "default" ]]; then
    BASH_FRAMEWORK_THEME="default"
    # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
    __ERROR_COLOR='\e[31m'         # Red
    __INFO_COLOR='\e[44m'          # white on lightBlue
    __SUCCESS_COLOR='\e[32m'       # Green
    __WARNING_COLOR='\e[33m'       # Yellow
    __SKIPPED_COLOR='\e[33m'       # Yellow
    __DEBUG_COLOR='\e[37m'         # Gray
    __HELP_COLOR='\e[7;49;33m'     # Black on Gold
    __TEST_COLOR='\e[100m'         # Light magenta
    __TEST_ERROR_COLOR='\e[41m'    # white on red
    __HELP_TITLE_COLOR="\e[1;37m"  # Bold
    __HELP_OPTION_COLOR="\e[1;34m" # Blue
    # Internal: reset color
    __RESET_COLOR='\e[0m' # Reset Color
    # shellcheck disable=SC2155,SC2034
    __HELP_EXAMPLE="$(echo -e "\e[2;97m")"
    # shellcheck disable=SC2155,SC2034
    __HELP_TITLE="$(echo -e "\e[1;37m")"
    # shellcheck disable=SC2155,SC2034
    __HELP_NORMAL="$(echo -e "\033[0m")"
  else
    BASH_FRAMEWORK_THEME="noColor"
    # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
    __ERROR_COLOR=''
    __INFO_COLOR=''
    __SUCCESS_COLOR=''
    __WARNING_COLOR=''
    __SKIPPED_COLOR=''
    __DEBUG_COLOR=''
    __HELP_COLOR=''
    __TEST_COLOR=''
    __TEST_ERROR_COLOR=''
    __HELP_TITLE_COLOR=''
    __HELP_OPTION_COLOR=''
    # Internal: reset color
    __RESET_COLOR=''
    __HELP_EXAMPLE=''
    __HELP_TITLE=''
    __HELP_NORMAL=''
  fi
}
# FUNCTIONS

# shellcheck disable=SC2034
declare commandFunctionName="installScriptCommand"

defaultBeforeParseCallback() {
  Env::requireLoad
  UI::requireTheme
  Log::requireLoad
  Linux::requireUbuntu
  Linux::Wsl::requireWsl
  InstallScripts::isInterfaceMandatoryFunctionImplemented
}

scriptName() {
  echo "ShellBashDefaultConfig"
}

beforeParseCallback() {
  defaultBeforeParseCallback
}

commandHelpFunction() {
  echo "Available commands:"
  echo ""
}

listOrNone() {
  local string="$1"
  if [[ -z "${string:-}" ]]; then
    echo -e "${__HELP_EXAMPLE}None${__HELP_NORMAL}" | sed 's/^/    /'
  else
    echo -ne "${__HELP_OPTION_COLOR}"
    echo -e "${string}" | sed 's/^/    - /'
    echo -ne "${__HELP_NORMAL}"
  fi
}

helpDescriptionFunction() {
  helpDescription
  echo
}

helpLongDescription() {
  helpDescription
}

helpLongDescriptionFunction() {
  helpLongDescription | sed 's/^/  /'
  echo
  echo -e "  ${__HELP_TITLE}List of needed variables:${__HELP_NORMAL}"
  listOrNone "$(listVariables)"
  echo
  local variables
  variables="$(helpVariables)"
  if [[ -n "${variables}" ]]; then
    echo -e "${variables}" | sed 's/^/    /'
    echo
  fi
  echo -e "  ${__HELP_TITLE}List of dependencies:${__HELP_NORMAL}"
  listOrNone "$(dependencies)"
}

isInstallImplemented() {
  ! InstallScripts::scriptFunctionEmpty install
}

isTestInstallImplemented() {
  ! InstallScripts::scriptFunctionEmpty testInstall
}

isConfigureImplemented() {
  ! InstallScripts::scriptFunctionEmpty configure
}

isTestConfigureImplemented() {
  ! InstallScripts::scriptFunctionEmpty testConfigure
}

isCleanBeforeExportImplemented() {
  ! InstallScripts::scriptFunctionEmpty cleanBeforeExport
}

fullScriptName() {
  File::relativeToDir "${REAL_SCRIPT_FILE}" "${BASH_DEV_ENV_ROOT_DIR}"
}

fullScriptOverrideDir() {
  local confDir
  confDir="$(fullScriptName)"
  local dir
  for dir in "${CONF_OVERRIDE_DIRS[@]}"; do
    if [[ -d "${dir}/${confDir//\//@}" ]]; then
      echo "${dir}/${confDir//\//@}"
      return
    fi
  done
  echo "${CONF_OVERRIDE_DIRS[0]}/${confDir//\//@}"
}

argsInstallScriptCommandCallback() {
  if [[ -n "${command}" ]]; then
    case "${command}" in
      isInterfaceImplemented)
        InstallScripts::isInterfaceMandatoryFunctionImplemented
        exit $?
        ;;
      install | testInstall | configure | testConfigure)
        afterParseCallback
        ;;
      *) ;;
    esac
    "${command}"
    exit $?
  fi
}



declare -a BASH_FRAMEWORK_ARGV_FILTERED=()

beforeParseCallback() {
  Env::requireLoad
  UI::requireTheme
  Log::requireLoad
}

copyrightCallback() {
  #
  # shellcheck disable=SC2155,SC2154,SC2250
  echo "Copyright (c) 2024-now François Chastanet"
}

# shellcheck disable=SC2317 # if function is overridden
updateArgListInfoVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(--verbose)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListDebugVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(-vv)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListTraceVerboseCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(-vvv)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListEnvFileCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListLogLevelCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListDisplayLevelCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListNoColorCallback() {
  BASH_FRAMEWORK_ARGV_FILTERED+=(--no-color)
}
# shellcheck disable=SC2317 # if function is overridden
updateArgListThemeCallback() { :; }
# shellcheck disable=SC2317 # if function is overridden
updateArgListQuietCallback() { :; }

# shellcheck disable=SC2317 # if function is overridden
optionHelpCallback() {
  Log::displayError "optionHelpCallback needs to be overridden"
  exit 0
}

# shellcheck disable=SC2317 # if function is overridden
optionVersionCallback() {
  # shellcheck disable=SC2154
  echo "${SCRIPT_NAME} version 3.0"
  exit 0
}

# shellcheck disable=SC2317 # if function is overridden
optionInfoVerboseCallback() {
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='--verbose'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_INFO}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_INFO}" >>"${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionDebugVerboseCallback() {
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='-vv'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_DEBUG}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_DEBUG}" >>"${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionTraceVerboseCallback() {
  # shellcheck disable=SC2034
  BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='-vvv'
  BASH_FRAMEWORK_ARGS_VERBOSE=${__VERBOSE_LEVEL_TRACE}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${__LEVEL_DEBUG}" >>"${overrideEnvFile}"
}

getLevel() {
  local levelName="$1"
  case "${levelName^^}" in
    OFF)
      echo "${__LEVEL_OFF}"
      ;;
    ERR | ERROR)
      echo "${__LEVEL_ERROR}"
      ;;
    WARN | WARNING)
      echo "${__LEVEL_WARNING}"
      ;;
    INFO)
      echo "${__LEVEL_INFO}"
      ;;
    DEBUG | TRACE)
      echo "${__LEVEL_DEBUG}"
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${levelName}"
      return 1
      ;;
  esac
}

getVerboseLevel() {
  local levelName="$1"
  case "${levelName^^}" in
    OFF)
      echo "${__VERBOSE_LEVEL_OFF}"
      ;;
    ERR | ERROR | WARN | WARNING | INFO)
      echo "${__VERBOSE_LEVEL_INFO}"
      ;;
    DEBUG)
      echo "${__VERBOSE_LEVEL_DEBUG}"
      ;;
    TRACE)
      echo "${__VERBOSE_LEVEL_TRACE}"
      ;;
    *)
      Log::displayError "Command ${SCRIPT_NAME} - Invalid level ${level}"
      return 1
      ;;
  esac
}

# shellcheck disable=SC2317 # if function is overridden
optionDisplayLevelCallback() {
  local level="$2"
  local logLevel verboseLevel
  logLevel="$(getLevel "${level}")"
  verboseLevel="$(getVerboseLevel "${level}")"
  BASH_FRAMEWORK_ARGS_VERBOSE=${verboseLevel}
  echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${logLevel}" >>"${overrideEnvFile}"
}

optionDisplayLevelDefaultValueFunction() {
  Log::getLevelText "${BASH_FRAMEWORK_DISPLAY_LEVEL:-${__LEVEL_INFO}}"
}

# shellcheck disable=SC2317 # if function is overridden
optionLogLevelCallback() {
  local level="$2"
  local logLevel verboseLevel
  logLevel="$(getLevel "${level}")"
  verboseLevel="$(getVerboseLevel "${level}")"
  # shellcheck disable=SC2034
  BASH_FRAMEWORK_ARGS_VERBOSE=${verboseLevel}
  echo "BASH_FRAMEWORK_LOG_LEVEL=${logLevel}" >>"${overrideEnvFile}"
}

optionLogLevelDefaultValueFunction() {
  Log::getLevelText "${BASH_FRAMEWORK_LOG_LEVEL:-${__LEVEL_OFF}}"
}

# shellcheck disable=SC2317 # if function is overridden
optionLogFileCallback() {
  local logFile="$2"
  echo "BASH_FRAMEWORK_LOG_FILE='${logFile}'" >>"${overrideEnvFile}"
}

optionLogFileDefaultValueFunction() {
  # shellcheck disable=SC2016
  echo "${BASH_FRAMEWORK_LOG_FILE:-"${FRAMEWORK_ROOT_DIR}/logs/${SCRIPT_NAME}.log"}"
}

# shellcheck disable=SC2317 # if function is overridden
optionQuietCallback() {
  echo "BASH_FRAMEWORK_QUIET_MODE=1" >>"${overrideEnvFile}"
}

# shellcheck disable=SC2317 # if function is overridden
optionNoColorCallback() {
  UI::theme "noColor"
}

# shellcheck disable=SC2317 # if function is overridden
optionThemeCallback() {
  UI::theme "$2"
}

displayConfig() {
  echo "Config"
  UI::drawLine "-"
  local var
  while read -r var; do
    printf '%-40s = %s\n' "${var}" "$(declare -p "${var}" | sed -E -e 's/^[^=]+=(.*)/\1/')"
  done < <(typeset -p | awk 'match($3, "^(BASH_FRAMEWORK_[^=]+)=", m) { print m[1] }' | sort)
  exit 0
}

optionBashFrameworkConfigCallback() {
  if [[ ! -f "$2" ]]; then
    Log::fatal "Command ${SCRIPT_NAME} - Bash framework config file '$2' does not exists"
  fi
}

overrideEnvFile="$(Framework::createTempFile "overrideEnvFile")"

commandOptionParseFinished() {
  # shellcheck disable=SC2154
  if [[ -f "${optionBashFrameworkConfig}" ]]; then
    files+=("${optionBashFrameworkConfig}")
  fi
  files+=("${overrideEnvFile}")
  Env::requireLoad "${files[@]}"
  Log::requireLoad
  # shellcheck disable=SC2154
  if [[ "${optionConfig}" = "1" ]]; then
    displayConfig
  fi
}


Linux::requireTarCommand
Compiler::Embed::extractDirFromBase64 \
  "${PERSISTENT_TMPDIR:-/tmp}/a2c70bccfafc8b8e201ec67daa51844ffcbff0accebbd7ac91e97c0463df13df/conf_dir" \
  "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"

declare -gx embed_dir_conf_dir="${PERSISTENT_TMPDIR:-/tmp}/a2c70bccfafc8b8e201ec67daa51844ffcbff0accebbd7ac91e97c0463df13df/conf_dir"

Linux::requireTarCommand
Compiler::Embed::extractFileFromBase64 \
  "${PERSISTENT_TMPDIR:-/tmp}/7fe5c0d1777f0c477bf803efef4ff6eb14f759335959aff52901586e604d9c9d/findConfigFiles" \
  "IyEvdXNyL2Jpbi9lbnYgYmFzaAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj \
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgR0VORVJBVEVEIEZS \
T00gaHR0cHM6Ly9naXRodWIuY29tL2ZjaGFzdGFuZXQvYmFzaC1kZXYtZW52L3RyZWUvbWFzdGVy \
L3NyYy9fdG9vbHMvZmluZENvbmZpZ0ZpbGVzLWJpbmFyeS55YW1sCiMgRE8gTk9UIEVESVQgSVQK \
IyBAZ2VuZXJhdGVkCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj \
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBzaGVsbGNoZWNrIGRpc2FibGU9 \
U0MyMjg4LFNDMjAzNAoKCgojIGVuc3VyZSB0aGF0IG5vIHVzZXIgYWxpYXNlcyBjb3VsZCBpbnRl \
cmZlcmUgd2l0aAojIGNvbW1hbmRzIHVzZWQgaW4gdGhpcyBzY3JpcHQKdW5hbGlhcyAtYSB8fCB0 \
cnVlCnNob3B0IC11IGV4cGFuZF9hbGlhc2VzCgojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQK \
KChmYWlsdXJlcyA9IDApKSB8fCB0cnVlCgojIEJhc2ggd2lsbCByZW1lbWJlciAmIHJldHVybiB0 \
aGUgaGlnaGVzdCBleGl0IGNvZGUgaW4gYSBjaGFpbiBvZiBwaXBlcy4KIyBUaGlzIHdheSB5b3Ug \
Y2FuIGNhdGNoIHRoZSBlcnJvciBpbnNpZGUgcGlwZXMsIGUuZy4gbXlzcWxkdW1wIHwgZ3ppcApz \
ZXQgLW8gcGlwZWZhaWwKc2V0IC1vIGVycmV4aXQKCiMgQ29tbWFuZCBTdWJzdGl0dXRpb24gY2Fu \
IGluaGVyaXQgZXJyZXhpdCBvcHRpb24gc2luY2UgYmFzaCB2NC40CnNob3B0IC1zIGluaGVyaXRf \
ZXJyZXhpdCB8fCB0cnVlCgojIGlmIHNldCwgYW5kIGpvYiBjb250cm9sIGlzIG5vdCBhY3RpdmUs \
IHRoZSBzaGVsbCBydW5zIHRoZSBsYXN0IGNvbW1hbmQKIyBvZiBhIHBpcGVsaW5lIG5vdCBleGVj \
dXRlZCBpbiB0aGUgYmFja2dyb3VuZCBpbiB0aGUgY3VycmVudCBzaGVsbAojIGVudmlyb25tZW50 \
LgpzaG9wdCAtcyBsYXN0cGlwZQoKIyBhIGxvZyBpcyBnZW5lcmF0ZWQgd2hlbiBhIGNvbW1hbmQg \
ZmFpbHMKc2V0IC1vIGVycnRyYWNlCgojIHVzZSBudWxsZ2xvYiBzbyB0aGF0IChmaWxlKi5waHAp \
IHdpbGwgcmV0dXJuIGFuIGVtcHR5IGFycmF5IGlmIG5vIGZpbGUKIyBtYXRjaGVzIHRoZSB3aWxk \
Y2FyZApzaG9wdCAtcyBudWxsZ2xvYgoKIyBlbnN1cmUgcmVnZXhwIGFyZSBpbnRlcnByZXRlZCB3 \
aXRob3V0IGFjY2VudHVhdGVkIGNoYXJhY3RlcnMKZXhwb3J0IExDX0FMTD1QT1NJWAoKZXhwb3J0 \
IFRFUk09eHRlcm0tMjU2Y29sb3IKCiMgYXZvaWQgaW50ZXJhY3RpdmUgaW5zdGFsbApleHBvcnQg \
REVCSUFOX0ZST05URU5EPW5vbmludGVyYWN0aXZlCmV4cG9ydCBERUJDT05GX05PTklOVEVSQUNU \
SVZFX1NFRU49dHJ1ZQoKIyBzdG9yZSBjb21tYW5kIGFyZ3VtZW50cyBmb3IgbGF0ZXIgdXNhZ2UK \
IyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CmRlY2xhcmUgLWEgQkFTSF9GUkFNRVdPUktfQVJH \
Vj0oIiRAIikKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CmRlY2xhcmUgLWEgT1JJR0lOQUxf \
QkFTSF9GUkFNRVdPUktfQVJHVj0oIiRAIikKCiMgQHNlZSBodHRwczovL3VuaXguc3RhY2tleGNo \
YW5nZS5jb20vYS8zODY4NTYKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMzE3CmludGVycnVwdE1h \
bmFnZW1lbnQoKSB7CiAgIyByZXN0b3JlIFNJR0lOVCBoYW5kbGVyCiAgdHJhcCAtIElOVAogICMg \
ZW5zdXJlIHRoYXQgQ3RybC1DIGlzIHRyYXBwZWQgYnkgdGhpcyBzY3JpcHQgYW5kIG5vdCBieSBz \
dWIgcHJvY2VzcwogICMgcmVwb3J0IHRvIHRoZSBwYXJlbnQgdGhhdCB3ZSBoYXZlIGluZGVlZCBi \
ZWVuIGludGVycnVwdGVkCiAga2lsbCAtcyBJTlQgIiQkIgp9CnRyYXAgaW50ZXJydXB0TWFuYWdl \
bWVudCBJTlQKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj \
IwojIFRlbXAgZGlyIG1hbmFnZW1lbnQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj \
IyMjIyMjIyMjIyMjIyMjCgpLRUVQX1RFTVBfRklMRVM9IiR7S0VFUF9URU1QX0ZJTEVTOi0wfSIK \
ZXhwb3J0IEtFRVBfVEVNUF9GSUxFUwoKIyBQRVJTSVNURU5UX1RNUERJUiBpcyBub3QgZGVsZXRl \
ZCBieSB0cmFwcwpQRVJTSVNURU5UX1RNUERJUj0iJHtUTVBESVI6LS90bXB9L2Jhc2gtZnJhbWV3 \
b3JrIgpleHBvcnQgUEVSU0lTVEVOVF9UTVBESVIKaWYgW1sgISAtZCAiJHtQRVJTSVNURU5UX1RN \
UERJUn0iIF1dOyB0aGVuCiAgbWtkaXIgLXAgIiR7UEVSU0lTVEVOVF9UTVBESVJ9IgpmaQoKIyBz \
aGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0ClRNUERJUj0iJChta3RlbXAgLWQgLXAgIiR7UEVSU0lT \
VEVOVF9UTVBESVI6LS90bXB9IiAtdCBiYXNoLWZyYW1ld29yay0kJC1YWFhYWFgpIgpleHBvcnQg \
VE1QRElSCgojIHRlbXAgZGlyIGNsZWFuaW5nCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjMxNwpj \
bGVhbk9uRXhpdCgpIHsKICBsb2NhbCByYz0kPwogIGlmIFtbICIke0tFRVBfVEVNUF9GSUxFUzot \
MH0iID0gIjEiIF1dOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlJbmZvICJLRUVQX1RFTVBfRklMRVM9 \
MSB0ZW1wIGZpbGVzIGtlcHQgaGVyZSAnJHtUTVBESVJ9JyIKICBlbGlmIFtbIC1uICIke1RNUERJ \
Uit4eHh9IiBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5RGVidWcgIktFRVBfVEVNUF9GSUxFUz0w \
IHJlbW92aW5nIHRlbXAgZmlsZXMgJyR7VE1QRElSfSciCiAgICBybSAtUmYgIiR7VE1QRElSOi0v \
dG1wL2Zha2V9IiA+L2Rldi9udWxsIDI+JjEKICBmaQogIGV4aXQgIiR7cmN9Igp9CnRyYXAgY2xl \
YW5PbkV4aXQgRVhJVCBIVVAgUVVJVCBBQlJUIFRFUk0KCgpTQ1JJUFRfTkFNRT0kezAjIyovfQpS \
RUFMX1NDUklQVF9GSUxFPSIkKHJlYWRsaW5rIC1lICIkKHJlYWxwYXRoICIke0JBU0hfU09VUkNF \
WzBdfSIpIikiCmlmIFtbIC1uICIke0VNQkVEX0NVUlJFTlRfRElSfSIgXV07IHRoZW4KICBDVVJS \
RU5UX0RJUj0iJHtFTUJFRF9DVVJSRU5UX0RJUn0iCmVsc2UKICBDVVJSRU5UX0RJUj0iJHtSRUFM \
X1NDUklQVF9GSUxFJS8qfSIKZmkKRlJBTUVXT1JLX1JPT1RfRElSPSIkKGNkICIke0NVUlJFTlRf \
RElSfS8uIiAmJiBwd2QgLVApIgpGUkFNRVdPUktfU1JDX0RJUj0iJHtGUkFNRVdPUktfUk9PVF9E \
SVJ9L3NyYyIKRlJBTUVXT1JLX0JJTl9ESVI9IiR7RlJBTUVXT1JLX1JPT1RfRElSfS9iaW4iCkZS \
QU1FV09SS19WRU5ET1JfRElSPSIke0ZSQU1FV09SS19ST09UX0RJUn0vdmVuZG9yIgpGUkFNRVdP \
UktfVkVORE9SX0JJTl9ESVI9IiR7RlJBTUVXT1JLX1JPT1RfRElSfS92ZW5kb3IvYmluIgoKIyBA \
ZGVzY3JpcHRpb24gTG9nIG5hbWVzcGFjZSBwcm92aWRlcyAyIGtpbmQgb2YgZnVuY3Rpb25zCiMg \
LSBMb2c6OmRpc3BsYXkqIGFsbG93cyB0byBkaXNwbGF5IGdpdmVuIG1lc3NhZ2Ugd2l0aAojICAg \
Z2l2ZW4gZGlzcGxheSBsZXZlbAojIC0gTG9nOjpsb2cqIGFsbG93cyB0byBsb2cgZ2l2ZW4gbWVz \
c2FnZSB3aXRoCiMgICBnaXZlbiBsb2cgbGV2ZWwKIyBMb2c6OmRpc3BsYXkqIGZ1bmN0aW9ucyBh \
dXRvbWF0aWNhbGx5IGxvZyB0aGUgbWVzc2FnZSB0b28KIyBAc2VlIEVudjo6cmVxdWlyZUxvYWQg \
dG8gbG9hZCB0aGUgZGlzcGxheSBhbmQgbG9nIGxldmVsIGZyb20gLmVudiBmaWxlCgojIEBkZXNj \
cmlwdGlvbiBsb2cgbGV2ZWwgb2ZmCmV4cG9ydCBfX0xFVkVMX09GRj0wCiMgQGRlc2NyaXB0aW9u \
IGxvZyBsZXZlbCBlcnJvcgpleHBvcnQgX19MRVZFTF9FUlJPUj0xCiMgQGRlc2NyaXB0aW9uIGxv \
ZyBsZXZlbCB3YXJuaW5nCmV4cG9ydCBfX0xFVkVMX1dBUk5JTkc9MgojIEBkZXNjcmlwdGlvbiBs \
b2cgbGV2ZWwgaW5mbwpleHBvcnQgX19MRVZFTF9JTkZPPTMKIyBAZGVzY3JpcHRpb24gbG9nIGxl \
dmVsIHN1Y2Nlc3MKZXhwb3J0IF9fTEVWRUxfU1VDQ0VTUz0zCiMgQGRlc2NyaXB0aW9uIGxvZyBs \
ZXZlbCBkZWJ1ZwpleHBvcnQgX19MRVZFTF9ERUJVRz00CgojIEBkZXNjcmlwdGlvbiB2ZXJib3Nl \
IGxldmVsIG9mZgpleHBvcnQgX19WRVJCT1NFX0xFVkVMX09GRj0wCiMgQGRlc2NyaXB0aW9uIHZl \
cmJvc2UgbGV2ZWwgaW5mbwpleHBvcnQgX19WRVJCT1NFX0xFVkVMX0lORk89MQojIEBkZXNjcmlw \
dGlvbiB2ZXJib3NlIGxldmVsIGluZm8KZXhwb3J0IF9fVkVSQk9TRV9MRVZFTF9ERUJVRz0yCiMg \
QGRlc2NyaXB0aW9uIHZlcmJvc2UgbGV2ZWwgaW5mbwpleHBvcnQgX19WRVJCT1NFX0xFVkVMX1RS \
QUNFPTMKCgojIEBkZXNjcmlwdGlvbiBjaGVjayBpZiBhbiBlbGVtZW50IGlzIGNvbnRhaW5lZCBp \
biBhbiBhcnJheQojCiMgQGFyZyAkMSBuZWVkbGU6U3RyaW5nCiMgQGFyZyAkQCBhcnJheTpTdHJp \
bmdbXQojIEBleGl0Y29kZSAwIGlmIGZvdW5kCiMgQGV4aXRjb2RlIDEgb3RoZXJ3aXNlCiMgQGV4 \
YW1wbGUKIyAgIEFycmF5Ojpjb250YWlucyAiJHtsaWJQYXRofSIgIiR7X19CQVNIX0ZSQU1FV09S \
S19JTVBPUlRFRF9GSUxFU1tAXX0iCkFycmF5Ojpjb250YWlucygpIHsKICBsb2NhbCBlbGVtZW50 \
CiAgZm9yIGVsZW1lbnQgaW4gIiR7QDoyfSI7IGRvCiAgICBbWyAiJHtlbGVtZW50fSIgPSAiJDEi \
IF1dICYmIHJldHVybiAwCiAgZG9uZQogIHJldHVybiAxCn0KCgojIEBkZXNjcmlwdGlvbiBjb25j \
YXRlbmF0ZSBlYWNoIGVsZW1lbnQgb2YgYW4gYXJyYXkgd2l0aCBhIHNlcGFyYXRvcgojIGJ1dCB3 \
cmFwcGluZyB0ZXh0IHdoZW4gbGluZSBsZW5ndGggaXMgbW9yZSB0aGFuIHByb3ZpZGVkIGFyZ3Vt \
ZW50CiMgVGhlIGFsZ29yaXRobSB3aWxsIHRyeSBub3QgdG8gY3V0IHRoZSBhcnJheSBlbGVtZW50 \
IGlmIGl0IGNhbi4KIyAtIGlmIGFuIGFyZyBjYW4gYmUgcGxhY2VkIG9uIGN1cnJlbnQgbGluZSBp \
dCB3aWxsIGJlLAojICAgb3RoZXJ3aXNlIGN1cnJlbnQgbGluZSBpcyBwcmludGVkIGFuZCBhcmcg \
aXMgYWRkZWQgdG8gdGhlIG5ldwojICAgY3VycmVudCBsaW5lCiMgLSBFbXB0eSBhcmcgaXMgaW50 \
ZXJwcmV0ZWQgYXMgYSBuZXcgbGluZS4KIyAtIEFkZCBcciB0byBhcmcgaW4gb3JkZXIgdG8gZm9y \
Y2UgYnJlYWsgbGluZSBhbmQgYXZvaWQgZm9sbG93aW5nCiMgICBhcmcgdG8gYmUgY29uY2F0ZW5h \
dGVkIHdpdGggY3VycmVudCBhcmcuCiMKIyBAYXJnICQxIGdsdWU6U3RyaW5nCiMgQGFyZyAkMiBt \
YXhMaW5lTGVuZ3RoOmludAojIEBhcmcgJDMgaW5kZW50TmV4dExpbmU6aW50CiMgQGFyZyAkQCBh \
cnJheTpTdHJpbmdbXQpBcnJheTo6d3JhcDIoKSB7CiAgbG9jYWwgZ2x1ZT0iJHsxLX0iCiAgbG9j \
YWwgLWkgZ2x1ZUxlbmd0aD0iJHsjZ2x1ZX0iCiAgc2hpZnQgfHwgdHJ1ZQogIGxvY2FsIC1pIG1h \
eExpbmVMZW5ndGg9JDEKICBzaGlmdCB8fCB0cnVlCiAgbG9jYWwgLWkgaW5kZW50TmV4dExpbmU9 \
JDEKICBzaGlmdCB8fCB0cnVlCiAgbG9jYWwgaW5kZW50U3RyPSIiCiAgaWYgKChpbmRlbnROZXh0 \
TGluZSA+IDApKTsgdGhlbgogICAgaW5kZW50U3RyPSIkKGhlYWQgLWMgIiR7aW5kZW50TmV4dExp \
bmV9IiA8L2Rldi96ZXJvIHwgdHIgJ1wwJyAiICIpIgogIGZpCiAgaWYgKCgkIyA9PSAwKSk7IHRo \
ZW4KICAgIHJldHVybiAwCiAgZmkKCiAgcHJpbnRDdXJyZW50TGluZSgpIHsKICAgIGlmICgoaXNO \
ZXdsaW5lID09IDApKSB8fCAoKHByZXZpb3VzTGluZUVtcHR5ID09IDEpKTsgdGhlbgogICAgICBl \
Y2hvCiAgICBmaQogICAgKChpc05ld2xpbmUgPSAxKSkKICAgIGVjaG8gLWVuICIke2luZGVudFN0 \
cn0iCiAgICAoKGN1cnJlbnRMaW5lTGVuZ3RoID0gaW5kZW50TmV4dExpbmUpKSB8fCB0cnVlCiAg \
fQogIGFwcGVuZFRvQ3VycmVudExpbmUoKSB7CiAgICBsb2NhbCB0ZXh0PSIkMSIKICAgIGxvY2Fs \
IC1pIGxlbmd0aD0kMgogICAgKChjdXJyZW50TGluZUxlbmd0aCArPSBsZW5ndGgpKSB8fCB0cnVl \
CiAgICAoKGlzTmV3bGluZSA9IDApKSB8fCB0cnVlCiAgICBpZiBbWyAiJHt0ZXh0OiAtMX0iID0g \
JCdccicgXV07IHRoZW4KICAgICAgdGV4dD0iJHt0ZXh0OjA6LTF9IgogICAgICBlY2hvIC1lbiAi \
JHt0ZXh0JSUrKFtbOmJsYW5rOl1dKX0iCiAgICAgIHByaW50Q3VycmVudExpbmUKICAgIGVsc2UK \
ICAgICAgZWNobyAtZW4gIiR7dGV4dCUlKyhbWzpibGFuazpdXSl9IgogICAgZmkKICB9CgogICgK \
ICAgIGxvY2FsIGN1cnJlbnRMaW5lCiAgICBsb2NhbCAtaSBjdXJyZW50TGluZUxlbmd0aD0wIGlz \
TmV3bGluZT0xIGFyZ0xlbmd0aD0wCiAgICBsb2NhbCAtYSBhZGRpdGlvbmFsTGluZXMKICAgIGxv \
Y2FsIC1pIHByZXZpb3VzTGluZUVtcHR5PTAKICAgIGxvY2FsIGFyZz0iIgoKICAgIHdoaWxlICgo \
JCMgPiAwKSk7IGRvCiAgICAgIGFyZz0iJDEiCiAgICAgIHNoaWZ0IHx8IHRydWUKCiAgICAgICMg \
cmVwbGFjZSB0YWIgYnkgMiBzcGFjZXMKICAgICAgYXJnPSIke2FyZy8vJCdcdCcvICB9IgogICAg \
ICAjIHJlbW92ZSB0cmFpbGluZyBzcGFjZXMKICAgICAgYXJnPSIke2FyZyVbWzpibGFuazpdXX0i \
CiAgICAgIGlmIFtbICIke2FyZ30iID0gJCdcbicgfHwgLXogIiR7YXJnfSIgXV07IHRoZW4KICAg \
ICAgICBwcmludEN1cnJlbnRMaW5lCiAgICAgICAgKChwcmV2aW91c0xpbmVFbXB0eSA9IDEpKQog \
ICAgICAgIGNvbnRpbnVlCiAgICAgIGVsc2UKICAgICAgICBpZiAoKHByZXZpb3VzTGluZUVtcHR5 \
ID09IDEpKTsgdGhlbgogICAgICAgICAgcHJpbnRDdXJyZW50TGluZQogICAgICAgIGZpCiAgICAg \
ICAgKChwcmV2aW91c0xpbmVFbXB0eSA9IDApKSB8fCB0cnVlCiAgICAgIGZpCiAgICAgICMgY29u \
dmVydCBlb2wgdG8gYXJncwogICAgICBtYXBmaWxlIC10IGFkZGl0aW9uYWxMaW5lcyA8PDwiJHth \
cmd9IgogICAgICBpZiAoKCR7I2FkZGl0aW9uYWxMaW5lc1tAXX0gPiAxKSk7IHRoZW4KICAgICAg \
ICBzZXQgLS0gIiR7YWRkaXRpb25hbExpbmVzW0BdfSIgIiRAIgogICAgICAgIGNvbnRpbnVlCiAg \
ICAgIGZpCgogICAgICAoKGFyZ0xlbmd0aCA9ICR7I2FyZ30pKSB8fCB0cnVlCgogICAgICAjIGVt \
cHR5IGFyZwogICAgICBpZiAoKGFyZ0xlbmd0aCA9PSAwKSk7IHRoZW4KICAgICAgICBpZiAoKGlz \
TmV3bGluZSA9PSAwKSk7IHRoZW4KICAgICAgICAgICMgaXNOZXdsaW5lID0gMCBtZWFucyBjdXJy \
ZW50TGluZSBpcyBub3QgZW1wdHkKICAgICAgICAgIHByaW50Q3VycmVudExpbmUKICAgICAgICBm \
aQogICAgICAgIGNvbnRpbnVlCiAgICAgIGZpCgogICAgICBpZiAoKGlzTmV3bGluZSA9PSAwKSk7 \
IHRoZW4KICAgICAgICBnbHVlTGVuZ3RoPSIkeyNnbHVlfSIKICAgICAgZWxzZQogICAgICAgIGds \
dWVMZW5ndGg9IjAiCiAgICAgIGZpCiAgICAgIGlmICgoY3VycmVudExpbmVMZW5ndGggKyBhcmdM \
ZW5ndGggKyBnbHVlTGVuZ3RoID4gbWF4TGluZUxlbmd0aCkpOyB0aGVuCiAgICAgICAgaWYgKChh \
cmdMZW5ndGggKyBnbHVlTGVuZ3RoID4gbWF4TGluZUxlbmd0aCkpOyB0aGVuCiAgICAgICAgICAj \
IGFyZyBpcyB0b28gbG9uZyB0byBldmVuIGZpdCBvbiBvbmUgbGluZQogICAgICAgICAgIyB3ZSBo \
YXZlIHRvIHNwbGl0IHRoZSBhcmcgb24gY3VycmVudCBhbmQgbmV4dCBsaW5lCiAgICAgICAgICBs \
b2NhbCAtaSByZW1haW5pbmdMaW5lTGVuZ3RoCiAgICAgICAgICAoKHJlbWFpbmluZ0xpbmVMZW5n \
dGggPSBtYXhMaW5lTGVuZ3RoIC0gY3VycmVudExpbmVMZW5ndGggLSBnbHVlTGVuZ3RoKSkKICAg \
ICAgICAgIGFwcGVuZFRvQ3VycmVudExpbmUgIiR7Z2x1ZTowOiR7Z2x1ZUxlbmd0aH19JHthcmc6 \
MDoke3JlbWFpbmluZ0xpbmVMZW5ndGh9fSIgIiQoKGdsdWVMZW5ndGggKyByZW1haW5pbmdMaW5l \
TGVuZ3RoKSkiCiAgICAgICAgICBwcmludEN1cnJlbnRMaW5lCiAgICAgICAgICBhcmc9IiR7YXJn \
OiR7cmVtYWluaW5nTGluZUxlbmd0aH19IgogICAgICAgICAgIyByZW1vdmUgbGVhZGluZyBzcGFj \
ZXMKICAgICAgICAgIGFyZz0iJHthcmcjI1tbOmJsYW5rOl1dfSIKCiAgICAgICAgICBzZXQgLS0g \
IiR7YXJnfSIgIiRAIgogICAgICAgIGVsc2UKICAgICAgICAgICMgdGhlIGFyZyBjYW4gZml0IG9u \
IG5leHQgbGluZQogICAgICAgICAgcHJpbnRDdXJyZW50TGluZQogICAgICAgICAgYXBwZW5kVG9D \
dXJyZW50TGluZSAiJHthcmd9IiAiJHthcmdMZW5ndGh9IgogICAgICAgIGZpCiAgICAgIGVsc2UK \
ICAgICAgICBhcHBlbmRUb0N1cnJlbnRMaW5lICIke2dsdWU6MDoke2dsdWVMZW5ndGh9fSR7YXJn \
fSIgIiQoKGdsdWVMZW5ndGggKyBhcmdMZW5ndGgpKSIKICAgICAgZmkKICAgIGRvbmUKICAgIGlm \
IFtbICIke2N1cnJlbnRMaW5lfSIgIT0gIiIgXV0gJiYgW1sgISAiJHtjdXJyZW50TGluZX0iID1+ \
IF5bXCBcdF0rJCBdXTsgdGhlbgogICAgICBwcmludEN1cnJlbnRMaW5lCiAgICBmaQogICkgfCBz \
ZWQgLUUgLWUgJ3MvW1s6Ymxhbms6XV0rJC8vJwp9CgoKIyBAZGVzY3JpcHRpb24gY2hlY2sgaWYg \
Y29tbWFuZCBzcGVjaWZpZWQgZXhpc3RzIG9yIHJldHVybiAxCiMgd2l0aCBlcnJvciBhbmQgbWVz \
c2FnZSBpZiBub3QKIwojIEBhcmcgJDEgY29tbWFuZE5hbWU6U3RyaW5nIG9uIHdoaWNoIGV4aXN0 \
ZW5jZSBtdXN0IGJlIGNoZWNrZWQKIyBAYXJnICQyIGhlbHBJZk5vdEV4aXN0czpTdHJpbmcgYSBo \
ZWxwIGNvbW1hbmQgdG8gZGlzcGxheSBpZiB0aGUgY29tbWFuZCBkb2VzIG5vdCBleGlzdAojCiMg \
QGV4aXRjb2RlIDEgaWYgdGhlIGNvbW1hbmQgc3BlY2lmaWVkIGRvZXMgbm90IGV4aXN0CiMgQHN0 \
ZGVyciBkaWFnbm9zdGljIGluZm9ybWF0aW9uICsgaGVscCBpZiBzZWNvbmQgYXJndW1lbnQgaXMg \
cHJvdmlkZWQKQXNzZXJ0Ojpjb21tYW5kRXhpc3RzKCkgewogIGxvY2FsIGNvbW1hbmROYW1lPSIk \
MSIKICBsb2NhbCBoZWxwSWZOb3RFeGlzdHM9IiQyIgoKICAiJHtCQVNIX0ZSQU1FV09SS19DT01N \
QU5EOi1jb21tYW5kfSIgLXYgIiR7Y29tbWFuZE5hbWV9IiA+L2Rldi9udWxsIDI+L2Rldi9udWxs \
IHx8IHsKICAgIExvZzo6ZGlzcGxheUVycm9yICIke2NvbW1hbmROYW1lfSBpcyBub3QgaW5zdGFs \
bGVkLCBwbGVhc2UgaW5zdGFsbCBpdCIKICAgIGlmIFtbIC1uICIke2hlbHBJZk5vdEV4aXN0c30i \
IF1dOyB0aGVuCiAgICAgIExvZzo6ZGlzcGxheUluZm8gIiR7aGVscElmTm90RXhpc3RzfSIKICAg \
IGZpCiAgICByZXR1cm4gMQogIH0KICByZXR1cm4gMAp9CgoKIyBAZGVzY3JpcHRpb24gY2hlY2sg \
aWYgdHR5IChpbnRlcmFjdGl2ZSBtb2RlKSBpcyBhY3RpdmUKIyBAbm9hcmdzCiMgQGV4aXRjb2Rl \
IDEgaWYgdHR5IG5vdCBhY3RpdmUKIyBAZW52IE5PTl9JTlRFUkFDVElWRSBpZiAxIGNvbnNpZGVy \
IGFzIG5vdCBpbnRlcmFjdGl2ZSBldmVuIGlmIGVudmlyb25tZW50IGlzIGludGVyYWN0aXZlCiMg \
QGVudiBJTlRFUkFDVElWRSBpZiAxIGNvbnNpZGVyIGFzIGludGVyYWN0aXZlIGV2ZW4gaWYgZW52 \
aXJvbm1lbnQgaXMgbm90IGludGVyYWN0aXZlCkFzc2VydDo6dHR5KCkgewogIGlmIFtbICIke05P \
Tl9JTlRFUkFDVElWRTotMH0iID0gIjEiIF1dOyB0aGVuCiAgICByZXR1cm4gMQogIGZpCiAgaWYg \
W1sgIiR7SU5URVJBQ1RJVkU6LTB9IiA9ICIxIiBdXTsgdGhlbgogICAgcmV0dXJuIDAKICBmaQog \
IHR0eSAtcwp9CgoKIyBAZGVzY3JpcHRpb24gY29udmVydCBiYXNlNjQgZW5jb2RlZCBiYWNrIHRv \
IHRhcmdldCBmaWxlCiMgaWYgdGFyZ2V0IGZpbGUgaXMgZXhlY3V0YWJsZSBwcmVwZW5kIGRpciBv \
ZiB0YXJnZXQKIyBmaWxlIHRvIFBBVEggdG8gbWFrZSBiaW5hcnkgYXZhaWxhYmxlIGV2ZXJ5d2hl \
cmUKIyBpdCBpcyBhZHZpc2VkIHRvIGluY2x1ZGUgaW4gdGhlIHBhdGggb2YgdGhlIHRhcmdldCBm \
aWxlCiMgdGhlIG1kNXN1bSBvZiB0aGUgYmluRmlsZQojCiMgQGFyZyAkMSB0YXJnZXRGaWxlOlN0 \
cmluZyB0aGUgZmlsZSB0byB3cml0ZQojIEBhcmcgJDIgYmluRmlsZUJhc2U2NDpTdHJpbmcgdGhl \
IGJhc2U2NCBlbmNvZGVkIGZpbGUKIyBAYXJnICQzIGZpbGVNb2RlOlN0cmluZyB0aGUgY2htb2Qg \
dG8gc2V0IG9uIHRoZSBmaWxlCiMgQHNldCBQQVRIIFN0cmluZyBwcmVwZW5kIHRhcmdldCBlbWJl \
ZGRlZCBmaWxlIGJpbmFyeSBkaXJlY3RvcnkgdG8gUEFUSCB2YXJpYWJsZSBpZiBiaW5hcnkgZXhl \
Y3V0YWJsZQpDb21waWxlcjo6RW1iZWQ6OmV4dHJhY3RGaWxlRnJvbUJhc2U2NCgpIHsKICBsb2Nh \
bCB0YXJnZXRGaWxlPSIkMSIKICBsb2NhbCBiaW5GaWxlQmFzZTY0PSIkMiIKICBsb2NhbCBmaWxl \
TW9kZT0iJHszOi0reH0iCiAgbG9jYWwgdGFyZ2V0RGlyPSIke3RhcmdldEZpbGUlLyp9IgoKICBp \
ZiBbWyAhIC1mICIke3RhcmdldEZpbGV9IiBdXTsgdGhlbgogICAgaWYgW1sgISAtZCAiJHt0YXJn \
ZXREaXJ9IiBdXTsgdGhlbgogICAgICBta2RpciAtcCAiJHt0YXJnZXREaXJ9IgogICAgZmkKICAg \
IHRyIC1kICdcbiAnIDw8PCIke2JpbkZpbGVCYXNlNjR9IiB8IGJhc2U2NCAtZCA+IiR7dGFyZ2V0 \
RmlsZX0iCiAgICBjaG1vZCAiJHtmaWxlTW9kZX0iICIke3RhcmdldEZpbGV9IgogIGZpCgogIGlm \
IFtbIC14ICIke3RhcmdldEZpbGV9IiBdXTsgdGhlbgogICAgRW52OjpwYXRoUHJlcGVuZCAiJHt0 \
YXJnZXREaXJ9IgogIGZpCn0KCgojIEBkZXNjcmlwdGlvbiBMb2FkIHRoZSBuZWFyZXN0IGNvbmZp \
ZyBmaWxlCiMgaW4gbmV4dCBleGFtcGxlIHdpbGwgc2VhcmNoIGZpcnN0IC5mcmFtZXdvcmstY29u \
ZmlnIGZpbGUgaW4gInNyY0RpcjEiCiMgdGhlbiBpZiBub3QgZm91bmQgd2lsbCBnbyBpbiB1cCBk \
aXJlY3RvcmllcyB1bnRpbCAvCiMgdGhlbiB3aWxsIHNlYXJjaCBpbiAic3JjRGlyMiIKIyB0aGVu \
IGlmIG5vdCBmb3VuZCB3aWxsIGdvIGluIHVwIGRpcmVjdG9yaWVzIHVudGlsIC8KIyBzb3VyY2Ug \
dGhlIGZpbGUgaWYgZm91bmQKIyBAZXhhbXBsZQojICAgQ29uZjo6bG9hZE5lYXJlc3RGaWxlICIu \
ZnJhbWV3b3JrLWNvbmZpZyIgInNyY0RpcjEiICJzcmNEaXIyIgojCiMgQGFyZyAkMSBjb25maWdG \
aWxlTmFtZTpTdHJpbmcgY29uZmlnIGZpbGUgbmFtZSB0byBzZWFyY2gKIyBAYXJnICQyIGxvYWRl \
ZEZpbGU6U3RyaW5nIChwYXNzZWQgYnkgcmVmZXJlbmNlKSB3aWxsIHJldHVybiB0aGUgbG9hZGVk \
IGNvbmZpZyBmaWxlIG5hbWUKIyBAYXJnICRAIHNyY0RpcnM6U3RyaW5nW10gc291cmNlIGRpcmVj \
dG9yaWVzIGluIHdoaWNoIHRoZSBjb25maWcgZmlsZSB3aWxsIGJlIHNlYXJjaGVkCiMgQGV4aXRj \
b2RlIDAgaWYgZmlsZSBmb3VuZAojIEBleGl0Y29kZSAxIGlmIGZpbGUgbm90IGZvdW5kCkNvbmY6 \
OmxvYWROZWFyZXN0RmlsZSgpIHsKICBsb2NhbCBjb25maWdGaWxlTmFtZT0iJDEiCiAgbG9jYWwg \
LW4gbG9hZGVkRmlsZT0iJDIiCiAgc2hpZnQgMiB8fCB0cnVlCiAgbG9jYWwgLWEgc3JjRGlycz0o \
IiRAIikKICBmb3Igc3JjRGlyIGluICIke3NyY0RpcnNbQF19IjsgZG8KICAgIGNvbmZpZ0ZpbGU9 \
IiQoRmlsZTo6dXBGaW5kICIke3NyY0Rpcn0iICIke2NvbmZpZ0ZpbGVOYW1lfSIgfHwgdHJ1ZSki \
CiAgICBpZiBbWyAtbiAiJHtjb25maWdGaWxlfSIgXV07IHRoZW4KICAgICAgIyBzaGVsbGNoZWNr \
IHNvdXJjZT0vLmZyYW1ld29yay1jb25maWcKICAgICAgc291cmNlICIke2NvbmZpZ0ZpbGV9IiB8 \
fCBMb2c6OmZhdGFsICJlcnJvciB3aGlsZSBsb2FkaW5nIGNvbmZpZyBmaWxlICcke2NvbmZpZ0Zp \
bGV9JyIKICAgICAgTG9nOjpkaXNwbGF5RGVidWcgIkNvbmZpZyBmaWxlICR7Y29uZmlnRmlsZX0g \
aXMgbG9hZGVkIgogICAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgICAgbG9hZGVk \
RmlsZT0iJHtjb25maWdGaWxlfSIKICAgICAgcmV0dXJuIDAKICAgIGZpCiAgZG9uZQoKICBMb2c6 \
OmRpc3BsYXlEZWJ1ZyAiQ29uZmlnIGZpbGUgJyR7Y29uZmlnRmlsZU5hbWV9JyBub3QgZm91bmQg \
aW4gYW55IHNvdXJjZSBkaXJlY3RvcmllcyBwcm92aWRlZCIKICByZXR1cm4gMQp9CgoKIyBAZGVz \
Y3JpcHRpb24gZGVmYXVsdCBlbnYgZmlsZSB3aXRoIGFsbCBkZWZhdWx0IHZhbHVlcwojIEBzdGRv \
dXQgdGhlIGRlZmF1bHQgZW52IGZpbGVwYXRoCkVudjo6Y3JlYXRlRGVmYXVsdEVudkZpbGUoKSB7 \
CiAgbG9jYWwgZW52RmlsZQogIGVudkZpbGU9IiQoRnJhbWV3b3JrOjpjcmVhdGVUZW1wRmlsZSAi \
Y3JlYXRlRGVmYXVsdEVudkZpbGVFbnZGaWxlIikiIHx8IHJldHVybiAyCgogICgKICAgIGVjaG8g \
IkJBU0hfRlJBTUVXT1JLX1RIRU1FPSR7QkFTSF9GUkFNRVdPUktfVEhFTUU6LWRlZmF1bHR9Igog \
ICAgZWNobyAiQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMPSR7QkFTSF9GUkFNRVdPUktfTE9HX0xF \
VkVMOi0ke19fTEVWRUxfT0ZGfX0iCiAgICBlY2hvICJCQVNIX0ZSQU1FV09SS19ESVNQTEFZX0xF \
VkVMPSR7QkFTSF9GUkFNRVdPUktfRElTUExBWV9MRVZFTDotJHtfX0xFVkVMX0lORk99fSIKICAg \
ICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAxNgogICAgZWNobyAnQkFTSF9GUkFNRVdPUktfTE9H \
X0ZJTEU9IiR7QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEU6LSIke0ZSQU1FV09SS19ST09UX0RJUn0v \
bG9ncy8ke1NDUklQVF9OQU1FfS5sb2cifSInCiAgICBlY2hvICJCQVNIX0ZSQU1FV09SS19MT0df \
RklMRV9NQVhfUk9UQVRJT049JHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRV9NQVhfUk9UQVRJT046 \
LTV9IgogICkgPiIke2VudkZpbGV9IgogIGVjaG8gIiR7ZW52RmlsZX0iCn0KCgojIEBkZXNjcmlw \
dGlvbiBwcmVwZW5kIGRpcmVjdG9yaWVzIHRvIHRoZSBQQVRIIGVudmlyb25tZW50IHZhcmlhYmxl \
CiMgQGFyZyAkQCBhcmdzOlN0cmluZ1tdIGxpc3Qgb2YgZGlyZWN0b3JpZXMgdG8gcHJlcGVuZAoj \
IEBzZXQgUEFUSCB1cGRhdGUgUEFUSCB3aXRoIHRoZSBkaXJlY3RvcmllcyBwcmVwZW5kZWQKRW52 \
OjpwYXRoUHJlcGVuZCgpIHsKICBsb2NhbCBhcmcKICBmb3IgYXJnIGluICIkQCI7IGRvCiAgICBp \
ZiBbWyAtZCAiJHthcmd9IiAmJiAiOiR7UEFUSH06IiAhPSAqIjoke2FyZ306IiogXV07IHRoZW4K \
ICAgICAgUEFUSD0iJChyZWFscGF0aCAiJHthcmd9Iik6JHtQQVRIfSIKICAgIGZpCiAgZG9uZQp9 \
CgoKIyBAZGVzY3JpcHRpb24gZW5zdXJlIGVudiBmaWxlcyBhcmUgbG9hZGVkCiMgQGFyZyAkQCBs \
aXN0IG9mIGRlZmF1bHQgZmlsZXMgdG8gbG9hZCBhdCB0aGUgZW5kCiMgQGV4aXRjb2RlIDEgaWYg \
b25lIG9mIGVudiBmaWxlcyBmYWlscyB0byBsb2FkCiMgQHN0ZGVyciBkaWFnbm9zdGljcyBpbmZv \
cm1hdGlvbiBpcyBkaXNwbGF5ZWQKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTIwCkVudjo6cmVx \
dWlyZUxvYWQoKSB7CiAgZXhwb3J0IFJFUVVJUkVfRlVOQ1RJT05fRU5WX1JFUVVJUkVfTE9BRF9M \
T0FERUQ9MQoKICBsb2NhbCAtYSBkZWZhdWx0RmlsZXM9KCIkQCIpCiAgIyBnZXQgbGlzdCBvZiBw \
b3NzaWJsZSBjb25maWcgZmlsZXMKICBsb2NhbCAtYSBjb25maWdGaWxlcz0oKQogIGxvY2FsIGRl \
ZmF1bHRFbnZGaWxlCiAgZGVmYXVsdEVudkZpbGU9IiQoRW52OjpjcmVhdGVEZWZhdWx0RW52Rmls \
ZSkiIHx8IHJldHVybiAxCiAgY29uZmlnRmlsZXMrPSgiJHtkZWZhdWx0RW52RmlsZX0iKQogIGlm \
IFtbIC1uICIke0JBU0hfRlJBTUVXT1JLX0VOVl9GSUxFU1swXSsxfSIgXV07IHRoZW4KICAgICMg \
QkFTSF9GUkFNRVdPUktfRU5WX0ZJTEVTIGlzIGFuIGFycmF5CiAgICBjb25maWdGaWxlcys9KCIk \
e0JBU0hfRlJBTUVXT1JLX0VOVl9GSUxFU1tAXX0iKQogIGZpCiAgaWYgW1sgLWYgIiR7RlJBTUVX \
T1JLX1JPT1RfRElSfS8uZnJhbWV3b3JrLWNvbmZpZyIgXV07IHRoZW4KICAgIGNvbmZpZ0ZpbGVz \
Kz0oIiR7RlJBTUVXT1JLX1JPT1RfRElSfS8uZnJhbWV3b3JrLWNvbmZpZyIpCiAgZmkKICBsb2Nh \
bCBsb2NhbEZyYW1ld29ya0NvbmZpZ0ZpbGUKICBCQVNIX0ZSQU1FV09SS19ESVNQTEFZX0xFVkVM \
PSIke19fTEVWRUxfSU5GT30iIFwKICAgIEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTD0iJHtfX0xF \
VkVMX09GRn0iIFwKICAgIENvbmY6OmxvYWROZWFyZXN0RmlsZSAiLmZyYW1ld29yay1jb25maWci \
IGxvY2FsRnJhbWV3b3JrQ29uZmlnRmlsZSAiJChwd2QpIiB8fCB0cnVlCiAgaWYgW1sgLWYgIiR7 \
bG9jYWxGcmFtZXdvcmtDb25maWdGaWxlfSIgXV07IHRoZW4KICAgIGNvbmZpZ0ZpbGVzKz0oIiR7 \
bG9jYWxGcmFtZXdvcmtDb25maWdGaWxlfSIpCiAgZmkKICBjb25maWdGaWxlcys9KCIke29wdGlv \
bkVudkZpbGVzW0BdfSIpCiAgY29uZmlnRmlsZXMrPSgiJHtkZWZhdWx0RmlsZXNbQF19IikKCiAg \
d2hpbGUgSUZTPScnIHJlYWQgLXIgZmlsZTsgZG8KICAgICMgc2hlbGxjaGVjayBzb3VyY2U9L3Ny \
Yy9FbnYvY3JlYXRlRGVmYXVsdEVudkZpbGUuc2gKICAgIENVUlJFTlRfTE9BREVEX0VOVl9GSUxF \
PSIke2ZpbGV9IiBzb3VyY2UgIiR7ZmlsZX0iIHx8IHsKICAgICAgTG9nOjpkaXNwbGF5RXJyb3Ig \
IndoaWxlIGxvYWRpbmcgY29uZmlnIGZpbGU6ICR7ZmlsZX0iCiAgICAgIHJldHVybiAxCiAgICB9 \
CiAgZG9uZSA8IDwocHJpbnRmICclc1xuJyAiJHtjb25maWdGaWxlc1tAXX0iIHwgYXdrICcheFsk \
MF0rKycpCn0KCgojIEBkZXNjcmlwdGlvbiBzZWFyY2ggYSBmaWxlIGluIHBhcmVudCBkaXJlY3Rv \
cmllcwojCiMgQGFyZyAkMSBmcm9tUGF0aDpTdHJpbmcgcGF0aAojIEBhcmcgJDIgZmlsZU5hbWU6 \
U3RyaW5nCiMgQGFyZyAkMyB1bnRpbEluY2x1c2l2ZVBhdGg6U3RyaW5nIChvcHRpb25hbCkgZmlu \
ZCBmb3IgZ2l2ZW4gZmlsZSB1bnRpbCByZWFjaGluZyB0aGlzIGZvbGRlciAoZGVmYXVsdCB2YWx1 \
ZTogLykKIyBAYXJnICRAIHVudGlsSW5jbHVzaXZlUGF0aHM6U3RyaW5nW10gbGlzdCBvZiB1bnRp \
bEluY2x1c2l2ZVBhdGgKIyBAc3Rkb3V0IFRoZSBmaWxlbmFtZSBpZiBmb3VuZAojIEBleGl0Y29k \
ZSAxIGlmIHRoZSBjb21tYW5kIGZhaWxlZCBvciBmaWxlIG5vdCBmb3VuZApGaWxlOjp1cEZpbmQo \
KSB7CiAgbG9jYWwgZnJvbVBhdGg9IiQxIgogIHNoaWZ0IHx8IHRydWUKICBsb2NhbCBmaWxlTmFt \
ZT0iJDEiCiAgc2hpZnQgfHwgdHJ1ZQogIGxvY2FsIHVudGlsSW5jbHVzaXZlUGF0aD0iJHsxOi0v \
fSIKICBzaGlmdCB8fCB0cnVlCgogIGlmIFtbIC1mICIke2Zyb21QYXRofSIgXV07IHRoZW4KICAg \
IGZyb21QYXRoPSIke2Zyb21QYXRoJS8qfSIKICBmaQogIHdoaWxlIHRydWU7IGRvCiAgICBpZiBb \
WyAtZiAiJHtmcm9tUGF0aH0vJHtmaWxlTmFtZX0iIF1dOyB0aGVuCiAgICAgIGVjaG8gIiR7ZnJv \
bVBhdGh9LyR7ZmlsZU5hbWV9IgogICAgICByZXR1cm4gMAogICAgZmkKICAgIGlmIEFycmF5Ojpj \
b250YWlucyAiJHtmcm9tUGF0aH0iICIke3VudGlsSW5jbHVzaXZlUGF0aH0iICIkQCIgIi8iOyB0 \
aGVuCiAgICAgIHJldHVybiAxCiAgICBmaQogICAgZnJvbVBhdGg9IiQocmVhZGxpbmsgLWYgIiR7 \
ZnJvbVBhdGh9Ii8uLikiCiAgZG9uZQogIHJldHVybiAxCn0KCgojIEBkZXNjcmlwdGlvbiBjcmVh \
dGUgYSB0ZW1wIGZpbGUgdXNpbmcgZGVmYXVsdCBUTVBESVIgdmFyaWFibGUKIyBAZW52IFRNUERJ \
UiBTdHJpbmcgKGRlZmF1bHQgdmFsdWUgL3RtcCkKIyBAYXJnICQxIHRlbXBsYXRlTmFtZTpTdHJp \
bmcgdGVtcGxhdGUgbmFtZSB0byB1c2Uob3B0aW9uYWwpCkZyYW1ld29yazo6Y3JlYXRlVGVtcEZp \
bGUoKSB7CiAgbWt0ZW1wIC1wICIke1RNUERJUjotL3RtcH0iIC10ICIkezE6LX0uWFhYWFhYWFhY \
WFhYIgp9CgoKIyBAZGVzY3JpcHRpb24gZW5zdXJlIGNvbW1hbmQgdGFyIGlzIGF2YWlsYWJsZQoj \
IEBleGl0Y29kZSAxIGlmIHRhciBjb21tYW5kIG5vdCBhdmFpbGFibGUKIyBAc3RkZXJyIGRpYWdu \
b3N0aWNzIGluZm9ybWF0aW9uIGlzIGRpc3BsYXllZApMaW51eDo6cmVxdWlyZVRhckNvbW1hbmQo \
KSB7CiAgQXNzZXJ0Ojpjb21tYW5kRXhpc3RzIHRhcgp9CgoKZGVjbGFyZSAtZyBGSVJTVF9MT0df \
REFURSBMT0dfTEFTVF9MT0dfREFURSBMT0dfTEFTVF9MT0dfREFURV9JTklUIExPR19MQVNUX0RV \
UkFUSU9OX1NUUgpGSVJTVF9MT0dfREFURT0iJHtFUE9DSFJFQUxUSU1FL1teMC05XS99IgpMT0df \
TEFTVF9MT0dfREFURT0iJHtGSVJTVF9MT0dfREFURX0iCkxPR19MQVNUX0xPR19EQVRFX0lOSVQ9 \
MQpMT0dfTEFTVF9EVVJBVElPTl9TVFI9IiIKCiMgQGRlc2NyaXB0aW9uIGNvbXB1dGUgZHVyYXRp \
b24gc2luY2UgbGFzdCBjYWxsIHRvIHRoaXMgZnVuY3Rpb24KIyB0aGUgcmVzdWx0IGlzIHNldCBp \
biBmb2xsb3dpbmcgZW52IHZhcmlhYmxlcy4KIyBpbiBzcy5zc3MgKHNlY29uZHMgZm9sbG93ZWQg \
YnkgbWlsbGlzZWNvbmRzIHByZWNpc2lvbiAzIGRlY2ltYWxzKQojIEBub2FyZ3MKIyBAZW52IERJ \
U1BMQVlfRFVSQVRJT04gaW50IChkZWZhdWx0IDApIGlmIDEgZGlzcGxheSBlbGFwc2VkIHRpbWUg \
aW5mb3JtYXRpb24gYmV0d2VlbiAyIGluZm8gbG9ncwojIEBzZXQgTE9HX0xBU1RfTE9HX0RBVEVf \
SU5JVCBpbnQgKGRlZmF1bHQgMSkgc2V0IHRvIDAgYXQgZmlyc3QgY2FsbCwgYWxsb3dzIHRvIGRl \
dGVjdCByZWZlcmVuY2UgbG9nCiMgQHNldCBMT0dfTEFTVF9EVVJBVElPTl9TVFIgU3RyaW5nIHRo \
ZSBsYXN0IGR1cmF0aW9uIGRpc3BsYXllZAojIEBzZXQgTE9HX0xBU1RfTE9HX0RBVEUgU3RyaW5n \
IHRoZSBsYXN0IGxvZyBkYXRlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGNvbXB1dGUgbmV4dCBkaWZm \
CkxvZzo6Y29tcHV0ZUR1cmF0aW9uKCkgewogIGlmICgoJHtESVNQTEFZX0RVUkFUSU9OOi0wfSA9 \
PSAxKSk7IHRoZW4KICAgIGxvY2FsIC1pIGR1cmF0aW9uPTAKICAgIGxvY2FsIC1pIGRlbHRhPTAK \
ICAgIGxvY2FsIGR1cmF0aW9uU3RyIGRlbHRhU3RyCiAgICBsb2NhbCAtaSBjdXJyZW50TG9nRGF0 \
ZQogICAgY3VycmVudExvZ0RhdGU9IiR7RVBPQ0hSRUFMVElNRS9bXjAtOV0vfSIKICAgIGlmICgo \
TE9HX0xBU1RfTE9HX0RBVEVfSU5JVCA9PSAxKSk7IHRoZW4KICAgICAgTE9HX0xBU1RfTE9HX0RB \
VEVfSU5JVD0wCiAgICAgIExPR19MQVNUX0RVUkFUSU9OX1NUUj0iUmVmIgogICAgZWxzZQogICAg \
ICBkdXJhdGlvbj0kKCgoY3VycmVudExvZ0RhdGUgLSBGSVJTVF9MT0dfREFURSkgLyAxMDAwMDAw \
KSkKICAgICAgZGVsdGE9JCgoKGN1cnJlbnRMb2dEYXRlIC0gTE9HX0xBU1RfTE9HX0RBVEUpIC8g \
MTAwMDAwMCkpCiAgICAgIGlmICgoZHVyYXRpb24gPiA1OSkpOyB0aGVuCiAgICAgICAgZHVyYXRp \
b25TdHI9JChkYXRlIC11ZCAiQCR7ZHVyYXRpb259IiArJyVIOiVNOiVTJykKICAgICAgZWxzZQog \
ICAgICAgIGR1cmF0aW9uU3RyPSIke2R1cmF0aW9ufXMiCiAgICAgIGZpCiAgICAgIGlmICgoZGVs \
dGEgPiA1OSkpOyB0aGVuCiAgICAgICAgZGVsdGFTdHI9JChkYXRlIC11ZCAiQCR7ZGVsdGF9IiAr \
JyVIOiVNOiVTJykKICAgICAgZWxzZQogICAgICAgIGRlbHRhU3RyPSIke2RlbHRhfXMiCiAgICAg \
IGZpCiAgICAgIExPR19MQVNUX0RVUkFUSU9OX1NUUj0iJHtkdXJhdGlvblN0cn0vKyR7ZGVsdGFT \
dHJ9IgogICAgZmkKICAgIExPR19MQVNUX0xPR19EQVRFPSIke2N1cnJlbnRMb2dEYXRlfSIKICAg \
ICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgbWljcm9TZWNvbmRzPSIke0VQ \
T0NIUkVBTFRJTUUjKi59IgogICAgTE9HX0xBU1RfRFVSQVRJT05fU1RSPSIkKHByaW50ZiAnJSgl \
VClULiUwMy4wZlxuJyAiJHtFUE9DSFNFQ09ORFN9IiAiJHttaWNyb1NlY29uZHM6MDozfSIpKCR7 \
TE9HX0xBU1RfRFVSQVRJT05fU1RSfSkgLSAiCiAgZWxzZQogICAgIyBzaGVsbGNoZWNrIGRpc2Fi \
bGU9U0MyMDM0CiAgICBMT0dfTEFTVF9EVVJBVElPTl9TVFI9IiIKICBmaQp9CgoKIyBAZGVzY3Jp \
cHRpb24gRGlzcGxheSBtZXNzYWdlIHVzaW5nIGRlYnVnIGNvbG9yIChncmF5KQojIEBhcmcgJDEg \
bWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQojIEBlbnYgRElTUExBWV9EVVJB \
VElPTiBpbnQgKGRlZmF1bHQgMCkgaWYgMSBkaXNwbGF5IGVsYXBzZWQgdGltZSBpbmZvcm1hdGlv \
biBiZXR3ZWVuIDIgaW5mbyBsb2dzCiMgQGVudiBMT0dfQ09OVEVYVCBTdHJpbmcgYWxsb3dzIHRv \
IGNvbnRleHR1YWxpemUgdGhlIGxvZwpMb2c6OmRpc3BsYXlEZWJ1ZygpIHsKICBpZiAoKEJBU0hf \
RlJBTUVXT1JLX0RJU1BMQVlfTEVWRUwgPj0gX19MRVZFTF9ERUJVRykpOyB0aGVuCiAgICBMb2c6 \
OmNvbXB1dGVEdXJhdGlvbgogICAgZWNobyAtZSAiJHtfX0RFQlVHX0NPTE9SfURFQlVHICAgLSAk \
e0xPR19DT05URVhUOi19JHtMT0dfTEFTVF9EVVJBVElPTl9TVFI6LX0kezF9JHtfX1JFU0VUX0NP \
TE9SfSIgPiYyCiAgZmkKICBMb2c6OmxvZ0RlYnVnICIkMSIKfQoKCiMgQGRlc2NyaXB0aW9uIERp \
c3BsYXkgbWVzc2FnZSB1c2luZyBlcnJvciBjb2xvciAocmVkKQojIEBhcmcgJDEgbWVzc2FnZTpT \
dHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQojIEBlbnYgRElTUExBWV9EVVJBVElPTiBpbnQg \
KGRlZmF1bHQgMCkgaWYgMSBkaXNwbGF5IGVsYXBzZWQgdGltZSBpbmZvcm1hdGlvbiBiZXR3ZWVu \
IDIgaW5mbyBsb2dzCiMgQGVudiBMT0dfQ09OVEVYVCBTdHJpbmcgYWxsb3dzIHRvIGNvbnRleHR1 \
YWxpemUgdGhlIGxvZwpMb2c6OmRpc3BsYXlFcnJvcigpIHsKICBpZiAoKEJBU0hfRlJBTUVXT1JL \
X0RJU1BMQVlfTEVWRUwgPj0gX19MRVZFTF9FUlJPUikpOyB0aGVuCiAgICBMb2c6OmNvbXB1dGVE \
dXJhdGlvbgogICAgZWNobyAtZSAiJHtfX0VSUk9SX0NPTE9SfUVSUk9SICAgLSAke0xPR19DT05U \
RVhUOi19JHtMT0dfTEFTVF9EVVJBVElPTl9TVFI6LX0kezF9JHtfX1JFU0VUX0NPTE9SfSIgPiYy \
CiAgZmkKICBMb2c6OmxvZ0Vycm9yICIkMSIKfQoKCiMgQGRlc2NyaXB0aW9uIERpc3BsYXkgbWVz \
c2FnZSB1c2luZyBpbmZvIGNvbG9yIChiZyBsaWdodCBibHVlL2ZnIHdoaXRlKQojIEBhcmcgJDEg \
bWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQojIEBlbnYgRElTUExBWV9EVVJB \
VElPTiBpbnQgKGRlZmF1bHQgMCkgaWYgMSBkaXNwbGF5IGVsYXBzZWQgdGltZSBpbmZvcm1hdGlv \
biBiZXR3ZWVuIDIgaW5mbyBsb2dzCiMgQGVudiBMT0dfQ09OVEVYVCBTdHJpbmcgYWxsb3dzIHRv \
IGNvbnRleHR1YWxpemUgdGhlIGxvZwpMb2c6OmRpc3BsYXlJbmZvKCkgewogIGxvY2FsIHR5cGU9 \
IiR7MjotSU5GT30iCiAgaWYgKChCQVNIX0ZSQU1FV09SS19ESVNQTEFZX0xFVkVMID49IF9fTEVW \
RUxfSU5GTykpOyB0aGVuCiAgICBMb2c6OmNvbXB1dGVEdXJhdGlvbgogICAgZWNobyAtZSAiJHtf \
X0lORk9fQ09MT1J9JHt0eXBlfSAgICAtICR7TE9HX0NPTlRFWFQ6LX0ke0xPR19MQVNUX0RVUkFU \
SU9OX1NUUjotfSR7MX0ke19fUkVTRVRfQ09MT1J9IiA+JjIKICBmaQogIExvZzo6bG9nSW5mbyAi \
JDEiICIke3R5cGV9Igp9CgoKIyBAZGVzY3JpcHRpb24gRGlzcGxheSBtZXNzYWdlIHVzaW5nIGVy \
cm9yIGNvbG9yIChyZWQpIGFuZCBleGl0IGltbWVkaWF0ZWx5IHdpdGggZXJyb3Igc3RhdHVzIDEK \
IyBAYXJnICQxIG1lc3NhZ2U6U3RyaW5nIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXkKIyBAZW52IERJ \
U1BMQVlfRFVSQVRJT04gaW50IChkZWZhdWx0IDApIGlmIDEgZGlzcGxheSBlbGFwc2VkIHRpbWUg \
aW5mb3JtYXRpb24gYmV0d2VlbiAyIGluZm8gbG9ncwojIEBlbnYgTE9HX0NPTlRFWFQgU3RyaW5n \
IGFsbG93cyB0byBjb250ZXh0dWFsaXplIHRoZSBsb2cKTG9nOjpmYXRhbCgpIHsKICBMb2c6OmNv \
bXB1dGVEdXJhdGlvbgogIGVjaG8gLWUgIiR7X19FUlJPUl9DT0xPUn1GQVRBTCAgIC0gJHtMT0df \
Q09OVEVYVDotfSR7TE9HX0xBU1RfRFVSQVRJT05fU1RSOi19JHsxfSR7X19SRVNFVF9DT0xPUn0i \
ID4mMgogIExvZzo6bG9nRmF0YWwgIiQxIgogIGV4aXQgMQp9CgoKIyBAZGVzY3JpcHRpb24gbG9n \
IG1lc3NhZ2UgdG8gZmlsZQojIEBhcmcgJDEgbWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8g \
ZGlzcGxheQpMb2c6OmxvZ0RlYnVnKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVM \
ID49IF9fTEVWRUxfREVCVUcpKTsgdGhlbgogICAgTG9nOjpsb2dNZXNzYWdlICIkezI6LURFQlVH \
fSIgIiQxIgogIGZpCn0KCgojIEBkZXNjcmlwdGlvbiBsb2cgbWVzc2FnZSB0byBmaWxlCiMgQGFy \
ZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6bG9nRXJyb3Io \
KSB7CiAgaWYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgPj0gX19MRVZFTF9FUlJPUikpOyB0 \
aGVuCiAgICBMb2c6OmxvZ01lc3NhZ2UgIiR7MjotRVJST1J9IiAiJDEiCiAgZmkKfQoKCiMgQGRl \
c2NyaXB0aW9uIGxvZyBtZXNzYWdlIHRvIGZpbGUKIyBAYXJnICQxIG1lc3NhZ2U6U3RyaW5nIHRo \
ZSBtZXNzYWdlIHRvIGRpc3BsYXkKTG9nOjpsb2dGYXRhbCgpIHsKICBMb2c6OmxvZ01lc3NhZ2Ug \
IiR7MjotRkFUQUx9IiAiJDEiCn0KCgojIEBkZXNjcmlwdGlvbiBsb2cgbWVzc2FnZSB0byBmaWxl \
CiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6bG9n \
SW5mbygpIHsKICBpZiAoKEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTCA+PSBfX0xFVkVMX0lORk8p \
KTsgdGhlbgogICAgTG9nOjpsb2dNZXNzYWdlICIkezI6LUlORk99IiAiJDEiCiAgZmkKfQoKCiMg \
QGRlc2NyaXB0aW9uIEludGVybmFsOiBjb21tb24gbG9nIG1lc3NhZ2UKIyBAZXhhbXBsZSB0ZXh0 \
CiMgICBbZGF0ZV18W2xldmVsTXNnXXxtZXNzYWdlCiMKIyBAZXhhbXBsZSB0ZXh0CiMgICAyMDIw \
LTAxLTE5IDE5OjIwOjIxfEVSUk9SICB8bG9nIGVycm9yCiMgICAyMDIwLTAxLTE5IDE5OjIwOjIx \
fFNLSVBQRUR8bG9nIHNraXBwZWQKIwojIEBhcmcgJDEgbGV2ZWxNc2c6U3RyaW5nIG1lc3NhZ2Un \
cyBsZXZlbCBkZXNjcmlwdGlvbiAoZWc6IFNUQVRVUywgRVJST1IsIC4uLikKIyBAYXJnICQyIG1z \
ZzpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQojIEBlbnYgQkFTSF9GUkFNRVdPUktfTE9H \
X0ZJTEUgU3RyaW5nIGxvZyBmaWxlIHRvIHVzZSwgZG8gbm90aGluZyBpZiBlbXB0eQojIEBlbnYg \
QkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMIGludCBsb2cgbGV2ZWwgbG9nIG9ubHkgaWYgPiBPRkYg \
b3IgZmF0YWwgbWVzc2FnZXMKIyBAc3RkZXJyIGRpYWdub3N0aWNzIGluZm9ybWF0aW9uIGlzIGRp \
c3BsYXllZApMb2c6OmxvZ01lc3NhZ2UoKSB7CgogIGlmIFtbICIke1JFUVVJUkVfRlVOQ1RJT05f \
RU5WX1JFUVVJUkVfTE9BRF9MT0FERUQ6LTB9IiAhPSAxIF1dOyB0aGVuCiAgICBlY2hvID4mMiAi \
UmVxdWlyZW1lbnQgRW52OjpyZXF1aXJlTG9hZCBoYXMgbm90IGJlZW4gbG9hZGVkIgogICAgZXhp \
dCAxCiAgZmkKCiAgaWYgW1sgIiR7UkVRVUlSRV9GVU5DVElPTl9MT0dfUkVRVUlSRV9MT0FEX0xP \
QURFRDotMH0iICE9IDEgXV07IHRoZW4KICAgIGVjaG8gPiYyICJSZXF1aXJlbWVudCBMb2c6OnJl \
cXVpcmVMb2FkIGhhcyBub3QgYmVlbiBsb2FkZWQiCiAgICBleGl0IDEKICBmaQoKICBsb2NhbCBs \
ZXZlbE1zZz0iJDEiCiAgbG9jYWwgbXNnPSIkMiIKICBsb2NhbCBkYXRlCgogIGlmIFtbIC1uICIk \
e0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSIgXV0gJiYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVW \
RUwgPiBfX0xFVkVMX09GRikpOyB0aGVuCiAgICBkYXRlPSIkKGRhdGUgJyslWS0lbS0lZCAlSDol \
TTolUycpIgogICAgdG91Y2ggIiR7QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEV9IgogICAgcHJpbnRm \
ICIlc3wlN3N8JXNcbiIgIiR7ZGF0ZX0iICIke2xldmVsTXNnfSIgIiR7bXNnfSIgPj4iJHtCQVNI \
X0ZSQU1FV09SS19MT0dfRklMRX0iCiAgZmkKfQoKCiMgQGRlc2NyaXB0aW9uIGFjdGl2YXRlIG9y \
IG5vdCBMb2c6OmRpc3BsYXkqIGFuZCBMb2c6OmxvZyogZnVuY3Rpb25zCiMgYmFzZWQgb24gQkFT \
SF9GUkFNRVdPUktfRElTUExBWV9MRVZFTCBhbmQgQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMCiMg \
ZW52aXJvbm1lbnQgdmFyaWFibGVzIGxvYWRlZCBieSBFbnY6OnJlcXVpcmVMb2FkCiMgdHJ5IHRv \
IGNyZWF0ZSBsb2cgZmlsZSBhbmQgcm90YXRlIGl0IGlmIG5lY2Vzc2FyeQojIEBub2FyZ3MKIyBA \
c2V0IEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTCBpbnQgdG8gT0ZGIGxldmVsIGlmIEJBU0hfRlJB \
TUVXT1JLX0xPR19GSUxFIGlzIGVtcHR5IG9yIG5vdCB3cml0YWJsZQojIEBlbnYgQkFTSF9GUkFN \
RVdPUktfRElTUExBWV9MRVZFTCBpbnQKIyBAZW52IEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTCBp \
bnQKIyBAZW52IEJBU0hfRlJBTUVXT1JLX0xPR19GSUxFIFN0cmluZwojIEBlbnYgQkFTSF9GUkFN \
RVdPUktfTE9HX0ZJTEVfTUFYX1JPVEFUSU9OIGludCBkbyBsb2cgcm90YXRpb24gaWYgPiAwCiMg \
QGV4aXRjb2RlIDAgYWx3YXlzIHN1Y2Nlc3NmdWwKIyBAc3RkZXJyIGRpYWdub3N0aWNzIGluZm9y \
bWF0aW9uIGFib3V0IGxvZyBmaWxlIGlzIGRpc3BsYXllZApMb2c6OnJlcXVpcmVMb2FkKCkgewog \
IGV4cG9ydCBSRVFVSVJFX0ZVTkNUSU9OX0xPR19SRVFVSVJFX0xPQURfTE9BREVEPTEKCgogIGlm \
IFtbICIke1JFUVVJUkVfRlVOQ1RJT05fRU5WX1JFUVVJUkVfTE9BRF9MT0FERUQ6LTB9IiAhPSAx \
IF1dOyB0aGVuCiAgICBlY2hvID4mMiAiUmVxdWlyZW1lbnQgRW52OjpyZXF1aXJlTG9hZCBoYXMg \
bm90IGJlZW4gbG9hZGVkIgogICAgZXhpdCAxCiAgZmkKCiAgaWYgW1sgIiR7UkVRVUlSRV9GVU5D \
VElPTl9VSV9SRVFVSVJFX1RIRU1FX0xPQURFRDotMH0iICE9IDEgXV07IHRoZW4KICAgIGVjaG8g \
PiYyICJSZXF1aXJlbWVudCBVSTo6cmVxdWlyZVRoZW1lIGhhcyBub3QgYmVlbiBsb2FkZWQiCiAg \
ICBleGl0IDEKICBmaQoKICBpZiBbWyAteiAiJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRTotfSIg \
XV07IHRoZW4KICAgIEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTD0ke19fTEVWRUxfT0ZGfQogICAg \
ZXhwb3J0IEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTAogIGZpCgogIGlmICgoQkFTSF9GUkFNRVdP \
UktfTE9HX0xFVkVMID4gX19MRVZFTF9PRkYpKTsgdGhlbgogICAgaWYgW1sgISAtZiAiJHtCQVNI \
X0ZSQU1FV09SS19MT0dfRklMRX0iIF1dOyB0aGVuCiAgICAgIGlmIFtbICEgLWQgIiR7QkFTSF9G \
UkFNRVdPUktfTE9HX0ZJTEUlLyp9IiBdXTsgdGhlbgogICAgICAgIGlmICEgbWtkaXIgLXAgIiR7 \
QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEUlLyp9IiAyPi9kZXYvbnVsbDsgdGhlbgogICAgICAgICAg \
QkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMPSR7X19MRVZFTF9PRkZ9CiAgICAgICAgICBlY2hvIC1l \
ICIke19fRVJST1JfQ09MT1J9RVJST1IgICAtIGRpcmVjdG9yeSAke0JBU0hfRlJBTUVXT1JLX0xP \
R19GSUxFJS8qfSBpcyBub3Qgd3JpdGFibGUke19fUkVTRVRfQ09MT1J9IiA+JjIKICAgICAgICBm \
aQogICAgICBlbGlmICEgdG91Y2ggLS1uby1jcmVhdGUgIiR7QkFTSF9GUkFNRVdPUktfTE9HX0ZJ \
TEV9IiAyPi9kZXYvbnVsbDsgdGhlbgogICAgICAgIEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTD0k \
e19fTEVWRUxfT0ZGfQogICAgICAgIGVjaG8gLWUgIiR7X19FUlJPUl9DT0xPUn1FUlJPUiAgIC0g \
RmlsZSAke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSBpcyBub3Qgd3JpdGFibGUke19fUkVTRVRf \
Q09MT1J9IiA+JjIKICAgICAgZmkKICAgIGVsaWYgW1sgISAtdyAiJHtCQVNIX0ZSQU1FV09SS19M \
T0dfRklMRX0iIF1dOyB0aGVuCiAgICAgIEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTD0ke19fTEVW \
RUxfT0ZGfQogICAgICBlY2hvIC1lICIke19fRVJST1JfQ09MT1J9RVJST1IgICAtIEZpbGUgJHtC \
QVNIX0ZSQU1FV09SS19MT0dfRklMRX0gaXMgbm90IHdyaXRhYmxlJHtfX1JFU0VUX0NPTE9SfSIg \
PiYyCiAgICBmaQogIGZpCgogIGlmICgoQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMID4gX19MRVZF \
TF9PRkYpKTsgdGhlbgogICAgIyB3aWxsIGFsd2F5cyBiZSBjcmVhdGVkIGV2ZW4gaWYgbm90IGlu \
IGluZm8gbGV2ZWwKICAgIExvZzo6bG9nTWVzc2FnZSAiSU5GTyIgIkxvZ2dpbmcgdG8gZmlsZSAk \
e0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSAtIExvZyBsZXZlbCAke0JBU0hfRlJBTUVXT1JLX0xP \
R19MRVZFTH0iCiAgICBpZiAoKEJBU0hfRlJBTUVXT1JLX0xPR19GSUxFX01BWF9ST1RBVElPTiA+ \
IDApKTsgdGhlbgogICAgICBMb2c6OnJvdGF0ZSAiJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRX0i \
ICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFX01BWF9ST1RBVElPTn0iCiAgICBmaQogIGZpCn0K \
CgojIEBkZXNjcmlwdGlvbiBUbyBiZSBjYWxsZWQgYmVmb3JlIGxvZ2dpbmcgaW4gdGhlIGxvZyBm \
aWxlCiMgQGFyZyAkMSBmaWxlOnN0cmluZyBsb2cgZmlsZSBuYW1lCiMgQGFyZyAkMiBtYXhMb2dG \
aWxlc0NvdW50OmludCBtYXhpbXVtIG51bWJlciBvZiBsb2cgZmlsZXMKTG9nOjpyb3RhdGUoKSB7 \
CiAgbG9jYWwgZmlsZT0iJDEiCiAgbG9jYWwgbWF4TG9nRmlsZXNDb3VudD0iJHsyOi01fSIKCiAg \
aWYgW1sgISAtZiAiJHtmaWxlfSIgXV07IHRoZW4KICAgIExvZzo6ZGlzcGxheURlYnVnICJMb2cg \
ZmlsZSAke2ZpbGV9IGRvZXNuJ3QgZXhpc3QgeWV0IgogICAgcmV0dXJuIDAKICBmaQogIGxvY2Fs \
IGkKICBmb3IgKChpID0gbWF4TG9nRmlsZXNDb3VudCAtIDE7IGkgPiAwOyBpLS0pKTsgZG8KICAg \
IExvZzo6ZGlzcGxheUluZm8gIkxvZyByb3RhdGlvbiAke2ZpbGV9LiR7aX0gdG8gJHtmaWxlfS4k \
KChpICsgMSkpIgogICAgbXYgIiR7ZmlsZX0uInsiJHtpfSIsIiQoKGkgKyAxKSkifSAmPi9kZXYv \
bnVsbCB8fCB0cnVlCiAgZG9uZQogIGlmIGNwICIke2ZpbGV9IiAiJHtmaWxlfS4xIiAmPi9kZXYv \
bnVsbDsgdGhlbgogICAgZWNobyA+IiR7ZmlsZX0iICMgcmVzZXQgbG9nIGZpbGUKICAgIExvZzo6 \
ZGlzcGxheUluZm8gIkxvZyByb3RhdGlvbiAke2ZpbGV9IHRvICR7ZmlsZX0uMSIKICBmaQp9CgoK \
IyBAZGVzY3JpcHRpb24gbG9hZCBjb2xvciB0aGVtZQojIEBub2FyZ3MKIyBAZW52IEJBU0hfRlJB \
TUVXT1JLX1RIRU1FIFN0cmluZyB0aGVtZSB0byB1c2UKIyBAZW52IExPQURfVEhFTUUgaW50IDAg \
dG8gYXZvaWQgbG9hZGluZyB0aGVtZQojIEBleGl0Y29kZSAwIGFsd2F5cyBzdWNjZXNzZnVsClVJ \
OjpyZXF1aXJlVGhlbWUoKSB7CiAgZXhwb3J0IFJFUVVJUkVfRlVOQ1RJT05fVUlfUkVRVUlSRV9U \
SEVNRV9MT0FERUQ9MQoKICBpZiBbWyAiJHtMT0FEX1RIRU1FOi0xfSIgPSAiMSIgXV07IHRoZW4K \
ICAgIFVJOjp0aGVtZSAiJHtCQVNIX0ZSQU1FV09SS19USEVNRS1kZWZhdWx0fSIKICBmaQp9CgoK \
IyBAZGVzY3JpcHRpb24gbG9hZCBjb2xvcnMgdGhlbWUgY29uc3RhbnRzCiMgQHdhcm5pbmcgaWYg \
dHR5IG5vdCBvcGVuZWQsIG5vQ29sb3IgdGhlbWUgd2lsbCBiZSBjaG9zZW4KIyBAYXJnICQxIHRo \
ZW1lOlN0cmluZyB0aGUgdGhlbWUgdG8gdXNlIChkZWZhdWx0LCBub0NvbG9yKQojIEBhcmcgJEAg \
YXJnczpTdHJpbmdbXQojIEBzZXQgX19FUlJPUl9DT0xPUiBTdHJpbmcgaW5kaWNhdGUgZXJyb3Ig \
c3RhdHVzCiMgQHNldCBfX0lORk9fQ09MT1IgU3RyaW5nIGluZGljYXRlIGluZm8gc3RhdHVzCiMg \
QHNldCBfX1NVQ0NFU1NfQ09MT1IgU3RyaW5nIGluZGljYXRlIHN1Y2Nlc3Mgc3RhdHVzCiMgQHNl \
dCBfX1dBUk5JTkdfQ09MT1IgU3RyaW5nIGluZGljYXRlIHdhcm5pbmcgc3RhdHVzCiMgQHNldCBf \
X1NLSVBQRURfQ09MT1IgU3RyaW5nIGluZGljYXRlIHNraXBwZWQgc3RhdHVzCiMgQHNldCBfX0RF \
QlVHX0NPTE9SIFN0cmluZyBpbmRpY2F0ZSBkZWJ1ZyBzdGF0dXMKIyBAc2V0IF9fSEVMUF9DT0xP \
UiBTdHJpbmcgaW5kaWNhdGUgaGVscCBzdGF0dXMKIyBAc2V0IF9fVEVTVF9DT0xPUiBTdHJpbmcg \
bm90IHVzZWQKIyBAc2V0IF9fVEVTVF9FUlJPUl9DT0xPUiBTdHJpbmcgbm90IHVzZWQKIyBAc2V0 \
IF9fSEVMUF9USVRMRV9DT0xPUiBTdHJpbmcgdXNlZCB0byBkaXNwbGF5IGhlbHAgdGl0bGUgaW4g \
aGVscCBzdHJpbmdzCiMgQHNldCBfX0hFTFBfT1BUSU9OX0NPTE9SIFN0cmluZyB1c2VkIHRvIGRp \
c3BsYXkgaGlnaGxpZ2h0IG9wdGlvbnMgaW4gaGVscCBzdHJpbmdzCiMKIyBAc2V0IF9fUkVTRVRf \
Q09MT1IgU3RyaW5nIHJlc2V0IGRlZmF1bHQgY29sb3IKIwojIEBzZXQgX19IRUxQX0VYQU1QTEUg \
U3RyaW5nIHRvIHJlbW92ZQojIEBzZXQgX19IRUxQX1RJVExFIFN0cmluZyB0byByZW1vdmUKIyBA \
c2V0IF9fSEVMUF9OT1JNQUwgU3RyaW5nIHRvIHJlbW92ZQojIHNoZWxsY2hlY2sgZGlzYWJsZT1T \
QzIwMzQKVUk6OnRoZW1lKCkgewogIGxvY2FsIHRoZW1lPSIkezEtZGVmYXVsdH0iCiAgaWYgW1sg \
ISAiJHt0aGVtZX0iID1+IC1mb3JjZSQgXV0gJiYgISBBc3NlcnQ6OnR0eTsgdGhlbgogICAgdGhl \
bWU9Im5vQ29sb3IiCiAgZmkKICBjYXNlICIke3RoZW1lfSIgaW4KICAgIGRlZmF1bHQgfCBkZWZh \
dWx0LWZvcmNlKQogICAgICB0aGVtZT0iZGVmYXVsdCIKICAgICAgOzsKICAgIG5vQ29sb3IpIDs7 \
CiAgICAqKQogICAgICBMb2c6OmZhdGFsICJpbnZhbGlkIHRoZW1lIHByb3ZpZGVkIgogICAgICA7 \
OwogIGVzYWMKICBpZiBbWyAiJHt0aGVtZX0iID0gImRlZmF1bHQiIF1dOyB0aGVuCiAgICBCQVNI \
X0ZSQU1FV09SS19USEVNRT0iZGVmYXVsdCIKICAgICMgY2hlY2sgY29sb3JzIGFwcGxpY2FibGUg \
aHR0cHM6Ly9taXNjLmZsb2dpc29mdC5jb20vYmFzaC90aXBfY29sb3JzX2FuZF9mb3JtYXR0aW5n \
CiAgICBfX0VSUk9SX0NPTE9SPSdcZVszMW0nICAgICAgICAgIyBSZWQKICAgIF9fSU5GT19DT0xP \
Uj0nXGVbNDRtJyAgICAgICAgICAjIHdoaXRlIG9uIGxpZ2h0Qmx1ZQogICAgX19TVUNDRVNTX0NP \
TE9SPSdcZVszMm0nICAgICAgICMgR3JlZW4KICAgIF9fV0FSTklOR19DT0xPUj0nXGVbMzNtJyAg \
ICAgICAjIFllbGxvdwogICAgX19TS0lQUEVEX0NPTE9SPSdcZVszM20nICAgICAgICMgWWVsbG93 \
CiAgICBfX0RFQlVHX0NPTE9SPSdcZVszN20nICAgICAgICAgIyBHcmF5CiAgICBfX0hFTFBfQ09M \
T1I9J1xlWzc7NDk7MzNtJyAgICAgIyBCbGFjayBvbiBHb2xkCiAgICBfX1RFU1RfQ09MT1I9J1xl \
WzEwMG0nICAgICAgICAgIyBMaWdodCBtYWdlbnRhCiAgICBfX1RFU1RfRVJST1JfQ09MT1I9J1xl \
WzQxbScgICAgIyB3aGl0ZSBvbiByZWQKICAgIF9fSEVMUF9USVRMRV9DT0xPUj0iXGVbMTszN20i \
ICAjIEJvbGQKICAgIF9fSEVMUF9PUFRJT05fQ09MT1I9IlxlWzE7MzRtIiAjIEJsdWUKICAgICMg \
SW50ZXJuYWw6IHJlc2V0IGNvbG9yCiAgICBfX1JFU0VUX0NPTE9SPSdcZVswbScgIyBSZXNldCBD \
b2xvcgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTU1LFNDMjAzNAogICAgX19IRUxQX0VY \
QU1QTEU9IiQoZWNobyAtZSAiXGVbMjs5N20iKSIKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVND \
MjE1NSxTQzIwMzQKICAgIF9fSEVMUF9USVRMRT0iJChlY2hvIC1lICJcZVsxOzM3bSIpIgogICAg \
IyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTU1LFNDMjAzNAogICAgX19IRUxQX05PUk1BTD0iJChl \
Y2hvIC1lICJcMDMzWzBtIikiCiAgZWxzZQogICAgQkFTSF9GUkFNRVdPUktfVEhFTUU9Im5vQ29s \
b3IiCiAgICAjIGNoZWNrIGNvbG9ycyBhcHBsaWNhYmxlIGh0dHBzOi8vbWlzYy5mbG9naXNvZnQu \
Y29tL2Jhc2gvdGlwX2NvbG9yc19hbmRfZm9ybWF0dGluZwogICAgX19FUlJPUl9DT0xPUj0nJwog \
ICAgX19JTkZPX0NPTE9SPScnCiAgICBfX1NVQ0NFU1NfQ09MT1I9JycKICAgIF9fV0FSTklOR19D \
T0xPUj0nJwogICAgX19TS0lQUEVEX0NPTE9SPScnCiAgICBfX0RFQlVHX0NPTE9SPScnCiAgICBf \
X0hFTFBfQ09MT1I9JycKICAgIF9fVEVTVF9DT0xPUj0nJwogICAgX19URVNUX0VSUk9SX0NPTE9S \
PScnCiAgICBfX0hFTFBfVElUTEVfQ09MT1I9JycKICAgIF9fSEVMUF9PUFRJT05fQ09MT1I9JycK \
ICAgICMgSW50ZXJuYWw6IHJlc2V0IGNvbG9yCiAgICBfX1JFU0VUX0NPTE9SPScnCiAgICBfX0hF \
TFBfRVhBTVBMRT0nJwogICAgX19IRUxQX1RJVExFPScnCiAgICBfX0hFTFBfTk9STUFMPScnCiAg \
ZmkKfQojIEZVTkNUSU9OUwoKb3B0aW9uSGVscENhbGxiYWNrKCkgewogICJzaW1wbGVDb21tYW5k \
SGVscCIKICBleGl0IDAKfQoKY29weXJpZ2h0Q2FsbGJhY2soKSB7CiAgIwogICMgc2hlbGxjaGVj \
ayBkaXNhYmxlPVNDMjE1NSxTQzIxNTQsU0MyMjUwCiAgZWNobyAiQ29weXJpZ2h0IChjKSAyMDI0 \
LW5vdyBGcmFuY29pcyBDaGFzdGFuZXQiCn0KCkVudjo6cmVxdWlyZUxvYWQoKSB7CiAgZXhwb3J0 \
IFJFUVVJUkVfRlVOQ1RJT05fRU5WX1JFUVVJUkVfTE9BRF9MT0FERUQ9MQp9CgpVSTo6cmVxdWly \
ZVRoZW1lKCkgewogIGV4cG9ydCBSRVFVSVJFX0ZVTkNUSU9OX1VJX1JFUVVJUkVfVEhFTUVfTE9B \
REVEPTEKfQoKTG9nOjpyZXF1aXJlTG9hZCgpIHsKICBleHBvcnQgUkVRVUlSRV9GVU5DVElPTl9M \
T0dfUkVRVUlSRV9MT0FEX0xPQURFRD0xCn0KCmRlZmF1bHRCZWZvcmVQYXJzZUNhbGxiYWNrKCkg \
ewogIEVudjo6cmVxdWlyZUxvYWQKICBVSTo6cmVxdWlyZVRoZW1lCiAgTG9nOjpyZXF1aXJlTG9h \
ZAp9CgpiZWZvcmVQYXJzZUNhbGxiYWNrKCkgewogIGRlZmF1bHRCZWZvcmVQYXJzZUNhbGxiYWNr \
Cn0KCmRlZmF1bHRBZnRlclBhcnNlQ2FsbGJhY2soKSB7CiAgOgp9CgphZnRlclBhcnNlQ2FsbGJh \
Y2soKSB7CiAgZGVmYXVsdEFmdGVyUGFyc2VDYWxsYmFjawp9CgojIHNoZWxsY2hlY2sgZGlzYWJs \
ZT1TQzIzMTcgIyBpZiBmdW5jdGlvbiBpcyBvdmVycmlkZGVuCm9wdGlvblZlcnNpb25DYWxsYmFj \
aygpIHsKICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIxNTQKICBlY2hvICIke1NDUklQVF9OQU1F \
fSB2ZXJzaW9uIDMuMCIKICBleGl0IDAKfQoKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tCiMgQ29tbWFuZCBzaW1wbGVDb21tYW5kCiMgLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIG9wdGlvbnMgdmFyaWFibGVzIGluaXRpYWxp \
emF0aW9uCmRlY2xhcmUgb3B0aW9uSGVscD0iMCIKZGVjbGFyZSBvcHRpb25WZXJzaW9uPSIwIgoj \
IGFyZ3VtZW50cyB2YXJpYWJsZXMgaW5pdGlhbGl6YXRpb24KZGVjbGFyZSBkaXJlY3Rvcnk9IiIK \
ZGVjbGFyZSAtYSBleHRlbnNpb25zPSgpCiMgQGRlc2NyaXB0aW9uIHBhcnNlIGNvbW1hbmQgb3B0 \
aW9ucyBhbmQgYXJndW1lbnRzIGZvciBzaW1wbGVDb21tYW5kCnNpbXBsZUNvbW1hbmRQYXJzZSgp \
IHsKICBMb2c6OmRpc3BsYXlEZWJ1ZyAiQ29tbWFuZCAke1NDUklQVF9OQU1FfSAtIHBhcnNlIGFy \
Z3VtZW50czogJHtCQVNIX0ZSQU1FV09SS19BUkdWWypdfSIKICBMb2c6OmRpc3BsYXlEZWJ1ZyAi \
Q29tbWFuZCAke1NDUklQVF9OQU1FfSAtIHBhcnNlIGZpbHRlcmVkIGFyZ3VtZW50czogJHtCQVNI \
X0ZSQU1FV09SS19BUkdWX0ZJTFRFUkVEWypdfSIKICBvcHRpb25IZWxwPSIwIgogIGxvY2FsIC1p \
IG9wdGlvbnNfcGFyc2Vfb3B0aW9uUGFyc2VkQ291bnRPcHRpb25IZWxwCiAgKChvcHRpb25zX3Bh \
cnNlX29wdGlvblBhcnNlZENvdW50T3B0aW9uSGVscCA9IDApKSB8fCB0cnVlCiAgb3B0aW9uVmVy \
c2lvbj0iMCIKICBsb2NhbCAtaSBvcHRpb25zX3BhcnNlX29wdGlvblBhcnNlZENvdW50T3B0aW9u \
VmVyc2lvbgogICgob3B0aW9uc19wYXJzZV9vcHRpb25QYXJzZWRDb3VudE9wdGlvblZlcnNpb24g \
PSAwKSkgfHwgdHJ1ZQoKICBkaXJlY3Rvcnk9IiIKCiAgbG9jYWwgLWkgb3B0aW9uc19wYXJzZV9h \
cmdQYXJzZWRDb3VudERpcmVjdG9yeQogICgob3B0aW9uc19wYXJzZV9hcmdQYXJzZWRDb3VudERp \
cmVjdG9yeSA9IDApKSB8fCB0cnVlCgogIGV4dGVuc2lvbnM9KCkKICBsb2NhbCAtaSBvcHRpb25z \
X3BhcnNlX2FyZ1BhcnNlZENvdW50RXh0ZW5zaW9ucwogICgob3B0aW9uc19wYXJzZV9hcmdQYXJz \
ZWRDb3VudEV4dGVuc2lvbnMgPSAwKSkgfHwgdHJ1ZQoKCiAgIyBzaGVsbGNoZWNrIGRpc2FibGU9 \
U0MyMDM0CiAgbG9jYWwgLWkgb3B0aW9uc19wYXJzZV9wYXJzZWRBcmdJbmRleD0wCiAgd2hpbGUg \
KCgkIyA+IDApKTsgZG8KICAgIGxvY2FsIG9wdGlvbnNfcGFyc2VfYXJnPSIkMSIKICAgIGxvY2Fs \
IGFyZ09wdERlZmF1bHRCZWhhdmlvcj0wCiAgICBjYXNlICIke29wdGlvbnNfcGFyc2VfYXJnfSIg \
aW4KICAgICAgIyBPcHRpb24gMS8yCiAgICAgICMgb3B0aW9uSGVscCBhbHRzIC0taGVscHwtaAog \
ICAgICAjIHR5cGU6IEJvb2xlYW4gbWluIDAgbWF4IDEKICAgICAgLS1oZWxwIHwgLWgpCiAgICAg \
ICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAgICAgb3B0aW9uSGVscD0iMSIKCiAg \
ICAgICAgaWYgKChvcHRpb25zX3BhcnNlX29wdGlvblBhcnNlZENvdW50T3B0aW9uSGVscCA+PSAx \
ICkpOyB0aGVuCiAgICAgICAgICBMb2c6OmRpc3BsYXlFcnJvciAiQ29tbWFuZCAke1NDUklQVF9O \
QU1FfSAtIE9wdGlvbiAke29wdGlvbnNfcGFyc2VfYXJnfSAtIE1heGltdW0gbnVtYmVyIG9mIG9w \
dGlvbiBvY2N1cnJlbmNlcyByZWFjaGVkKDEpIgogICAgICAgICAgcmV0dXJuIDEKICAgICAgICBm \
aQogICAgICAgICgoKytvcHRpb25zX3BhcnNlX29wdGlvblBhcnNlZENvdW50T3B0aW9uSGVscCkp \
CiAgICAgICAgb3B0aW9uSGVscENhbGxiYWNrICIke29wdGlvbnNfcGFyc2VfYXJnfSIgIiR7b3B0 \
aW9uSGVscH0iCgogICAgICAgIDs7CgogICAgICAjIE9wdGlvbiAyLzIKICAgICAgIyBvcHRpb25W \
ZXJzaW9uIGFsdHMgLS12ZXJzaW9uCiAgICAgICMgdHlwZTogQm9vbGVhbiBtaW4gMCBtYXggMQog \
ICAgICAtLXZlcnNpb24pCiAgICAgICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAg \
ICAgb3B0aW9uVmVyc2lvbj0iMSIKCiAgICAgICAgaWYgKChvcHRpb25zX3BhcnNlX29wdGlvblBh \
cnNlZENvdW50T3B0aW9uVmVyc2lvbiA+PSAxICkpOyB0aGVuCiAgICAgICAgICBMb2c6OmRpc3Bs \
YXlFcnJvciAiQ29tbWFuZCAke1NDUklQVF9OQU1FfSAtIE9wdGlvbiAke29wdGlvbnNfcGFyc2Vf \
YXJnfSAtIE1heGltdW0gbnVtYmVyIG9mIG9wdGlvbiBvY2N1cnJlbmNlcyByZWFjaGVkKDEpIgog \
ICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQogICAgICAgICgoKytvcHRpb25zX3BhcnNlX29w \
dGlvblBhcnNlZENvdW50T3B0aW9uVmVyc2lvbikpCiAgICAgICAgb3B0aW9uVmVyc2lvbkNhbGxi \
YWNrICIke29wdGlvbnNfcGFyc2VfYXJnfSIgIiR7b3B0aW9uVmVyc2lvbn0iCgogICAgICAgIDs7 \
CgogICAgICAtKikKICAgICAgICBpZiBbWyAiJHthcmdPcHREZWZhdWx0QmVoYXZpb3J9IiA9ICIw \
IiBdXTsgdGhlbgogICAgICAgICAgTG9nOjpkaXNwbGF5RXJyb3IgIkNvbW1hbmQgJHtTQ1JJUFRf \
TkFNRX0gLSBJbnZhbGlkIG9wdGlvbiAke29wdGlvbnNfcGFyc2VfYXJnfSIKICAgICAgICAgIHJl \
dHVybiAxCiAgICAgICAgZmkKICAgICAgICA7OwogICAgICAqKQogICAgICAgICgobWluUGFyc2Vk \
QXJnSW5kZXgwID0gMCkpIHx8IHRydWUKICAgICAgICAoKG1heFBhcnNlZEFyZ0luZGV4MCA9IDAp \
KSB8fCB0cnVlCiAgICAgICAgKChtaW5QYXJzZWRBcmdJbmRleDEgPSBtaW5QYXJzZWRBcmdJbmRl \
eDAgKyAxKSkgfHwgdHJ1ZQogICAgICAgICgobWF4UGFyc2VkQXJnSW5kZXgxID0gbWF4UGFyc2Vk \
QXJnSW5kZXgwICsgMSkpIHx8IHRydWUKICAgICAgICAoKG1pblBhcnNlZEFyZ0luZGV4MiA9IG1p \
blBhcnNlZEFyZ0luZGV4MSArIDEpKSB8fCB0cnVlCiAgICAgICAgKChtYXhQYXJzZWRBcmdJbmRl \
eDIgPSBtYXhQYXJzZWRBcmdJbmRleDEpKSB8fCB0cnVlCiAgICAgICAgKChpbmNyZW1lbnRBcmcg \
PSAxICkpCiAgICAgICAgaWYgKCgwKSk7IHRoZW4KICAgICAgICAgICMgVGVjaG5pY2FsIGlmIC0g \
bmV2ZXIgcmVhY2hlZAogICAgICAgICAgOgoKICAgICAgICAjIEFyZ3VtZW50IDEvMiAtIGRpcmVj \
dG9yeQogICAgICAgICMgQXJndW1lbnQgZGlyZWN0b3J5IG1pbiAxIG1heCAxCiAgICAgICAgZWxp \
ZiAoKCBvcHRpb25zX3BhcnNlX3BhcnNlZEFyZ0luZGV4ID49IG1pblBhcnNlZEFyZ0luZGV4MCAm \
JgogICAgICAgICAgb3B0aW9uc19wYXJzZV9wYXJzZWRBcmdJbmRleCA8IG1heFBhcnNlZEFyZ0lu \
ZGV4MSApKTsgdGhlbgogICAgICAgICAgaWYgKChvcHRpb25zX3BhcnNlX2FyZ1BhcnNlZENvdW50 \
RGlyZWN0b3J5ID49IDEgKSk7IHRoZW4KICAgICAgICAgICAgTG9nOjpkaXNwbGF5RXJyb3IgIkNv \
bW1hbmQgJHtTQ1JJUFRfTkFNRX0gLSBBcmd1bWVudCBkaXJlY3RvcnkgLSBNYXhpbXVtIG51bWJl \
ciBvZiBhcmd1bWVudCBvY2N1cnJlbmNlcyByZWFjaGVkKDEpIgogICAgICAgICAgICByZXR1cm4g \
MQogICAgICAgICAgZmkKICAgICAgICAgICgoKytvcHRpb25zX3BhcnNlX2FyZ1BhcnNlZENvdW50 \
RGlyZWN0b3J5KSkKICAgICAgICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgICAg \
ICAgZGlyZWN0b3J5PSIke29wdGlvbnNfcGFyc2VfYXJnfSIKCgogICAgICAgICMgQXJndW1lbnQg \
Mi8yIC0gZXh0ZW5zaW9ucwogICAgICAgICMgQXJndW1lbnQgZXh0ZW5zaW9ucyBtaW4gMSBtYXgg \
LTEKICAgICAgICBlbGlmICgoIG9wdGlvbnNfcGFyc2VfcGFyc2VkQXJnSW5kZXggPj0gbWluUGFy \
c2VkQXJnSW5kZXgxICkpOyB0aGVuCiAgICAgICAgICAoKCsrb3B0aW9uc19wYXJzZV9hcmdQYXJz \
ZWRDb3VudEV4dGVuc2lvbnMpKQogICAgICAgICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0 \
CiAgICAgICAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgICAgICAgIGV4dGVuc2lv \
bnMrPSgiJHtvcHRpb25zX3BhcnNlX2FyZ30iKQoKCiAgICAgICAgIyBlbHNlIHRvbyBtdWNoIGFy \
Z3MKICAgICAgICBlbHNlCgoKICAgICAgICAgIGlmIFtbICIke2FyZ09wdERlZmF1bHRCZWhhdmlv \
cn0iID0gIjAiIF1dOyB0aGVuCiAgICAgICAgICAgICMgdG9vIG11Y2ggYXJncyBhbmQgbm8gdW5r \
bm93bkFyZ3VtZW50Q2FsbGJhY2tzIGNvbmZpZ3VyZWQKICAgICAgICAgICAgTG9nOjpkaXNwbGF5 \
RXJyb3IgIkNvbW1hbmQgJHtTQ1JJUFRfTkFNRX0gLSBBcmd1bWVudCAtIHRvbyBtdWNoIGFyZ3Vt \
ZW50cyBwcm92aWRlZDogJCoiCiAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgICBmaQoKICAg \
ICAgICBmaQogICAgICAgIGlmICgoaW5jcmVtZW50QXJnID09IDEpKTsgdGhlbgogICAgICAgICAg \
KCgrK29wdGlvbnNfcGFyc2VfcGFyc2VkQXJnSW5kZXgpKQogICAgICAgIGZpCiAgICAgICAgOzsK \
ICAgIGVzYWMKICAgIHNoaWZ0IHx8IHRydWUKICBkb25lCgoKICBpZiAoKG9wdGlvbnNfcGFyc2Vf \
YXJnUGFyc2VkQ291bnREaXJlY3RvcnkgPCAxICkpOyB0aGVuCiAgICBMb2c6OmRpc3BsYXlFcnJv \
ciAiQ29tbWFuZCAke1NDUklQVF9OQU1FfSAtIEFyZ3VtZW50ICdkaXJlY3RvcnknIHNob3VsZCBi \
ZSBwcm92aWRlZCBhdCBsZWFzdCAxIHRpbWUocykiCiAgICByZXR1cm4gMQogIGZpCgogIGlmICgo \
b3B0aW9uc19wYXJzZV9hcmdQYXJzZWRDb3VudEV4dGVuc2lvbnMgPCAxICkpOyB0aGVuCiAgICBM \
b2c6OmRpc3BsYXlFcnJvciAiQ29tbWFuZCAke1NDUklQVF9OQU1FfSAtIEFyZ3VtZW50ICdleHRl \
bnNpb25zJyBzaG91bGQgYmUgcHJvdmlkZWQgYXQgbGVhc3QgMSB0aW1lKHMpIgogICAgcmV0dXJu \
IDEKICBmaSB8fCByZXR1cm4gJD8KCn0KCiMgQGRlc2NyaXB0aW9uIGRpc3BsYXkgY29tbWFuZCBv \
cHRpb25zIGFuZCBhcmd1bWVudHMgaGVscCBmb3Igc2ltcGxlQ29tbWFuZApzaW1wbGVDb21tYW5k \
SGVscCgpIHsKICBlY2hvIC1lICIke19fSEVMUF9USVRMRV9DT0xPUn1TWU5PUFNJUzoke19fUkVT \
RVRfQ09MT1J9IgogIEFycmF5Ojp3cmFwMiAnICcgNzYgNCAiICAgICIgImFsbG93cyB0byBsb2Fk \
IHNldmVyYWwgY29uZmlnIGZpbGVzIGF0IG9uY2UiCiAgZWNobwogIGVjaG8KCiAgIyAtLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAjIHVzYWdlIHNlY3Rpb24KICAj \
IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIEFycmF5Ojp3cmFw \
MiAiICIgODAgMiAiJHtfX0hFTFBfVElUTEVfQ09MT1J9VVNBR0U6JHtfX1JFU0VUX0NPTE9SfSIg \
InNpbXBsZUNvbW1hbmQgW09QVElPTlNdIFtBUkdVTUVOVFNdIgogIGVjaG8KICAjIC0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgdXNhZ2Uvb3B0aW9ucyBzZWN0 \
aW9uCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICBvcHRp \
b25zQWx0TGlzdD0oIlstLWhlbHB8LWhdIiAiWy0tdmVyc2lvbl0iCiAgKQogIEFycmF5Ojp3cmFw \
MiAiICIgODAgMiAiJHtfX0hFTFBfVElUTEVfQ09MT1J9VVNBR0U6JHtfX1JFU0VUX0NPTE9SfSIg \
XAogICAgInNpbXBsZUNvbW1hbmQiICIke29wdGlvbnNBbHRMaXN0W0BdfSIKICBlY2hvCgogICMg \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgIyB1c2FnZS9hcmd1 \
bWVudHMgc2VjdGlvbgogICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tCiAgZWNobwogIGVjaG8gLWUgIiR7X19IRUxQX1RJVExFX0NPTE9SfUFSR1VNRU5UUzoke19f \
UkVTRVRfQ09MT1J9IgoKICBBcnJheTo6d3JhcDIgIiAiIDgwIDIgIiAgJHtfX0hFTFBfT1BUSU9O \
X0NPTE9SfWRpcmVjdG9yeSR7X19IRUxQX05PUk1BTH0ge3NpbmdsZX0gKG1hbmRhdG9yeSkiCiAg \
QXJyYXk6OndyYXAyICcgJyA3NiA0ICIgICAgIiAiZGlyZWN0b3J5IGluIHdoaWNoIGZpbGVzIHRv \
IGxvYWQgd2lsbCBiZSBzZWFyY2hlZCIKICBlY2hvCgoKICBBcnJheTo6d3JhcDIgIiAiIDgwIDIg \
IiAgJHtfX0hFTFBfT1BUSU9OX0NPTE9SfWV4dGVuc2lvbnMke19fSEVMUF9OT1JNQUx9IHtsaXN0 \
fSAoYXQgbGVhc3QgMSB0aW1lcykiCiAgQXJyYXk6OndyYXAyICcgJyA3NiA0ICIgICAgIiAibGlz \
dCBvZiBmaWxlIGV4dGVuc2lvbiBhbGxvd2VkIHRvIGJlIGxvYWRlZCIKICBlY2hvCgoKICAjIC0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgb3B0aW9ucyBzZWN0 \
aW9uCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICBlY2hv \
CiAgZWNobyAtZSAiJHtfX0hFTFBfVElUTEVfQ09MT1J9R0xPQkFMIE9QVElPTlM6JHtfX1JFU0VU \
X0NPTE9SfSIKICBlY2hvIC1lICIgICR7X19IRUxQX09QVElPTl9DT0xPUn0tLWhlbHAke19fSEVM \
UF9OT1JNQUx9LCAke19fSEVMUF9PUFRJT05fQ09MT1J9LWgke19fSEVMUF9OT1JNQUx9IHtzaW5n \
bGV9IgogIEFycmF5Ojp3cmFwMiAnICcgNzYgNCAiICAgICIgIkRpc3BsYXlzIHRoaXMgY29tbWFu \
ZCBoZWxwIgogIGVjaG8KCgogIGVjaG8gLWUgIiAgJHtfX0hFTFBfT1BUSU9OX0NPTE9SfS0tdmVy \
c2lvbiR7X19IRUxQX05PUk1BTH0ge3NpbmdsZX0iCiAgQXJyYXk6OndyYXAyICcgJyA3NiA0ICIg \
ICAgIiAiUHJpbnQgdmVyc2lvbiBpbmZvcm1hdGlvbiBhbmQgcXVpdC4iCiAgZWNobwoKICAjIC0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgbG9uZ0Rlc2NyaXB0 \
aW9uIHNlY3Rpb24KICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LQogIGVjaG8KICBlY2hvCiAgZWNobyAtZSAiJHtfX0hFTFBfVElUTEVfQ09MT1J9REVTQ1JJUFRJ \
T046JHtfX1JFU0VUX0NPTE9SfSIKICBkZWNsYXJlIC1hIHNpbXBsZUNvbW1hbmRMb25nRGVzY3Jp \
cHRpb249KAogICJ1c2VmdWwgZm9yIGJhc2ggYW5kIHpzaCBjb25maWd1cmF0aW9uIGxvYWRpbmci \
CiAgKQogIEFycmF5Ojp3cmFwMiAnICcgNzYgMCAiJHtzaW1wbGVDb21tYW5kTG9uZ0Rlc2NyaXB0 \
aW9uW0BdfSIKICBlY2hvCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0KICAjIHZlcnNpb24gc2VjdGlvbgogICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tCiAgZWNobwogIGVjaG8gLW4gLWUgIiR7X19IRUxQX1RJVExFX0NPTE9S \
fVZFUlNJT046ICR7X19SRVNFVF9DT0xPUn0iCiAgZWNobyAiMy4wIgogICMgLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgIyBhdXRob3Igc2VjdGlvbgogICMgLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgZWNobwogIGVjaG8gLW4g \
LWUgIiR7X19IRUxQX1RJVExFX0NPTE9SfUFVVEhPUjogJHtfX1JFU0VUX0NPTE9SfSIKICBlY2hv \
ICJbRnJhbmNvaXMgQ2hhc3RhbmV0XShodHRwczovL2dpdGh1Yi5jb20vZmNoYXN0YW5ldCkiCiAg \
IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAjIHNvdXJjZUZp \
bGUgc2VjdGlvbgogICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
CiAgZWNobwogIGVjaG8gLW4gLWUgIiR7X19IRUxQX1RJVExFX0NPTE9SfVNPVVJDRSBGSUxFOiAk \
e19fUkVTRVRfQ09MT1J9IgogIGVjaG8gImh0dHBzOi8vZ2l0aHViLmNvbS9mY2hhc3RhbmV0L2Jh \
c2gtZGV2LWVudi90cmVlL21hc3Rlci9zcmMvX3Rvb2xzL2ZpbmRDb25maWdGaWxlcy1iaW5hcnku \
eWFtbCIKICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMg \
bGljZW5zZSBzZWN0aW9uCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0KICBlY2hvCiAgZWNobyAtbiAtZSAiJHtfX0hFTFBfVElUTEVfQ09MT1J9TElDRU5TRTog \
JHtfX1JFU0VUX0NPTE9SfSIKICBlY2hvICJNSVQgTGljZW5zZSIKICAjIC0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgY29weXJpZ2h0IHNlY3Rpb24KICAjIC0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIEFycmF5Ojp3cmFwMiAn \
ICcgNzYgMCAiJChjb3B5cmlnaHRDYWxsYmFjaykiCn0KCgpiZWZvcmVQYXJzZUNhbGxiYWNrCgpz \
aW1wbGVDb21tYW5kUGFyc2UgIiRAIgpNQUlOX0ZVTkNUSU9OX05BTUU9Im1haW4iCm1haW4oKSB7 \
CgpMaW51eDo6cmVxdWlyZVRhckNvbW1hbmQKQ29tcGlsZXI6OkVtYmVkOjpleHRyYWN0RmlsZUZy \
b21CYXNlNjQgXAogICIke1BFUlNJU1RFTlRfVE1QRElSOi0vdG1wfS80ZTdlODU1MmVkMmFkZDVi \
OTQ4NmI3NmVhYzE1MWI1NjI2MmViMjQxYzMwMjk1M2ZhZWM3MjE2ZDczMzA5ODRmL2ZpbmRDb25m \
aWdGaWxlc0F3ayIgXAogICJRa1ZIU1U0Z2V3b2dJRVpUUFNJdUlqc0tJQ0J6Y0d4cGRDaGxlSFFz \
SUdWNGRFRnljaXdnSW53aUtUc0tJQ0JtYjNJZ0tHa2dhVzRnIFwKWlhoMFFYSnlLU0I3Q2lBZ0lD \
QmxlSFJKYm1SbGVGdGxlSFJCY25KYmFWMWRJRDBnYVRzS0lDQjlDbjBLWm5WdVkzUnBiMjRnWW1G \
eiBcClpXNWhiV1ZYYVhSb2IzVjBSWGgwWlc1emFXOXVLR1pwYkdVcElIc0tJQ0J6ZFdJb0lpNHFM \
eUlzSUNJaUxDQm1hV3hsS1FvZ0lITjEgXApZaWd2WEM1YlhpNWRLeVF2TENBaUlpd2dabWxzWlNr \
S0lDQnlaWFIxY200Z1ptbHNaUXA5Q25zS0lDQnBaaUFvSkU1R0lHbHVJR1Y0IFwKZEVsdVpHVjRL \
U0I3Q2lBZ0lDQm1hV3hsUW1GelpUMWlZWE5sYm1GdFpWZHBkR2h2ZFhSRmVIUmxibk5wYjI0b0pE \
QXBDaUFnSUNCdyBcCmNtbHVkQ0JtYVd4bFFtRnpaU0FpWEhRaUlHVjRkRWx1WkdWNFd5Uk9SbDBn \
SWx4MElpQWtNRHNLSUNCOUNuMEsiIFwKICAiNjQ0IgoKZGVjbGFyZSAtZ3ggZW1iZWRfZmlsZV9m \
aW5kQ29uZmlnRmlsZXNBd2s9IiR7UEVSU0lTVEVOVF9UTVBESVI6LS90bXB9LzRlN2U4NTUyZWQy \
YWRkNWI5NDg2Yjc2ZWFjMTUxYjU2MjYyZWIyNDFjMzAyOTUzZmFlYzcyMTZkNzMzMDk4NGYvZmlu \
ZENvbmZpZ0ZpbGVzQXdrIgoKCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1NAppZiBbWyAhIC1k \
ICIke2RpcmVjdG9yeX0iIF1dOyB0aGVuCiAgcmV0dXJuIDEKZmkKZGVjbGFyZSAtYSBmaW5kQ21k \
PSgKICBmaW5kICIke2RpcmVjdG9yeX0iIC1leGVjdXRhYmxlIC10eXBlICdmLGwnICcoJwopCmZv \
ciBleHQgaW4gIiR7ZXh0ZW5zaW9uc1tAXX0iOyBkbwogIGZpbmRDbWQrPSgtbmFtZSBcKi4iJHtl \
eHR9IiAtbykKZG9uZQp1bnNldCAnZmluZENtZFstMV0nCmZpbmRDbWQrPSgnKScgLXByaW50ZiAn \
JXBcbicpCgojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIxNTQKIiR7ZmluZENtZFtAXX0iIDI+L2Rl \
di9udWxsIHwKICBhd2sgLXYgZXh0PSIkKHByaW50ZiAnJXN8JyAiJHtleHRlbnNpb25zW0BdfSIp \
IiAtZiAiJHtlbWJlZF9maWxlX2ZpbmRDb25maWdGaWxlc0F3a30iIHwKICBzb3J0IC10JCdcdCcg \
LWsxLDEgLWsyLDIgfCBjdXQgLWYzLQoKfQoKIyBpZiBmaWxlIGlzIHNvdXJjZWQgYXZvaWQgY2Fs \
bGluZyBtYWluIGZ1bmN0aW9uCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE3OApCQVNIX1NPVVJD \
RT0iLiQwIiAjIGNhbm5vdCBiZSBjaGFuZ2VkIGluIGJhc2gKIyBzaGVsbGNoZWNrIGRpc2FibGU9 \
U0MyMTI4CmlmIHRlc3QgIi4kMCIgPT0gIi4ke0JBU0hfU09VUkNFfSI7IHRoZW4KICBpZiBbWyAi \
JHtCQVNIX0ZSQU1FV09SS19RVUlFVF9NT0RFOi0wfSIgPSAiMSIgXV07IHRoZW4KICAgIG1haW4g \
IiRAIiAmPi9kZXYvbnVsbAogIGVsc2UKICAgIG1haW4gIiRAIgogIGZpCmZpCg==" \
  "755"

declare -gx embed_file_findConfigFiles="${PERSISTENT_TMPDIR:-/tmp}/7fe5c0d1777f0c477bf803efef4ff6eb14f759335959aff52901586e604d9c9d/findConfigFiles"

Linux::requireTarCommand
Compiler::Embed::extractFileFromBase64 \
  "${PERSISTENT_TMPDIR:-/tmp}/328a4f76d2a4954447c5f6e54137cf1cec5a0459a87a50ac89057816c1d6b9c1/fixWslDate" \
  "IyEvdXNyL2Jpbi9lbnYgYmFzaAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj \
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgR0VORVJBVEVEIEZS \
T00gaHR0cHM6Ly9naXRodWIuY29tL2ZjaGFzdGFuZXQvYmFzaC1kZXYtZW52L3RyZWUvbWFzdGVy \
L3NyYy9fdG9vbHMvZml4V3NsRGF0ZS1iaW5hcnkueWFtbAojIERPIE5PVCBFRElUIElUCiMgQGdl \
bmVyYXRlZAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj \
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjI4 \
OCxTQzIwMzQKCgoKIyBlbnN1cmUgdGhhdCBubyB1c2VyIGFsaWFzZXMgY291bGQgaW50ZXJmZXJl \
IHdpdGgKIyBjb21tYW5kcyB1c2VkIGluIHRoaXMgc2NyaXB0CnVuYWxpYXMgLWEgfHwgdHJ1ZQpz \
aG9wdCAtdSBleHBhbmRfYWxpYXNlcwoKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CigoZmFp \
bHVyZXMgPSAwKSkgfHwgdHJ1ZQoKIyBCYXNoIHdpbGwgcmVtZW1iZXIgJiByZXR1cm4gdGhlIGhp \
Z2hlc3QgZXhpdCBjb2RlIGluIGEgY2hhaW4gb2YgcGlwZXMuCiMgVGhpcyB3YXkgeW91IGNhbiBj \
YXRjaCB0aGUgZXJyb3IgaW5zaWRlIHBpcGVzLCBlLmcuIG15c3FsZHVtcCB8IGd6aXAKc2V0IC1v \
IHBpcGVmYWlsCnNldCAtbyBlcnJleGl0CgojIENvbW1hbmQgU3Vic3RpdHV0aW9uIGNhbiBpbmhl \
cml0IGVycmV4aXQgb3B0aW9uIHNpbmNlIGJhc2ggdjQuNApzaG9wdCAtcyBpbmhlcml0X2VycmV4 \
aXQgfHwgdHJ1ZQoKIyBpZiBzZXQsIGFuZCBqb2IgY29udHJvbCBpcyBub3QgYWN0aXZlLCB0aGUg \
c2hlbGwgcnVucyB0aGUgbGFzdCBjb21tYW5kCiMgb2YgYSBwaXBlbGluZSBub3QgZXhlY3V0ZWQg \
aW4gdGhlIGJhY2tncm91bmQgaW4gdGhlIGN1cnJlbnQgc2hlbGwKIyBlbnZpcm9ubWVudC4Kc2hv \
cHQgLXMgbGFzdHBpcGUKCiMgYSBsb2cgaXMgZ2VuZXJhdGVkIHdoZW4gYSBjb21tYW5kIGZhaWxz \
CnNldCAtbyBlcnJ0cmFjZQoKIyB1c2UgbnVsbGdsb2Igc28gdGhhdCAoZmlsZSoucGhwKSB3aWxs \
IHJldHVybiBhbiBlbXB0eSBhcnJheSBpZiBubyBmaWxlCiMgbWF0Y2hlcyB0aGUgd2lsZGNhcmQK \
c2hvcHQgLXMgbnVsbGdsb2IKCiMgZW5zdXJlIHJlZ2V4cCBhcmUgaW50ZXJwcmV0ZWQgd2l0aG91 \
dCBhY2NlbnR1YXRlZCBjaGFyYWN0ZXJzCmV4cG9ydCBMQ19BTEw9UE9TSVgKCmV4cG9ydCBURVJN \
PXh0ZXJtLTI1NmNvbG9yCgojIGF2b2lkIGludGVyYWN0aXZlIGluc3RhbGwKZXhwb3J0IERFQklB \
Tl9GUk9OVEVORD1ub25pbnRlcmFjdGl2ZQpleHBvcnQgREVCQ09ORl9OT05JTlRFUkFDVElWRV9T \
RUVOPXRydWUKCiMgc3RvcmUgY29tbWFuZCBhcmd1bWVudHMgZm9yIGxhdGVyIHVzYWdlCiMgc2hl \
bGxjaGVjayBkaXNhYmxlPVNDMjAzNApkZWNsYXJlIC1hIEJBU0hfRlJBTUVXT1JLX0FSR1Y9KCIk \
QCIpCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNApkZWNsYXJlIC1hIE9SSUdJTkFMX0JBU0hf \
RlJBTUVXT1JLX0FSR1Y9KCIkQCIpCgojIEBzZWUgaHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2Uu \
Y29tL2EvMzg2ODU2CiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjMxNwppbnRlcnJ1cHRNYW5hZ2Vt \
ZW50KCkgewogICMgcmVzdG9yZSBTSUdJTlQgaGFuZGxlcgogIHRyYXAgLSBJTlQKICAjIGVuc3Vy \
ZSB0aGF0IEN0cmwtQyBpcyB0cmFwcGVkIGJ5IHRoaXMgc2NyaXB0IGFuZCBub3QgYnkgc3ViIHBy \
b2Nlc3MKICAjIHJlcG9ydCB0byB0aGUgcGFyZW50IHRoYXQgd2UgaGF2ZSBpbmRlZWQgYmVlbiBp \
bnRlcnJ1cHRlZAogIGtpbGwgLXMgSU5UICIkJCIKfQp0cmFwIGludGVycnVwdE1hbmFnZW1lbnQg \
SU5UCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBU \
ZW1wIGRpciBtYW5hZ2VtZW50CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj \
IyMjIyMjIyMjIwoKS0VFUF9URU1QX0ZJTEVTPSIke0tFRVBfVEVNUF9GSUxFUzotMH0iCmV4cG9y \
dCBLRUVQX1RFTVBfRklMRVMKCiMgUEVSU0lTVEVOVF9UTVBESVIgaXMgbm90IGRlbGV0ZWQgYnkg \
dHJhcHMKUEVSU0lTVEVOVF9UTVBESVI9IiR7VE1QRElSOi0vdG1wfS9iYXNoLWZyYW1ld29yayIK \
ZXhwb3J0IFBFUlNJU1RFTlRfVE1QRElSCmlmIFtbICEgLWQgIiR7UEVSU0lTVEVOVF9UTVBESVJ9 \
IiBdXTsgdGhlbgogIG1rZGlyIC1wICIke1BFUlNJU1RFTlRfVE1QRElSfSIKZmkKCiMgc2hlbGxj \
aGVjayBkaXNhYmxlPVNDMjAzNApUTVBESVI9IiQobWt0ZW1wIC1kIC1wICIke1BFUlNJU1RFTlRf \
VE1QRElSOi0vdG1wfSIgLXQgYmFzaC1mcmFtZXdvcmstJCQtWFhYWFhYKSIKZXhwb3J0IFRNUERJ \
UgoKIyB0ZW1wIGRpciBjbGVhbmluZwojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIzMTcKY2xlYW5P \
bkV4aXQoKSB7CiAgbG9jYWwgcmM9JD8KICBpZiBbWyAiJHtLRUVQX1RFTVBfRklMRVM6LTB9IiA9 \
ICIxIiBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5SW5mbyAiS0VFUF9URU1QX0ZJTEVTPTEgdGVt \
cCBmaWxlcyBrZXB0IGhlcmUgJyR7VE1QRElSfSciCiAgZWxpZiBbWyAtbiAiJHtUTVBESVIreHh4 \
fSIgXV07IHRoZW4KICAgIExvZzo6ZGlzcGxheURlYnVnICJLRUVQX1RFTVBfRklMRVM9MCByZW1v \
dmluZyB0ZW1wIGZpbGVzICcke1RNUERJUn0nIgogICAgcm0gLVJmICIke1RNUERJUjotL3RtcC9m \
YWtlfSIgPi9kZXYvbnVsbCAyPiYxCiAgZmkKICBleGl0ICIke3JjfSIKfQp0cmFwIGNsZWFuT25F \
eGl0IEVYSVQgSFVQIFFVSVQgQUJSVCBURVJNCgoKU0NSSVBUX05BTUU9JHswIyMqL30KUkVBTF9T \
Q1JJUFRfRklMRT0iJChyZWFkbGluayAtZSAiJChyZWFscGF0aCAiJHtCQVNIX1NPVVJDRVswXX0i \
KSIpIgppZiBbWyAtbiAiJHtFTUJFRF9DVVJSRU5UX0RJUn0iIF1dOyB0aGVuCiAgQ1VSUkVOVF9E \
SVI9IiR7RU1CRURfQ1VSUkVOVF9ESVJ9IgplbHNlCiAgQ1VSUkVOVF9ESVI9IiR7UkVBTF9TQ1JJ \
UFRfRklMRSUvKn0iCmZpCkZSQU1FV09SS19ST09UX0RJUj0iJChjZCAiJHtDVVJSRU5UX0RJUn0v \
LiIgJiYgcHdkIC1QKSIKRlJBTUVXT1JLX1NSQ19ESVI9IiR7RlJBTUVXT1JLX1JPT1RfRElSfS9z \
cmMiCkZSQU1FV09SS19CSU5fRElSPSIke0ZSQU1FV09SS19ST09UX0RJUn0vYmluIgpGUkFNRVdP \
UktfVkVORE9SX0RJUj0iJHtGUkFNRVdPUktfUk9PVF9ESVJ9L3ZlbmRvciIKRlJBTUVXT1JLX1ZF \
TkRPUl9CSU5fRElSPSIke0ZSQU1FV09SS19ST09UX0RJUn0vdmVuZG9yL2JpbiIKCiMgQGRlc2Ny \
aXB0aW9uIExvZyBuYW1lc3BhY2UgcHJvdmlkZXMgMiBraW5kIG9mIGZ1bmN0aW9ucwojIC0gTG9n \
OjpkaXNwbGF5KiBhbGxvd3MgdG8gZGlzcGxheSBnaXZlbiBtZXNzYWdlIHdpdGgKIyAgIGdpdmVu \
IGRpc3BsYXkgbGV2ZWwKIyAtIExvZzo6bG9nKiBhbGxvd3MgdG8gbG9nIGdpdmVuIG1lc3NhZ2Ug \
d2l0aAojICAgZ2l2ZW4gbG9nIGxldmVsCiMgTG9nOjpkaXNwbGF5KiBmdW5jdGlvbnMgYXV0b21h \
dGljYWxseSBsb2cgdGhlIG1lc3NhZ2UgdG9vCiMgQHNlZSBFbnY6OnJlcXVpcmVMb2FkIHRvIGxv \
YWQgdGhlIGRpc3BsYXkgYW5kIGxvZyBsZXZlbCBmcm9tIC5lbnYgZmlsZQoKIyBAZGVzY3JpcHRp \
b24gbG9nIGxldmVsIG9mZgpleHBvcnQgX19MRVZFTF9PRkY9MAojIEBkZXNjcmlwdGlvbiBsb2cg \
bGV2ZWwgZXJyb3IKZXhwb3J0IF9fTEVWRUxfRVJST1I9MQojIEBkZXNjcmlwdGlvbiBsb2cgbGV2 \
ZWwgd2FybmluZwpleHBvcnQgX19MRVZFTF9XQVJOSU5HPTIKIyBAZGVzY3JpcHRpb24gbG9nIGxl \
dmVsIGluZm8KZXhwb3J0IF9fTEVWRUxfSU5GTz0zCiMgQGRlc2NyaXB0aW9uIGxvZyBsZXZlbCBz \
dWNjZXNzCmV4cG9ydCBfX0xFVkVMX1NVQ0NFU1M9MwojIEBkZXNjcmlwdGlvbiBsb2cgbGV2ZWwg \
ZGVidWcKZXhwb3J0IF9fTEVWRUxfREVCVUc9NAoKIyBAZGVzY3JpcHRpb24gdmVyYm9zZSBsZXZl \
bCBvZmYKZXhwb3J0IF9fVkVSQk9TRV9MRVZFTF9PRkY9MAojIEBkZXNjcmlwdGlvbiB2ZXJib3Nl \
IGxldmVsIGluZm8KZXhwb3J0IF9fVkVSQk9TRV9MRVZFTF9JTkZPPTEKIyBAZGVzY3JpcHRpb24g \
dmVyYm9zZSBsZXZlbCBpbmZvCmV4cG9ydCBfX1ZFUkJPU0VfTEVWRUxfREVCVUc9MgojIEBkZXNj \
cmlwdGlvbiB2ZXJib3NlIGxldmVsIGluZm8KZXhwb3J0IF9fVkVSQk9TRV9MRVZFTF9UUkFDRT0z \
CgoKIyBAZGVzY3JpcHRpb24gY2hlY2sgaWYgYW4gZWxlbWVudCBpcyBjb250YWluZWQgaW4gYW4g \
YXJyYXkKIwojIEBhcmcgJDEgbmVlZGxlOlN0cmluZwojIEBhcmcgJEAgYXJyYXk6U3RyaW5nW10K \
IyBAZXhpdGNvZGUgMCBpZiBmb3VuZAojIEBleGl0Y29kZSAxIG90aGVyd2lzZQojIEBleGFtcGxl \
CiMgICBBcnJheTo6Y29udGFpbnMgIiR7bGliUGF0aH0iICIke19fQkFTSF9GUkFNRVdPUktfSU1Q \
T1JURURfRklMRVNbQF19IgpBcnJheTo6Y29udGFpbnMoKSB7CiAgbG9jYWwgZWxlbWVudAogIGZv \
ciBlbGVtZW50IGluICIke0A6Mn0iOyBkbwogICAgW1sgIiR7ZWxlbWVudH0iID0gIiQxIiBdXSAm \
JiByZXR1cm4gMAogIGRvbmUKICByZXR1cm4gMQp9CgoKIyBAZGVzY3JpcHRpb24gY29uY2F0ZW5h \
dGUgZWFjaCBlbGVtZW50IG9mIGFuIGFycmF5IHdpdGggYSBzZXBhcmF0b3IKIyBidXQgd3JhcHBp \
bmcgdGV4dCB3aGVuIGxpbmUgbGVuZ3RoIGlzIG1vcmUgdGhhbiBwcm92aWRlZCBhcmd1bWVudAoj \
IFRoZSBhbGdvcml0aG0gd2lsbCB0cnkgbm90IHRvIGN1dCB0aGUgYXJyYXkgZWxlbWVudCBpZiBp \
dCBjYW4uCiMgLSBpZiBhbiBhcmcgY2FuIGJlIHBsYWNlZCBvbiBjdXJyZW50IGxpbmUgaXQgd2ls \
bCBiZSwKIyAgIG90aGVyd2lzZSBjdXJyZW50IGxpbmUgaXMgcHJpbnRlZCBhbmQgYXJnIGlzIGFk \
ZGVkIHRvIHRoZSBuZXcKIyAgIGN1cnJlbnQgbGluZQojIC0gRW1wdHkgYXJnIGlzIGludGVycHJl \
dGVkIGFzIGEgbmV3IGxpbmUuCiMgLSBBZGQgXHIgdG8gYXJnIGluIG9yZGVyIHRvIGZvcmNlIGJy \
ZWFrIGxpbmUgYW5kIGF2b2lkIGZvbGxvd2luZwojICAgYXJnIHRvIGJlIGNvbmNhdGVuYXRlZCB3 \
aXRoIGN1cnJlbnQgYXJnLgojCiMgQGFyZyAkMSBnbHVlOlN0cmluZwojIEBhcmcgJDIgbWF4TGlu \
ZUxlbmd0aDppbnQKIyBAYXJnICQzIGluZGVudE5leHRMaW5lOmludAojIEBhcmcgJEAgYXJyYXk6 \
U3RyaW5nW10KQXJyYXk6OndyYXAyKCkgewogIGxvY2FsIGdsdWU9IiR7MS19IgogIGxvY2FsIC1p \
IGdsdWVMZW5ndGg9IiR7I2dsdWV9IgogIHNoaWZ0IHx8IHRydWUKICBsb2NhbCAtaSBtYXhMaW5l \
TGVuZ3RoPSQxCiAgc2hpZnQgfHwgdHJ1ZQogIGxvY2FsIC1pIGluZGVudE5leHRMaW5lPSQxCiAg \
c2hpZnQgfHwgdHJ1ZQogIGxvY2FsIGluZGVudFN0cj0iIgogIGlmICgoaW5kZW50TmV4dExpbmUg \
PiAwKSk7IHRoZW4KICAgIGluZGVudFN0cj0iJChoZWFkIC1jICIke2luZGVudE5leHRMaW5lfSIg \
PC9kZXYvemVybyB8IHRyICdcMCcgIiAiKSIKICBmaQogIGlmICgoJCMgPT0gMCkpOyB0aGVuCiAg \
ICByZXR1cm4gMAogIGZpCgogIHByaW50Q3VycmVudExpbmUoKSB7CiAgICBpZiAoKGlzTmV3bGlu \
ZSA9PSAwKSkgfHwgKChwcmV2aW91c0xpbmVFbXB0eSA9PSAxKSk7IHRoZW4KICAgICAgZWNobwog \
ICAgZmkKICAgICgoaXNOZXdsaW5lID0gMSkpCiAgICBlY2hvIC1lbiAiJHtpbmRlbnRTdHJ9Igog \
ICAgKChjdXJyZW50TGluZUxlbmd0aCA9IGluZGVudE5leHRMaW5lKSkgfHwgdHJ1ZQogIH0KICBh \
cHBlbmRUb0N1cnJlbnRMaW5lKCkgewogICAgbG9jYWwgdGV4dD0iJDEiCiAgICBsb2NhbCAtaSBs \
ZW5ndGg9JDIKICAgICgoY3VycmVudExpbmVMZW5ndGggKz0gbGVuZ3RoKSkgfHwgdHJ1ZQogICAg \
KChpc05ld2xpbmUgPSAwKSkgfHwgdHJ1ZQogICAgaWYgW1sgIiR7dGV4dDogLTF9IiA9ICQnXHIn \
IF1dOyB0aGVuCiAgICAgIHRleHQ9IiR7dGV4dDowOi0xfSIKICAgICAgZWNobyAtZW4gIiR7dGV4 \
dCUlKyhbWzpibGFuazpdXSl9IgogICAgICBwcmludEN1cnJlbnRMaW5lCiAgICBlbHNlCiAgICAg \
IGVjaG8gLWVuICIke3RleHQlJSsoW1s6Ymxhbms6XV0pfSIKICAgIGZpCiAgfQoKICAoCiAgICBs \
b2NhbCBjdXJyZW50TGluZQogICAgbG9jYWwgLWkgY3VycmVudExpbmVMZW5ndGg9MCBpc05ld2xp \
bmU9MSBhcmdMZW5ndGg9MAogICAgbG9jYWwgLWEgYWRkaXRpb25hbExpbmVzCiAgICBsb2NhbCAt \
aSBwcmV2aW91c0xpbmVFbXB0eT0wCiAgICBsb2NhbCBhcmc9IiIKCiAgICB3aGlsZSAoKCQjID4g \
MCkpOyBkbwogICAgICBhcmc9IiQxIgogICAgICBzaGlmdCB8fCB0cnVlCgogICAgICAjIHJlcGxh \
Y2UgdGFiIGJ5IDIgc3BhY2VzCiAgICAgIGFyZz0iJHthcmcvLyQnXHQnLyAgfSIKICAgICAgIyBy \
ZW1vdmUgdHJhaWxpbmcgc3BhY2VzCiAgICAgIGFyZz0iJHthcmclW1s6Ymxhbms6XV19IgogICAg \
ICBpZiBbWyAiJHthcmd9IiA9ICQnXG4nIHx8IC16ICIke2FyZ30iIF1dOyB0aGVuCiAgICAgICAg \
cHJpbnRDdXJyZW50TGluZQogICAgICAgICgocHJldmlvdXNMaW5lRW1wdHkgPSAxKSkKICAgICAg \
ICBjb250aW51ZQogICAgICBlbHNlCiAgICAgICAgaWYgKChwcmV2aW91c0xpbmVFbXB0eSA9PSAx \
KSk7IHRoZW4KICAgICAgICAgIHByaW50Q3VycmVudExpbmUKICAgICAgICBmaQogICAgICAgICgo \
cHJldmlvdXNMaW5lRW1wdHkgPSAwKSkgfHwgdHJ1ZQogICAgICBmaQogICAgICAjIGNvbnZlcnQg \
ZW9sIHRvIGFyZ3MKICAgICAgbWFwZmlsZSAtdCBhZGRpdGlvbmFsTGluZXMgPDw8IiR7YXJnfSIK \
ICAgICAgaWYgKCgkeyNhZGRpdGlvbmFsTGluZXNbQF19ID4gMSkpOyB0aGVuCiAgICAgICAgc2V0 \
IC0tICIke2FkZGl0aW9uYWxMaW5lc1tAXX0iICIkQCIKICAgICAgICBjb250aW51ZQogICAgICBm \
aQoKICAgICAgKChhcmdMZW5ndGggPSAkeyNhcmd9KSkgfHwgdHJ1ZQoKICAgICAgIyBlbXB0eSBh \
cmcKICAgICAgaWYgKChhcmdMZW5ndGggPT0gMCkpOyB0aGVuCiAgICAgICAgaWYgKChpc05ld2xp \
bmUgPT0gMCkpOyB0aGVuCiAgICAgICAgICAjIGlzTmV3bGluZSA9IDAgbWVhbnMgY3VycmVudExp \
bmUgaXMgbm90IGVtcHR5CiAgICAgICAgICBwcmludEN1cnJlbnRMaW5lCiAgICAgICAgZmkKICAg \
ICAgICBjb250aW51ZQogICAgICBmaQoKICAgICAgaWYgKChpc05ld2xpbmUgPT0gMCkpOyB0aGVu \
CiAgICAgICAgZ2x1ZUxlbmd0aD0iJHsjZ2x1ZX0iCiAgICAgIGVsc2UKICAgICAgICBnbHVlTGVu \
Z3RoPSIwIgogICAgICBmaQogICAgICBpZiAoKGN1cnJlbnRMaW5lTGVuZ3RoICsgYXJnTGVuZ3Ro \
ICsgZ2x1ZUxlbmd0aCA+IG1heExpbmVMZW5ndGgpKTsgdGhlbgogICAgICAgIGlmICgoYXJnTGVu \
Z3RoICsgZ2x1ZUxlbmd0aCA+IG1heExpbmVMZW5ndGgpKTsgdGhlbgogICAgICAgICAgIyBhcmcg \
aXMgdG9vIGxvbmcgdG8gZXZlbiBmaXQgb24gb25lIGxpbmUKICAgICAgICAgICMgd2UgaGF2ZSB0 \
byBzcGxpdCB0aGUgYXJnIG9uIGN1cnJlbnQgYW5kIG5leHQgbGluZQogICAgICAgICAgbG9jYWwg \
LWkgcmVtYWluaW5nTGluZUxlbmd0aAogICAgICAgICAgKChyZW1haW5pbmdMaW5lTGVuZ3RoID0g \
bWF4TGluZUxlbmd0aCAtIGN1cnJlbnRMaW5lTGVuZ3RoIC0gZ2x1ZUxlbmd0aCkpCiAgICAgICAg \
ICBhcHBlbmRUb0N1cnJlbnRMaW5lICIke2dsdWU6MDoke2dsdWVMZW5ndGh9fSR7YXJnOjA6JHty \
ZW1haW5pbmdMaW5lTGVuZ3RofX0iICIkKChnbHVlTGVuZ3RoICsgcmVtYWluaW5nTGluZUxlbmd0 \
aCkpIgogICAgICAgICAgcHJpbnRDdXJyZW50TGluZQogICAgICAgICAgYXJnPSIke2FyZzoke3Jl \
bWFpbmluZ0xpbmVMZW5ndGh9fSIKICAgICAgICAgICMgcmVtb3ZlIGxlYWRpbmcgc3BhY2VzCiAg \
ICAgICAgICBhcmc9IiR7YXJnIyNbWzpibGFuazpdXX0iCgogICAgICAgICAgc2V0IC0tICIke2Fy \
Z30iICIkQCIKICAgICAgICBlbHNlCiAgICAgICAgICAjIHRoZSBhcmcgY2FuIGZpdCBvbiBuZXh0 \
IGxpbmUKICAgICAgICAgIHByaW50Q3VycmVudExpbmUKICAgICAgICAgIGFwcGVuZFRvQ3VycmVu \
dExpbmUgIiR7YXJnfSIgIiR7YXJnTGVuZ3RofSIKICAgICAgICBmaQogICAgICBlbHNlCiAgICAg \
ICAgYXBwZW5kVG9DdXJyZW50TGluZSAiJHtnbHVlOjA6JHtnbHVlTGVuZ3RofX0ke2FyZ30iICIk \
KChnbHVlTGVuZ3RoICsgYXJnTGVuZ3RoKSkiCiAgICAgIGZpCiAgICBkb25lCiAgICBpZiBbWyAi \
JHtjdXJyZW50TGluZX0iICE9ICIiIF1dICYmIFtbICEgIiR7Y3VycmVudExpbmV9IiA9fiBeW1wg \
XHRdKyQgXV07IHRoZW4KICAgICAgcHJpbnRDdXJyZW50TGluZQogICAgZmkKICApIHwgc2VkIC1F \
IC1lICdzL1tbOmJsYW5rOl1dKyQvLycKfQoKCiMgQGRlc2NyaXB0aW9uIGNoZWNrIGlmIHR0eSAo \
aW50ZXJhY3RpdmUgbW9kZSkgaXMgYWN0aXZlCiMgQG5vYXJncwojIEBleGl0Y29kZSAxIGlmIHR0 \
eSBub3QgYWN0aXZlCiMgQGVudiBOT05fSU5URVJBQ1RJVkUgaWYgMSBjb25zaWRlciBhcyBub3Qg \
aW50ZXJhY3RpdmUgZXZlbiBpZiBlbnZpcm9ubWVudCBpcyBpbnRlcmFjdGl2ZQojIEBlbnYgSU5U \
RVJBQ1RJVkUgaWYgMSBjb25zaWRlciBhcyBpbnRlcmFjdGl2ZSBldmVuIGlmIGVudmlyb25tZW50 \
IGlzIG5vdCBpbnRlcmFjdGl2ZQpBc3NlcnQ6OnR0eSgpIHsKICBpZiBbWyAiJHtOT05fSU5URVJB \
Q1RJVkU6LTB9IiA9ICIxIiBdXTsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIGlmIFtbICIke0lO \
VEVSQUNUSVZFOi0wfSIgPSAiMSIgXV07IHRoZW4KICAgIHJldHVybiAwCiAgZmkKICB0dHkgLXMK \
fQoKCiMgQGRlc2NyaXB0aW9uIExvYWQgdGhlIG5lYXJlc3QgY29uZmlnIGZpbGUKIyBpbiBuZXh0 \
IGV4YW1wbGUgd2lsbCBzZWFyY2ggZmlyc3QgLmZyYW1ld29yay1jb25maWcgZmlsZSBpbiAic3Jj \
RGlyMSIKIyB0aGVuIGlmIG5vdCBmb3VuZCB3aWxsIGdvIGluIHVwIGRpcmVjdG9yaWVzIHVudGls \
IC8KIyB0aGVuIHdpbGwgc2VhcmNoIGluICJzcmNEaXIyIgojIHRoZW4gaWYgbm90IGZvdW5kIHdp \
bGwgZ28gaW4gdXAgZGlyZWN0b3JpZXMgdW50aWwgLwojIHNvdXJjZSB0aGUgZmlsZSBpZiBmb3Vu \
ZAojIEBleGFtcGxlCiMgICBDb25mOjpsb2FkTmVhcmVzdEZpbGUgIi5mcmFtZXdvcmstY29uZmln \
IiAic3JjRGlyMSIgInNyY0RpcjIiCiMKIyBAYXJnICQxIGNvbmZpZ0ZpbGVOYW1lOlN0cmluZyBj \
b25maWcgZmlsZSBuYW1lIHRvIHNlYXJjaAojIEBhcmcgJDIgbG9hZGVkRmlsZTpTdHJpbmcgKHBh \
c3NlZCBieSByZWZlcmVuY2UpIHdpbGwgcmV0dXJuIHRoZSBsb2FkZWQgY29uZmlnIGZpbGUgbmFt \
ZQojIEBhcmcgJEAgc3JjRGlyczpTdHJpbmdbXSBzb3VyY2UgZGlyZWN0b3JpZXMgaW4gd2hpY2gg \
dGhlIGNvbmZpZyBmaWxlIHdpbGwgYmUgc2VhcmNoZWQKIyBAZXhpdGNvZGUgMCBpZiBmaWxlIGZv \
dW5kCiMgQGV4aXRjb2RlIDEgaWYgZmlsZSBub3QgZm91bmQKQ29uZjo6bG9hZE5lYXJlc3RGaWxl \
KCkgewogIGxvY2FsIGNvbmZpZ0ZpbGVOYW1lPSIkMSIKICBsb2NhbCAtbiBsb2FkZWRGaWxlPSIk \
MiIKICBzaGlmdCAyIHx8IHRydWUKICBsb2NhbCAtYSBzcmNEaXJzPSgiJEAiKQogIGZvciBzcmNE \
aXIgaW4gIiR7c3JjRGlyc1tAXX0iOyBkbwogICAgY29uZmlnRmlsZT0iJChGaWxlOjp1cEZpbmQg \
IiR7c3JjRGlyfSIgIiR7Y29uZmlnRmlsZU5hbWV9IiB8fCB0cnVlKSIKICAgIGlmIFtbIC1uICIk \
e2NvbmZpZ0ZpbGV9IiBdXTsgdGhlbgogICAgICAjIHNoZWxsY2hlY2sgc291cmNlPS8uZnJhbWV3 \
b3JrLWNvbmZpZwogICAgICBzb3VyY2UgIiR7Y29uZmlnRmlsZX0iIHx8IExvZzo6ZmF0YWwgImVy \
cm9yIHdoaWxlIGxvYWRpbmcgY29uZmlnIGZpbGUgJyR7Y29uZmlnRmlsZX0nIgogICAgICBMb2c6 \
OmRpc3BsYXlEZWJ1ZyAiQ29uZmlnIGZpbGUgJHtjb25maWdGaWxlfSBpcyBsb2FkZWQiCiAgICAg \
ICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgICBsb2FkZWRGaWxlPSIke2NvbmZpZ0Zp \
bGV9IgogICAgICByZXR1cm4gMAogICAgZmkKICBkb25lCgogIExvZzo6ZGlzcGxheURlYnVnICJD \
b25maWcgZmlsZSAnJHtjb25maWdGaWxlTmFtZX0nIG5vdCBmb3VuZCBpbiBhbnkgc291cmNlIGRp \
cmVjdG9yaWVzIHByb3ZpZGVkIgogIHJldHVybiAxCn0KCgojIEBkZXNjcmlwdGlvbiBkZWZhdWx0 \
IGVudiBmaWxlIHdpdGggYWxsIGRlZmF1bHQgdmFsdWVzCiMgQHN0ZG91dCB0aGUgZGVmYXVsdCBl \
bnYgZmlsZXBhdGgKRW52OjpjcmVhdGVEZWZhdWx0RW52RmlsZSgpIHsKICBsb2NhbCBlbnZGaWxl \
CiAgZW52RmlsZT0iJChGcmFtZXdvcms6OmNyZWF0ZVRlbXBGaWxlICJjcmVhdGVEZWZhdWx0RW52 \
RmlsZUVudkZpbGUiKSIgfHwgcmV0dXJuIDIKCiAgKAogICAgZWNobyAiQkFTSF9GUkFNRVdPUktf \
VEhFTUU9JHtCQVNIX0ZSQU1FV09SS19USEVNRTotZGVmYXVsdH0iCiAgICBlY2hvICJCQVNIX0ZS \
QU1FV09SS19MT0dfTEVWRUw9JHtCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUw6LSR7X19MRVZFTF9P \
RkZ9fSIKICAgIGVjaG8gIkJBU0hfRlJBTUVXT1JLX0RJU1BMQVlfTEVWRUw9JHtCQVNIX0ZSQU1F \
V09SS19ESVNQTEFZX0xFVkVMOi0ke19fTEVWRUxfSU5GT319IgogICAgIyBzaGVsbGNoZWNrIGRp \
c2FibGU9U0MyMDE2CiAgICBlY2hvICdCQVNIX0ZSQU1FV09SS19MT0dfRklMRT0iJHtCQVNIX0ZS \
QU1FV09SS19MT0dfRklMRTotIiR7RlJBTUVXT1JLX1JPT1RfRElSfS9sb2dzLyR7U0NSSVBUX05B \
TUV9LmxvZyJ9IicKICAgIGVjaG8gIkJBU0hfRlJBTUVXT1JLX0xPR19GSUxFX01BWF9ST1RBVElP \
Tj0ke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFX01BWF9ST1RBVElPTjotNX0iCiAgKSA+IiR7ZW52 \
RmlsZX0iCiAgZWNobyAiJHtlbnZGaWxlfSIKfQoKCiMgQGRlc2NyaXB0aW9uIGVuc3VyZSBlbnYg \
ZmlsZXMgYXJlIGxvYWRlZAojIEBhcmcgJEAgbGlzdCBvZiBkZWZhdWx0IGZpbGVzIHRvIGxvYWQg \
YXQgdGhlIGVuZAojIEBleGl0Y29kZSAxIGlmIG9uZSBvZiBlbnYgZmlsZXMgZmFpbHMgdG8gbG9h \
ZAojIEBzdGRlcnIgZGlhZ25vc3RpY3MgaW5mb3JtYXRpb24gaXMgZGlzcGxheWVkCiMgc2hlbGxj \
aGVjayBkaXNhYmxlPVNDMjEyMApFbnY6OnJlcXVpcmVMb2FkKCkgewogIGV4cG9ydCBSRVFVSVJF \
X0ZVTkNUSU9OX0VOVl9SRVFVSVJFX0xPQURfTE9BREVEPTEKCiAgbG9jYWwgLWEgZGVmYXVsdEZp \
bGVzPSgiJEAiKQogICMgZ2V0IGxpc3Qgb2YgcG9zc2libGUgY29uZmlnIGZpbGVzCiAgbG9jYWwg \
LWEgY29uZmlnRmlsZXM9KCkKICBsb2NhbCBkZWZhdWx0RW52RmlsZQogIGRlZmF1bHRFbnZGaWxl \
PSIkKEVudjo6Y3JlYXRlRGVmYXVsdEVudkZpbGUpIiB8fCByZXR1cm4gMQogIGNvbmZpZ0ZpbGVz \
Kz0oIiR7ZGVmYXVsdEVudkZpbGV9IikKICBpZiBbWyAtbiAiJHtCQVNIX0ZSQU1FV09SS19FTlZf \
RklMRVNbMF0rMX0iIF1dOyB0aGVuCiAgICAjIEJBU0hfRlJBTUVXT1JLX0VOVl9GSUxFUyBpcyBh \
biBhcnJheQogICAgY29uZmlnRmlsZXMrPSgiJHtCQVNIX0ZSQU1FV09SS19FTlZfRklMRVNbQF19 \
IikKICBmaQogIGlmIFtbIC1mICIke0ZSQU1FV09SS19ST09UX0RJUn0vLmZyYW1ld29yay1jb25m \
aWciIF1dOyB0aGVuCiAgICBjb25maWdGaWxlcys9KCIke0ZSQU1FV09SS19ST09UX0RJUn0vLmZy \
YW1ld29yay1jb25maWciKQogIGZpCiAgbG9jYWwgbG9jYWxGcmFtZXdvcmtDb25maWdGaWxlCiAg \
QkFTSF9GUkFNRVdPUktfRElTUExBWV9MRVZFTD0iJHtfX0xFVkVMX0lORk99IiBcCiAgICBCQVNI \
X0ZSQU1FV09SS19MT0dfTEVWRUw9IiR7X19MRVZFTF9PRkZ9IiBcCiAgICBDb25mOjpsb2FkTmVh \
cmVzdEZpbGUgIi5mcmFtZXdvcmstY29uZmlnIiBsb2NhbEZyYW1ld29ya0NvbmZpZ0ZpbGUgIiQo \
cHdkKSIgfHwgdHJ1ZQogIGlmIFtbIC1mICIke2xvY2FsRnJhbWV3b3JrQ29uZmlnRmlsZX0iIF1d \
OyB0aGVuCiAgICBjb25maWdGaWxlcys9KCIke2xvY2FsRnJhbWV3b3JrQ29uZmlnRmlsZX0iKQog \
IGZpCiAgY29uZmlnRmlsZXMrPSgiJHtvcHRpb25FbnZGaWxlc1tAXX0iKQogIGNvbmZpZ0ZpbGVz \
Kz0oIiR7ZGVmYXVsdEZpbGVzW0BdfSIpCgogIHdoaWxlIElGUz0nJyByZWFkIC1yIGZpbGU7IGRv \
CiAgICAjIHNoZWxsY2hlY2sgc291cmNlPS9zcmMvRW52L2NyZWF0ZURlZmF1bHRFbnZGaWxlLnNo \
CiAgICBDVVJSRU5UX0xPQURFRF9FTlZfRklMRT0iJHtmaWxlfSIgc291cmNlICIke2ZpbGV9IiB8 \
fCB7CiAgICAgIExvZzo6ZGlzcGxheUVycm9yICJ3aGlsZSBsb2FkaW5nIGNvbmZpZyBmaWxlOiAk \
e2ZpbGV9IgogICAgICByZXR1cm4gMQogICAgfQogIGRvbmUgPCA8KHByaW50ZiAnJXNcbicgIiR7 \
Y29uZmlnRmlsZXNbQF19IiB8IGF3ayAnIXhbJDBdKysnKQp9CgoKIyBAZGVzY3JpcHRpb24gc2Vh \
cmNoIGEgZmlsZSBpbiBwYXJlbnQgZGlyZWN0b3JpZXMKIwojIEBhcmcgJDEgZnJvbVBhdGg6U3Ry \
aW5nIHBhdGgKIyBAYXJnICQyIGZpbGVOYW1lOlN0cmluZwojIEBhcmcgJDMgdW50aWxJbmNsdXNp \
dmVQYXRoOlN0cmluZyAob3B0aW9uYWwpIGZpbmQgZm9yIGdpdmVuIGZpbGUgdW50aWwgcmVhY2hp \
bmcgdGhpcyBmb2xkZXIgKGRlZmF1bHQgdmFsdWU6IC8pCiMgQGFyZyAkQCB1bnRpbEluY2x1c2l2 \
ZVBhdGhzOlN0cmluZ1tdIGxpc3Qgb2YgdW50aWxJbmNsdXNpdmVQYXRoCiMgQHN0ZG91dCBUaGUg \
ZmlsZW5hbWUgaWYgZm91bmQKIyBAZXhpdGNvZGUgMSBpZiB0aGUgY29tbWFuZCBmYWlsZWQgb3Ig \
ZmlsZSBub3QgZm91bmQKRmlsZTo6dXBGaW5kKCkgewogIGxvY2FsIGZyb21QYXRoPSIkMSIKICBz \
aGlmdCB8fCB0cnVlCiAgbG9jYWwgZmlsZU5hbWU9IiQxIgogIHNoaWZ0IHx8IHRydWUKICBsb2Nh \
bCB1bnRpbEluY2x1c2l2ZVBhdGg9IiR7MTotL30iCiAgc2hpZnQgfHwgdHJ1ZQoKICBpZiBbWyAt \
ZiAiJHtmcm9tUGF0aH0iIF1dOyB0aGVuCiAgICBmcm9tUGF0aD0iJHtmcm9tUGF0aCUvKn0iCiAg \
ZmkKICB3aGlsZSB0cnVlOyBkbwogICAgaWYgW1sgLWYgIiR7ZnJvbVBhdGh9LyR7ZmlsZU5hbWV9 \
IiBdXTsgdGhlbgogICAgICBlY2hvICIke2Zyb21QYXRofS8ke2ZpbGVOYW1lfSIKICAgICAgcmV0 \
dXJuIDAKICAgIGZpCiAgICBpZiBBcnJheTo6Y29udGFpbnMgIiR7ZnJvbVBhdGh9IiAiJHt1bnRp \
bEluY2x1c2l2ZVBhdGh9IiAiJEAiICIvIjsgdGhlbgogICAgICByZXR1cm4gMQogICAgZmkKICAg \
IGZyb21QYXRoPSIkKHJlYWRsaW5rIC1mICIke2Zyb21QYXRofSIvLi4pIgogIGRvbmUKICByZXR1 \
cm4gMQp9CgoKIyBAZGVzY3JpcHRpb24gY3JlYXRlIGEgdGVtcCBmaWxlIHVzaW5nIGRlZmF1bHQg \
VE1QRElSIHZhcmlhYmxlCiMgQGVudiBUTVBESVIgU3RyaW5nIChkZWZhdWx0IHZhbHVlIC90bXAp \
CiMgQGFyZyAkMSB0ZW1wbGF0ZU5hbWU6U3RyaW5nIHRlbXBsYXRlIG5hbWUgdG8gdXNlKG9wdGlv \
bmFsKQpGcmFtZXdvcms6OmNyZWF0ZVRlbXBGaWxlKCkgewogIG1rdGVtcCAtcCAiJHtUTVBESVI6 \
LS90bXB9IiAtdCAiJHsxOi19LlhYWFhYWFhYWFhYWCIKfQoKCiMgQGRlc2NyaXB0aW9uIGVuc3Vy \
ZSBydW5uaW5nIHVzZXIgaXMgcm9vdAojIEBleGl0Y29kZSAxIGlmIGN1cnJlbnQgdXNlciBpcyBu \
b3Qgcm9vdAojIEBzdGRlcnIgZGlhZ25vc3RpY3MgaW5mb3JtYXRpb24gaXMgZGlzcGxheWVkCkxp \
bnV4OjpyZXF1aXJlRXhlY3V0ZWRBc1Jvb3QoKSB7CiAgaWYgW1sgIiQoaWQgLXUpIiAhPSAiMCIg \
XV07IHRoZW4KICAgIExvZzo6ZmF0YWwgInRoaXMgc2NyaXB0IHNob3VsZCBiZSBleGVjdXRlZCBh \
cyByb290IgogIGZpCn0KCgpkZWNsYXJlIC1nIEZJUlNUX0xPR19EQVRFIExPR19MQVNUX0xPR19E \
QVRFIExPR19MQVNUX0xPR19EQVRFX0lOSVQgTE9HX0xBU1RfRFVSQVRJT05fU1RSCkZJUlNUX0xP \
R19EQVRFPSIke0VQT0NIUkVBTFRJTUUvW14wLTldL30iCkxPR19MQVNUX0xPR19EQVRFPSIke0ZJ \
UlNUX0xPR19EQVRFfSIKTE9HX0xBU1RfTE9HX0RBVEVfSU5JVD0xCkxPR19MQVNUX0RVUkFUSU9O \
X1NUUj0iIgoKIyBAZGVzY3JpcHRpb24gY29tcHV0ZSBkdXJhdGlvbiBzaW5jZSBsYXN0IGNhbGwg \
dG8gdGhpcyBmdW5jdGlvbgojIHRoZSByZXN1bHQgaXMgc2V0IGluIGZvbGxvd2luZyBlbnYgdmFy \
aWFibGVzLgojIGluIHNzLnNzcyAoc2Vjb25kcyBmb2xsb3dlZCBieSBtaWxsaXNlY29uZHMgcHJl \
Y2lzaW9uIDMgZGVjaW1hbHMpCiMgQG5vYXJncwojIEBlbnYgRElTUExBWV9EVVJBVElPTiBpbnQg \
KGRlZmF1bHQgMCkgaWYgMSBkaXNwbGF5IGVsYXBzZWQgdGltZSBpbmZvcm1hdGlvbiBiZXR3ZWVu \
IDIgaW5mbyBsb2dzCiMgQHNldCBMT0dfTEFTVF9MT0dfREFURV9JTklUIGludCAoZGVmYXVsdCAx \
KSBzZXQgdG8gMCBhdCBmaXJzdCBjYWxsLCBhbGxvd3MgdG8gZGV0ZWN0IHJlZmVyZW5jZSBsb2cK \
IyBAc2V0IExPR19MQVNUX0RVUkFUSU9OX1NUUiBTdHJpbmcgdGhlIGxhc3QgZHVyYXRpb24gZGlz \
cGxheWVkCiMgQHNldCBMT0dfTEFTVF9MT0dfREFURSBTdHJpbmcgdGhlIGxhc3QgbG9nIGRhdGUg \
dGhhdCB3aWxsIGJlIHVzZWQgdG8gY29tcHV0ZSBuZXh0IGRpZmYKTG9nOjpjb21wdXRlRHVyYXRp \
b24oKSB7CiAgaWYgKCgke0RJU1BMQVlfRFVSQVRJT046LTB9ID09IDEpKTsgdGhlbgogICAgbG9j \
YWwgLWkgZHVyYXRpb249MAogICAgbG9jYWwgLWkgZGVsdGE9MAogICAgbG9jYWwgZHVyYXRpb25T \
dHIgZGVsdGFTdHIKICAgIGxvY2FsIC1pIGN1cnJlbnRMb2dEYXRlCiAgICBjdXJyZW50TG9nRGF0 \
ZT0iJHtFUE9DSFJFQUxUSU1FL1teMC05XS99IgogICAgaWYgKChMT0dfTEFTVF9MT0dfREFURV9J \
TklUID09IDEpKTsgdGhlbgogICAgICBMT0dfTEFTVF9MT0dfREFURV9JTklUPTAKICAgICAgTE9H \
X0xBU1RfRFVSQVRJT05fU1RSPSJSZWYiCiAgICBlbHNlCiAgICAgIGR1cmF0aW9uPSQoKChjdXJy \
ZW50TG9nRGF0ZSAtIEZJUlNUX0xPR19EQVRFKSAvIDEwMDAwMDApKQogICAgICBkZWx0YT0kKCgo \
Y3VycmVudExvZ0RhdGUgLSBMT0dfTEFTVF9MT0dfREFURSkgLyAxMDAwMDAwKSkKICAgICAgaWYg \
KChkdXJhdGlvbiA+IDU5KSk7IHRoZW4KICAgICAgICBkdXJhdGlvblN0cj0kKGRhdGUgLXVkICJA \
JHtkdXJhdGlvbn0iICsnJUg6JU06JVMnKQogICAgICBlbHNlCiAgICAgICAgZHVyYXRpb25TdHI9 \
IiR7ZHVyYXRpb259cyIKICAgICAgZmkKICAgICAgaWYgKChkZWx0YSA+IDU5KSk7IHRoZW4KICAg \
ICAgICBkZWx0YVN0cj0kKGRhdGUgLXVkICJAJHtkZWx0YX0iICsnJUg6JU06JVMnKQogICAgICBl \
bHNlCiAgICAgICAgZGVsdGFTdHI9IiR7ZGVsdGF9cyIKICAgICAgZmkKICAgICAgTE9HX0xBU1Rf \
RFVSQVRJT05fU1RSPSIke2R1cmF0aW9uU3RyfS8rJHtkZWx0YVN0cn0iCiAgICBmaQogICAgTE9H \
X0xBU1RfTE9HX0RBVEU9IiR7Y3VycmVudExvZ0RhdGV9IgogICAgIyBzaGVsbGNoZWNrIGRpc2Fi \
bGU9U0MyMDM0CiAgICBsb2NhbCBtaWNyb1NlY29uZHM9IiR7RVBPQ0hSRUFMVElNRSMqLn0iCiAg \
ICBMT0dfTEFTVF9EVVJBVElPTl9TVFI9IiQocHJpbnRmICclKCVUKVQuJTAzLjBmXG4nICIke0VQ \
T0NIU0VDT05EU30iICIke21pY3JvU2Vjb25kczowOjN9IikoJHtMT0dfTEFTVF9EVVJBVElPTl9T \
VFJ9KSAtICIKICBlbHNlCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIExPR19M \
QVNUX0RVUkFUSU9OX1NUUj0iIgogIGZpCn0KCgojIEBkZXNjcmlwdGlvbiBEaXNwbGF5IG1lc3Nh \
Z2UgdXNpbmcgZGVidWcgY29sb3IgKGdyYXkpCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUg \
bWVzc2FnZSB0byBkaXNwbGF5CiMgQGVudiBESVNQTEFZX0RVUkFUSU9OIGludCAoZGVmYXVsdCAw \
KSBpZiAxIGRpc3BsYXkgZWxhcHNlZCB0aW1lIGluZm9ybWF0aW9uIGJldHdlZW4gMiBpbmZvIGxv \
Z3MKIyBAZW52IExPR19DT05URVhUIFN0cmluZyBhbGxvd3MgdG8gY29udGV4dHVhbGl6ZSB0aGUg \
bG9nCkxvZzo6ZGlzcGxheURlYnVnKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfRElTUExBWV9M \
RVZFTCA+PSBfX0xFVkVMX0RFQlVHKSk7IHRoZW4KICAgIExvZzo6Y29tcHV0ZUR1cmF0aW9uCiAg \
ICBlY2hvIC1lICIke19fREVCVUdfQ09MT1J9REVCVUcgICAtICR7TE9HX0NPTlRFWFQ6LX0ke0xP \
R19MQVNUX0RVUkFUSU9OX1NUUjotfSR7MX0ke19fUkVTRVRfQ09MT1J9IiA+JjIKICBmaQogIExv \
Zzo6bG9nRGVidWcgIiQxIgp9CgoKIyBAZGVzY3JpcHRpb24gRGlzcGxheSBtZXNzYWdlIHVzaW5n \
IGVycm9yIGNvbG9yIChyZWQpCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0 \
byBkaXNwbGF5CiMgQGVudiBESVNQTEFZX0RVUkFUSU9OIGludCAoZGVmYXVsdCAwKSBpZiAxIGRp \
c3BsYXkgZWxhcHNlZCB0aW1lIGluZm9ybWF0aW9uIGJldHdlZW4gMiBpbmZvIGxvZ3MKIyBAZW52 \
IExPR19DT05URVhUIFN0cmluZyBhbGxvd3MgdG8gY29udGV4dHVhbGl6ZSB0aGUgbG9nCkxvZzo6 \
ZGlzcGxheUVycm9yKCkgewogIGlmICgoQkFTSF9GUkFNRVdPUktfRElTUExBWV9MRVZFTCA+PSBf \
X0xFVkVMX0VSUk9SKSk7IHRoZW4KICAgIExvZzo6Y29tcHV0ZUR1cmF0aW9uCiAgICBlY2hvIC1l \
ICIke19fRVJST1JfQ09MT1J9RVJST1IgICAtICR7TE9HX0NPTlRFWFQ6LX0ke0xPR19MQVNUX0RV \
UkFUSU9OX1NUUjotfSR7MX0ke19fUkVTRVRfQ09MT1J9IiA+JjIKICBmaQogIExvZzo6bG9nRXJy \
b3IgIiQxIgp9CgoKIyBAZGVzY3JpcHRpb24gRGlzcGxheSBtZXNzYWdlIHVzaW5nIGluZm8gY29s \
b3IgKGJnIGxpZ2h0IGJsdWUvZmcgd2hpdGUpCiMgQGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUg \
bWVzc2FnZSB0byBkaXNwbGF5CiMgQGVudiBESVNQTEFZX0RVUkFUSU9OIGludCAoZGVmYXVsdCAw \
KSBpZiAxIGRpc3BsYXkgZWxhcHNlZCB0aW1lIGluZm9ybWF0aW9uIGJldHdlZW4gMiBpbmZvIGxv \
Z3MKIyBAZW52IExPR19DT05URVhUIFN0cmluZyBhbGxvd3MgdG8gY29udGV4dHVhbGl6ZSB0aGUg \
bG9nCkxvZzo6ZGlzcGxheUluZm8oKSB7CiAgbG9jYWwgdHlwZT0iJHsyOi1JTkZPfSIKICBpZiAo \
KEJBU0hfRlJBTUVXT1JLX0RJU1BMQVlfTEVWRUwgPj0gX19MRVZFTF9JTkZPKSk7IHRoZW4KICAg \
IExvZzo6Y29tcHV0ZUR1cmF0aW9uCiAgICBlY2hvIC1lICIke19fSU5GT19DT0xPUn0ke3R5cGV9 \
ICAgIC0gJHtMT0dfQ09OVEVYVDotfSR7TE9HX0xBU1RfRFVSQVRJT05fU1RSOi19JHsxfSR7X19S \
RVNFVF9DT0xPUn0iID4mMgogIGZpCiAgTG9nOjpsb2dJbmZvICIkMSIgIiR7dHlwZX0iCn0KCgoj \
IEBkZXNjcmlwdGlvbiBEaXNwbGF5IG1lc3NhZ2UgdXNpbmcgZXJyb3IgY29sb3IgKHJlZCkgYW5k \
IGV4aXQgaW1tZWRpYXRlbHkgd2l0aCBlcnJvciBzdGF0dXMgMQojIEBhcmcgJDEgbWVzc2FnZTpT \
dHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheQojIEBlbnYgRElTUExBWV9EVVJBVElPTiBpbnQg \
KGRlZmF1bHQgMCkgaWYgMSBkaXNwbGF5IGVsYXBzZWQgdGltZSBpbmZvcm1hdGlvbiBiZXR3ZWVu \
IDIgaW5mbyBsb2dzCiMgQGVudiBMT0dfQ09OVEVYVCBTdHJpbmcgYWxsb3dzIHRvIGNvbnRleHR1 \
YWxpemUgdGhlIGxvZwpMb2c6OmZhdGFsKCkgewogIExvZzo6Y29tcHV0ZUR1cmF0aW9uCiAgZWNo \
byAtZSAiJHtfX0VSUk9SX0NPTE9SfUZBVEFMICAgLSAke0xPR19DT05URVhUOi19JHtMT0dfTEFT \
VF9EVVJBVElPTl9TVFI6LX0kezF9JHtfX1JFU0VUX0NPTE9SfSIgPiYyCiAgTG9nOjpsb2dGYXRh \
bCAiJDEiCiAgZXhpdCAxCn0KCgojIEBkZXNjcmlwdGlvbiBsb2cgbWVzc2FnZSB0byBmaWxlCiMg \
QGFyZyAkMSBtZXNzYWdlOlN0cmluZyB0aGUgbWVzc2FnZSB0byBkaXNwbGF5CkxvZzo6bG9nRGVi \
dWcoKSB7CiAgaWYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgPj0gX19MRVZFTF9ERUJVRykp \
OyB0aGVuCiAgICBMb2c6OmxvZ01lc3NhZ2UgIiR7MjotREVCVUd9IiAiJDEiCiAgZmkKfQoKCiMg \
QGRlc2NyaXB0aW9uIGxvZyBtZXNzYWdlIHRvIGZpbGUKIyBAYXJnICQxIG1lc3NhZ2U6U3RyaW5n \
IHRoZSBtZXNzYWdlIHRvIGRpc3BsYXkKTG9nOjpsb2dFcnJvcigpIHsKICBpZiAoKEJBU0hfRlJB \
TUVXT1JLX0xPR19MRVZFTCA+PSBfX0xFVkVMX0VSUk9SKSk7IHRoZW4KICAgIExvZzo6bG9nTWVz \
c2FnZSAiJHsyOi1FUlJPUn0iICIkMSIKICBmaQp9CgoKIyBAZGVzY3JpcHRpb24gbG9nIG1lc3Nh \
Z2UgdG8gZmlsZQojIEBhcmcgJDEgbWVzc2FnZTpTdHJpbmcgdGhlIG1lc3NhZ2UgdG8gZGlzcGxh \
eQpMb2c6OmxvZ0ZhdGFsKCkgewogIExvZzo6bG9nTWVzc2FnZSAiJHsyOi1GQVRBTH0iICIkMSIK \
fQoKCiMgQGRlc2NyaXB0aW9uIGxvZyBtZXNzYWdlIHRvIGZpbGUKIyBAYXJnICQxIG1lc3NhZ2U6 \
U3RyaW5nIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXkKTG9nOjpsb2dJbmZvKCkgewogIGlmICgoQkFT \
SF9GUkFNRVdPUktfTE9HX0xFVkVMID49IF9fTEVWRUxfSU5GTykpOyB0aGVuCiAgICBMb2c6Omxv \
Z01lc3NhZ2UgIiR7MjotSU5GT30iICIkMSIKICBmaQp9CgoKIyBAZGVzY3JpcHRpb24gSW50ZXJu \
YWw6IGNvbW1vbiBsb2cgbWVzc2FnZQojIEBleGFtcGxlIHRleHQKIyAgIFtkYXRlXXxbbGV2ZWxN \
c2ddfG1lc3NhZ2UKIwojIEBleGFtcGxlIHRleHQKIyAgIDIwMjAtMDEtMTkgMTk6MjA6MjF8RVJS \
T1IgIHxsb2cgZXJyb3IKIyAgIDIwMjAtMDEtMTkgMTk6MjA6MjF8U0tJUFBFRHxsb2cgc2tpcHBl \
ZAojCiMgQGFyZyAkMSBsZXZlbE1zZzpTdHJpbmcgbWVzc2FnZSdzIGxldmVsIGRlc2NyaXB0aW9u \
IChlZzogU1RBVFVTLCBFUlJPUiwgLi4uKQojIEBhcmcgJDIgbXNnOlN0cmluZyB0aGUgbWVzc2Fn \
ZSB0byBkaXNwbGF5CiMgQGVudiBCQVNIX0ZSQU1FV09SS19MT0dfRklMRSBTdHJpbmcgbG9nIGZp \
bGUgdG8gdXNlLCBkbyBub3RoaW5nIGlmIGVtcHR5CiMgQGVudiBCQVNIX0ZSQU1FV09SS19MT0df \
TEVWRUwgaW50IGxvZyBsZXZlbCBsb2cgb25seSBpZiA+IE9GRiBvciBmYXRhbCBtZXNzYWdlcwoj \
IEBzdGRlcnIgZGlhZ25vc3RpY3MgaW5mb3JtYXRpb24gaXMgZGlzcGxheWVkCkxvZzo6bG9nTWVz \
c2FnZSgpIHsKCiAgaWYgW1sgIiR7UkVRVUlSRV9GVU5DVElPTl9FTlZfUkVRVUlSRV9MT0FEX0xP \
QURFRDotMH0iICE9IDEgXV07IHRoZW4KICAgIGVjaG8gPiYyICJSZXF1aXJlbWVudCBFbnY6OnJl \
cXVpcmVMb2FkIGhhcyBub3QgYmVlbiBsb2FkZWQiCiAgICBleGl0IDEKICBmaQoKICBpZiBbWyAi \
JHtSRVFVSVJFX0ZVTkNUSU9OX0xPR19SRVFVSVJFX0xPQURfTE9BREVEOi0wfSIgIT0gMSBdXTsg \
dGhlbgogICAgZWNobyA+JjIgIlJlcXVpcmVtZW50IExvZzo6cmVxdWlyZUxvYWQgaGFzIG5vdCBi \
ZWVuIGxvYWRlZCIKICAgIGV4aXQgMQogIGZpCgogIGxvY2FsIGxldmVsTXNnPSIkMSIKICBsb2Nh \
bCBtc2c9IiQyIgogIGxvY2FsIGRhdGUKCiAgaWYgW1sgLW4gIiR7QkFTSF9GUkFNRVdPUktfTE9H \
X0ZJTEV9IiBdXSAmJiAoKEJBU0hfRlJBTUVXT1JLX0xPR19MRVZFTCA+IF9fTEVWRUxfT0ZGKSk7 \
IHRoZW4KICAgIGRhdGU9IiQoZGF0ZSAnKyVZLSVtLSVkICVIOiVNOiVTJykiCiAgICB0b3VjaCAi \
JHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRX0iCiAgICBwcmludGYgIiVzfCU3c3wlc1xuIiAiJHtk \
YXRlfSIgIiR7bGV2ZWxNc2d9IiAiJHttc2d9IiA+PiIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxF \
fSIKICBmaQp9CgoKIyBAZGVzY3JpcHRpb24gYWN0aXZhdGUgb3Igbm90IExvZzo6ZGlzcGxheSog \
YW5kIExvZzo6bG9nKiBmdW5jdGlvbnMKIyBiYXNlZCBvbiBCQVNIX0ZSQU1FV09SS19ESVNQTEFZ \
X0xFVkVMIGFuZCBCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwKIyBlbnZpcm9ubWVudCB2YXJpYWJs \
ZXMgbG9hZGVkIGJ5IEVudjo6cmVxdWlyZUxvYWQKIyB0cnkgdG8gY3JlYXRlIGxvZyBmaWxlIGFu \
ZCByb3RhdGUgaXQgaWYgbmVjZXNzYXJ5CiMgQG5vYXJncwojIEBzZXQgQkFTSF9GUkFNRVdPUktf \
TE9HX0xFVkVMIGludCB0byBPRkYgbGV2ZWwgaWYgQkFTSF9GUkFNRVdPUktfTE9HX0ZJTEUgaXMg \
ZW1wdHkgb3Igbm90IHdyaXRhYmxlCiMgQGVudiBCQVNIX0ZSQU1FV09SS19ESVNQTEFZX0xFVkVM \
IGludAojIEBlbnYgQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMIGludAojIEBlbnYgQkFTSF9GUkFN \
RVdPUktfTE9HX0ZJTEUgU3RyaW5nCiMgQGVudiBCQVNIX0ZSQU1FV09SS19MT0dfRklMRV9NQVhf \
Uk9UQVRJT04gaW50IGRvIGxvZyByb3RhdGlvbiBpZiA+IDAKIyBAZXhpdGNvZGUgMCBhbHdheXMg \
c3VjY2Vzc2Z1bAojIEBzdGRlcnIgZGlhZ25vc3RpY3MgaW5mb3JtYXRpb24gYWJvdXQgbG9nIGZp \
bGUgaXMgZGlzcGxheWVkCkxvZzo6cmVxdWlyZUxvYWQoKSB7CiAgZXhwb3J0IFJFUVVJUkVfRlVO \
Q1RJT05fTE9HX1JFUVVJUkVfTE9BRF9MT0FERUQ9MQoKCiAgaWYgW1sgIiR7UkVRVUlSRV9GVU5D \
VElPTl9FTlZfUkVRVUlSRV9MT0FEX0xPQURFRDotMH0iICE9IDEgXV07IHRoZW4KICAgIGVjaG8g \
PiYyICJSZXF1aXJlbWVudCBFbnY6OnJlcXVpcmVMb2FkIGhhcyBub3QgYmVlbiBsb2FkZWQiCiAg \
ICBleGl0IDEKICBmaQoKICBpZiBbWyAiJHtSRVFVSVJFX0ZVTkNUSU9OX1VJX1JFUVVJUkVfVEhF \
TUVfTE9BREVEOi0wfSIgIT0gMSBdXTsgdGhlbgogICAgZWNobyA+JjIgIlJlcXVpcmVtZW50IFVJ \
OjpyZXF1aXJlVGhlbWUgaGFzIG5vdCBiZWVuIGxvYWRlZCIKICAgIGV4aXQgMQogIGZpCgogIGlm \
IFtbIC16ICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFOi19IiBdXTsgdGhlbgogICAgQkFTSF9G \
UkFNRVdPUktfTE9HX0xFVkVMPSR7X19MRVZFTF9PRkZ9CiAgICBleHBvcnQgQkFTSF9GUkFNRVdP \
UktfTE9HX0xFVkVMCiAgZmkKCiAgaWYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgPiBfX0xF \
VkVMX09GRikpOyB0aGVuCiAgICBpZiBbWyAhIC1mICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxF \
fSIgXV07IHRoZW4KICAgICAgaWYgW1sgISAtZCAiJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRSUv \
Kn0iIF1dOyB0aGVuCiAgICAgICAgaWYgISBta2RpciAtcCAiJHtCQVNIX0ZSQU1FV09SS19MT0df \
RklMRSUvKn0iIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgICAgICBCQVNIX0ZSQU1FV09SS19MT0df \
TEVWRUw9JHtfX0xFVkVMX09GRn0KICAgICAgICAgIGVjaG8gLWUgIiR7X19FUlJPUl9DT0xPUn1F \
UlJPUiAgIC0gZGlyZWN0b3J5ICR7QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEUlLyp9IGlzIG5vdCB3 \
cml0YWJsZSR7X19SRVNFVF9DT0xPUn0iID4mMgogICAgICAgIGZpCiAgICAgIGVsaWYgISB0b3Vj \
aCAtLW5vLWNyZWF0ZSAiJHtCQVNIX0ZSQU1FV09SS19MT0dfRklMRX0iIDI+L2Rldi9udWxsOyB0 \
aGVuCiAgICAgICAgQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMPSR7X19MRVZFTF9PRkZ9CiAgICAg \
ICAgZWNobyAtZSAiJHtfX0VSUk9SX0NPTE9SfUVSUk9SICAgLSBGaWxlICR7QkFTSF9GUkFNRVdP \
UktfTE9HX0ZJTEV9IGlzIG5vdCB3cml0YWJsZSR7X19SRVNFVF9DT0xPUn0iID4mMgogICAgICBm \
aQogICAgZWxpZiBbWyAhIC13ICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSIgXV07IHRoZW4K \
ICAgICAgQkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMPSR7X19MRVZFTF9PRkZ9CiAgICAgIGVjaG8g \
LWUgIiR7X19FUlJPUl9DT0xPUn1FUlJPUiAgIC0gRmlsZSAke0JBU0hfRlJBTUVXT1JLX0xPR19G \
SUxFfSBpcyBub3Qgd3JpdGFibGUke19fUkVTRVRfQ09MT1J9IiA+JjIKICAgIGZpCiAgZmkKCiAg \
aWYgKChCQVNIX0ZSQU1FV09SS19MT0dfTEVWRUwgPiBfX0xFVkVMX09GRikpOyB0aGVuCiAgICAj \
IHdpbGwgYWx3YXlzIGJlIGNyZWF0ZWQgZXZlbiBpZiBub3QgaW4gaW5mbyBsZXZlbAogICAgTG9n \
Ojpsb2dNZXNzYWdlICJJTkZPIiAiTG9nZ2luZyB0byBmaWxlICR7QkFTSF9GUkFNRVdPUktfTE9H \
X0ZJTEV9IC0gTG9nIGxldmVsICR7QkFTSF9GUkFNRVdPUktfTE9HX0xFVkVMfSIKICAgIGlmICgo \
QkFTSF9GUkFNRVdPUktfTE9HX0ZJTEVfTUFYX1JPVEFUSU9OID4gMCkpOyB0aGVuCiAgICAgIExv \
Zzo6cm90YXRlICIke0JBU0hfRlJBTUVXT1JLX0xPR19GSUxFfSIgIiR7QkFTSF9GUkFNRVdPUktf \
TE9HX0ZJTEVfTUFYX1JPVEFUSU9OfSIKICAgIGZpCiAgZmkKfQoKCiMgQGRlc2NyaXB0aW9uIFRv \
IGJlIGNhbGxlZCBiZWZvcmUgbG9nZ2luZyBpbiB0aGUgbG9nIGZpbGUKIyBAYXJnICQxIGZpbGU6 \
c3RyaW5nIGxvZyBmaWxlIG5hbWUKIyBAYXJnICQyIG1heExvZ0ZpbGVzQ291bnQ6aW50IG1heGlt \
dW0gbnVtYmVyIG9mIGxvZyBmaWxlcwpMb2c6OnJvdGF0ZSgpIHsKICBsb2NhbCBmaWxlPSIkMSIK \
ICBsb2NhbCBtYXhMb2dGaWxlc0NvdW50PSIkezI6LTV9IgoKICBpZiBbWyAhIC1mICIke2ZpbGV9 \
IiBdXTsgdGhlbgogICAgTG9nOjpkaXNwbGF5RGVidWcgIkxvZyBmaWxlICR7ZmlsZX0gZG9lc24n \
dCBleGlzdCB5ZXQiCiAgICByZXR1cm4gMAogIGZpCiAgbG9jYWwgaQogIGZvciAoKGkgPSBtYXhM \
b2dGaWxlc0NvdW50IC0gMTsgaSA+IDA7IGktLSkpOyBkbwogICAgTG9nOjpkaXNwbGF5SW5mbyAi \
TG9nIHJvdGF0aW9uICR7ZmlsZX0uJHtpfSB0byAke2ZpbGV9LiQoKGkgKyAxKSkiCiAgICBtdiAi \
JHtmaWxlfS4ieyIke2l9IiwiJCgoaSArIDEpKSJ9ICY+L2Rldi9udWxsIHx8IHRydWUKICBkb25l \
CiAgaWYgY3AgIiR7ZmlsZX0iICIke2ZpbGV9LjEiICY+L2Rldi9udWxsOyB0aGVuCiAgICBlY2hv \
ID4iJHtmaWxlfSIgIyByZXNldCBsb2cgZmlsZQogICAgTG9nOjpkaXNwbGF5SW5mbyAiTG9nIHJv \
dGF0aW9uICR7ZmlsZX0gdG8gJHtmaWxlfS4xIgogIGZpCn0KCgojIEBkZXNjcmlwdGlvbiBsb2Fk \
IGNvbG9yIHRoZW1lCiMgQG5vYXJncwojIEBlbnYgQkFTSF9GUkFNRVdPUktfVEhFTUUgU3RyaW5n \
IHRoZW1lIHRvIHVzZQojIEBlbnYgTE9BRF9USEVNRSBpbnQgMCB0byBhdm9pZCBsb2FkaW5nIHRo \
ZW1lCiMgQGV4aXRjb2RlIDAgYWx3YXlzIHN1Y2Nlc3NmdWwKVUk6OnJlcXVpcmVUaGVtZSgpIHsK \
ICBleHBvcnQgUkVRVUlSRV9GVU5DVElPTl9VSV9SRVFVSVJFX1RIRU1FX0xPQURFRD0xCgogIGlm \
IFtbICIke0xPQURfVEhFTUU6LTF9IiA9ICIxIiBdXTsgdGhlbgogICAgVUk6OnRoZW1lICIke0JB \
U0hfRlJBTUVXT1JLX1RIRU1FLWRlZmF1bHR9IgogIGZpCn0KCgojIEBkZXNjcmlwdGlvbiBsb2Fk \
IGNvbG9ycyB0aGVtZSBjb25zdGFudHMKIyBAd2FybmluZyBpZiB0dHkgbm90IG9wZW5lZCwgbm9D \
b2xvciB0aGVtZSB3aWxsIGJlIGNob3NlbgojIEBhcmcgJDEgdGhlbWU6U3RyaW5nIHRoZSB0aGVt \
ZSB0byB1c2UgKGRlZmF1bHQsIG5vQ29sb3IpCiMgQGFyZyAkQCBhcmdzOlN0cmluZ1tdCiMgQHNl \
dCBfX0VSUk9SX0NPTE9SIFN0cmluZyBpbmRpY2F0ZSBlcnJvciBzdGF0dXMKIyBAc2V0IF9fSU5G \
T19DT0xPUiBTdHJpbmcgaW5kaWNhdGUgaW5mbyBzdGF0dXMKIyBAc2V0IF9fU1VDQ0VTU19DT0xP \
UiBTdHJpbmcgaW5kaWNhdGUgc3VjY2VzcyBzdGF0dXMKIyBAc2V0IF9fV0FSTklOR19DT0xPUiBT \
dHJpbmcgaW5kaWNhdGUgd2FybmluZyBzdGF0dXMKIyBAc2V0IF9fU0tJUFBFRF9DT0xPUiBTdHJp \
bmcgaW5kaWNhdGUgc2tpcHBlZCBzdGF0dXMKIyBAc2V0IF9fREVCVUdfQ09MT1IgU3RyaW5nIGlu \
ZGljYXRlIGRlYnVnIHN0YXR1cwojIEBzZXQgX19IRUxQX0NPTE9SIFN0cmluZyBpbmRpY2F0ZSBo \
ZWxwIHN0YXR1cwojIEBzZXQgX19URVNUX0NPTE9SIFN0cmluZyBub3QgdXNlZAojIEBzZXQgX19U \
RVNUX0VSUk9SX0NPTE9SIFN0cmluZyBub3QgdXNlZAojIEBzZXQgX19IRUxQX1RJVExFX0NPTE9S \
IFN0cmluZyB1c2VkIHRvIGRpc3BsYXkgaGVscCB0aXRsZSBpbiBoZWxwIHN0cmluZ3MKIyBAc2V0 \
IF9fSEVMUF9PUFRJT05fQ09MT1IgU3RyaW5nIHVzZWQgdG8gZGlzcGxheSBoaWdobGlnaHQgb3B0 \
aW9ucyBpbiBoZWxwIHN0cmluZ3MKIwojIEBzZXQgX19SRVNFVF9DT0xPUiBTdHJpbmcgcmVzZXQg \
ZGVmYXVsdCBjb2xvcgojCiMgQHNldCBfX0hFTFBfRVhBTVBMRSBTdHJpbmcgdG8gcmVtb3ZlCiMg \
QHNldCBfX0hFTFBfVElUTEUgU3RyaW5nIHRvIHJlbW92ZQojIEBzZXQgX19IRUxQX05PUk1BTCBT \
dHJpbmcgdG8gcmVtb3ZlCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNApVSTo6dGhlbWUoKSB7 \
CiAgbG9jYWwgdGhlbWU9IiR7MS1kZWZhdWx0fSIKICBpZiBbWyAhICIke3RoZW1lfSIgPX4gLWZv \
cmNlJCBdXSAmJiAhIEFzc2VydDo6dHR5OyB0aGVuCiAgICB0aGVtZT0ibm9Db2xvciIKICBmaQog \
IGNhc2UgIiR7dGhlbWV9IiBpbgogICAgZGVmYXVsdCB8IGRlZmF1bHQtZm9yY2UpCiAgICAgIHRo \
ZW1lPSJkZWZhdWx0IgogICAgICA7OwogICAgbm9Db2xvcikgOzsKICAgICopCiAgICAgIExvZzo6 \
ZmF0YWwgImludmFsaWQgdGhlbWUgcHJvdmlkZWQiCiAgICAgIDs7CiAgZXNhYwogIGlmIFtbICIk \
e3RoZW1lfSIgPSAiZGVmYXVsdCIgXV07IHRoZW4KICAgIEJBU0hfRlJBTUVXT1JLX1RIRU1FPSJk \
ZWZhdWx0IgogICAgIyBjaGVjayBjb2xvcnMgYXBwbGljYWJsZSBodHRwczovL21pc2MuZmxvZ2lz \
b2Z0LmNvbS9iYXNoL3RpcF9jb2xvcnNfYW5kX2Zvcm1hdHRpbmcKICAgIF9fRVJST1JfQ09MT1I9 \
J1xlWzMxbScgICAgICAgICAjIFJlZAogICAgX19JTkZPX0NPTE9SPSdcZVs0NG0nICAgICAgICAg \
ICMgd2hpdGUgb24gbGlnaHRCbHVlCiAgICBfX1NVQ0NFU1NfQ09MT1I9J1xlWzMybScgICAgICAg \
IyBHcmVlbgogICAgX19XQVJOSU5HX0NPTE9SPSdcZVszM20nICAgICAgICMgWWVsbG93CiAgICBf \
X1NLSVBQRURfQ09MT1I9J1xlWzMzbScgICAgICAgIyBZZWxsb3cKICAgIF9fREVCVUdfQ09MT1I9 \
J1xlWzM3bScgICAgICAgICAjIEdyYXkKICAgIF9fSEVMUF9DT0xPUj0nXGVbNzs0OTszM20nICAg \
ICAjIEJsYWNrIG9uIEdvbGQKICAgIF9fVEVTVF9DT0xPUj0nXGVbMTAwbScgICAgICAgICAjIExp \
Z2h0IG1hZ2VudGEKICAgIF9fVEVTVF9FUlJPUl9DT0xPUj0nXGVbNDFtJyAgICAjIHdoaXRlIG9u \
IHJlZAogICAgX19IRUxQX1RJVExFX0NPTE9SPSJcZVsxOzM3bSIgICMgQm9sZAogICAgX19IRUxQ \
X09QVElPTl9DT0xPUj0iXGVbMTszNG0iICMgQmx1ZQogICAgIyBJbnRlcm5hbDogcmVzZXQgY29s \
b3IKICAgIF9fUkVTRVRfQ09MT1I9J1xlWzBtJyAjIFJlc2V0IENvbG9yCiAgICAjIHNoZWxsY2hl \
Y2sgZGlzYWJsZT1TQzIxNTUsU0MyMDM0CiAgICBfX0hFTFBfRVhBTVBMRT0iJChlY2hvIC1lICJc \
ZVsyOzk3bSIpIgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTU1LFNDMjAzNAogICAgX19I \
RUxQX1RJVExFPSIkKGVjaG8gLWUgIlxlWzE7MzdtIikiCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJs \
ZT1TQzIxNTUsU0MyMDM0CiAgICBfX0hFTFBfTk9STUFMPSIkKGVjaG8gLWUgIlwwMzNbMG0iKSIK \
ICBlbHNlCiAgICBCQVNIX0ZSQU1FV09SS19USEVNRT0ibm9Db2xvciIKICAgICMgY2hlY2sgY29s \
b3JzIGFwcGxpY2FibGUgaHR0cHM6Ly9taXNjLmZsb2dpc29mdC5jb20vYmFzaC90aXBfY29sb3Jz \
X2FuZF9mb3JtYXR0aW5nCiAgICBfX0VSUk9SX0NPTE9SPScnCiAgICBfX0lORk9fQ09MT1I9JycK \
ICAgIF9fU1VDQ0VTU19DT0xPUj0nJwogICAgX19XQVJOSU5HX0NPTE9SPScnCiAgICBfX1NLSVBQ \
RURfQ09MT1I9JycKICAgIF9fREVCVUdfQ09MT1I9JycKICAgIF9fSEVMUF9DT0xPUj0nJwogICAg \
X19URVNUX0NPTE9SPScnCiAgICBfX1RFU1RfRVJST1JfQ09MT1I9JycKICAgIF9fSEVMUF9USVRM \
RV9DT0xPUj0nJwogICAgX19IRUxQX09QVElPTl9DT0xPUj0nJwogICAgIyBJbnRlcm5hbDogcmVz \
ZXQgY29sb3IKICAgIF9fUkVTRVRfQ09MT1I9JycKICAgIF9fSEVMUF9FWEFNUExFPScnCiAgICBf \
X0hFTFBfVElUTEU9JycKICAgIF9fSEVMUF9OT1JNQUw9JycKICBmaQp9CiMgRlVOQ1RJT05TCgpv \
cHRpb25IZWxwQ2FsbGJhY2soKSB7CiAgInNpbXBsZUNvbW1hbmRIZWxwIgogIGV4aXQgMAp9Cgpj \
b3B5cmlnaHRDYWxsYmFjaygpIHsKICAjCiAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTU1LFND \
MjE1NCxTQzIyNTAKICBlY2hvICJDb3B5cmlnaHQgKGMpIDIwMjQtbm93IEZyYW5jb2lzIENoYXN0 \
YW5ldCIKfQoKRW52OjpyZXF1aXJlTG9hZCgpIHsKICBleHBvcnQgUkVRVUlSRV9GVU5DVElPTl9F \
TlZfUkVRVUlSRV9MT0FEX0xPQURFRD0xCn0KClVJOjpyZXF1aXJlVGhlbWUoKSB7CiAgZXhwb3J0 \
IFJFUVVJUkVfRlVOQ1RJT05fVUlfUkVRVUlSRV9USEVNRV9MT0FERUQ9MQp9CgpMb2c6OnJlcXVp \
cmVMb2FkKCkgewogIGV4cG9ydCBSRVFVSVJFX0ZVTkNUSU9OX0xPR19SRVFVSVJFX0xPQURfTE9B \
REVEPTEKfQoKZGVmYXVsdEJlZm9yZVBhcnNlQ2FsbGJhY2soKSB7CiAgRW52OjpyZXF1aXJlTG9h \
ZAogIFVJOjpyZXF1aXJlVGhlbWUKICBMb2c6OnJlcXVpcmVMb2FkCn0KCmJlZm9yZVBhcnNlQ2Fs \
bGJhY2soKSB7CiAgZGVmYXVsdEJlZm9yZVBhcnNlQ2FsbGJhY2sKfQoKZGVmYXVsdEFmdGVyUGFy \
c2VDYWxsYmFjaygpIHsKICA6Cn0KCmFmdGVyUGFyc2VDYWxsYmFjaygpIHsKICBkZWZhdWx0QWZ0 \
ZXJQYXJzZUNhbGxiYWNrCn0KCiMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjMxNyAjIGlmIGZ1bmN0 \
aW9uIGlzIG92ZXJyaWRkZW4Kb3B0aW9uVmVyc2lvbkNhbGxiYWNrKCkgewogICMgc2hlbGxjaGVj \
ayBkaXNhYmxlPVNDMjE1NAogIGVjaG8gIiR7U0NSSVBUX05BTUV9IHZlcnNpb24gMy4wIgogIGV4 \
aXQgMAp9CgoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBD \
b21tYW5kIHNpbXBsZUNvbW1hbmQKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0KCiMgb3B0aW9ucyB2YXJpYWJsZXMgaW5pdGlhbGl6YXRpb24KZGVjbGFyZSBvcHRp \
b25IZWxwPSIwIgpkZWNsYXJlIG9wdGlvblZlcnNpb249IjAiCiMgYXJndW1lbnRzIHZhcmlhYmxl \
cyBpbml0aWFsaXphdGlvbgojIEBkZXNjcmlwdGlvbiBwYXJzZSBjb21tYW5kIG9wdGlvbnMgYW5k \
IGFyZ3VtZW50cyBmb3Igc2ltcGxlQ29tbWFuZApzaW1wbGVDb21tYW5kUGFyc2UoKSB7CiAgTG9n \
OjpkaXNwbGF5RGVidWcgIkNvbW1hbmQgJHtTQ1JJUFRfTkFNRX0gLSBwYXJzZSBhcmd1bWVudHM6 \
ICR7QkFTSF9GUkFNRVdPUktfQVJHVlsqXX0iCiAgTG9nOjpkaXNwbGF5RGVidWcgIkNvbW1hbmQg \
JHtTQ1JJUFRfTkFNRX0gLSBwYXJzZSBmaWx0ZXJlZCBhcmd1bWVudHM6ICR7QkFTSF9GUkFNRVdP \
UktfQVJHVl9GSUxURVJFRFsqXX0iCiAgb3B0aW9uSGVscD0iMCIKICBsb2NhbCAtaSBvcHRpb25z \
X3BhcnNlX29wdGlvblBhcnNlZENvdW50T3B0aW9uSGVscAogICgob3B0aW9uc19wYXJzZV9vcHRp \
b25QYXJzZWRDb3VudE9wdGlvbkhlbHAgPSAwKSkgfHwgdHJ1ZQogIG9wdGlvblZlcnNpb249IjAi \
CiAgbG9jYWwgLWkgb3B0aW9uc19wYXJzZV9vcHRpb25QYXJzZWRDb3VudE9wdGlvblZlcnNpb24K \
ICAoKG9wdGlvbnNfcGFyc2Vfb3B0aW9uUGFyc2VkQ291bnRPcHRpb25WZXJzaW9uID0gMCkpIHx8 \
IHRydWUKCgogICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogIGxvY2FsIC1pIG9wdGlvbnNf \
cGFyc2VfcGFyc2VkQXJnSW5kZXg9MAogIHdoaWxlICgoJCMgPiAwKSk7IGRvCiAgICBsb2NhbCBv \
cHRpb25zX3BhcnNlX2FyZz0iJDEiCiAgICBsb2NhbCBhcmdPcHREZWZhdWx0QmVoYXZpb3I9MAog \
ICAgY2FzZSAiJHtvcHRpb25zX3BhcnNlX2FyZ30iIGluCiAgICAgICMgT3B0aW9uIDEvMgogICAg \
ICAjIG9wdGlvbkhlbHAgYWx0cyAtLWhlbHB8LWgKICAgICAgIyB0eXBlOiBCb29sZWFuIG1pbiAw \
IG1heCAxCiAgICAgIC0taGVscCB8IC1oKQogICAgICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVND \
MjAzNAogICAgICAgIG9wdGlvbkhlbHA9IjEiCgogICAgICAgIGlmICgob3B0aW9uc19wYXJzZV9v \
cHRpb25QYXJzZWRDb3VudE9wdGlvbkhlbHAgPj0gMSApKTsgdGhlbgogICAgICAgICAgTG9nOjpk \
aXNwbGF5RXJyb3IgIkNvbW1hbmQgJHtTQ1JJUFRfTkFNRX0gLSBPcHRpb24gJHtvcHRpb25zX3Bh \
cnNlX2FyZ30gLSBNYXhpbXVtIG51bWJlciBvZiBvcHRpb24gb2NjdXJyZW5jZXMgcmVhY2hlZCgx \
KSIKICAgICAgICAgIHJldHVybiAxCiAgICAgICAgZmkKICAgICAgICAoKCsrb3B0aW9uc19wYXJz \
ZV9vcHRpb25QYXJzZWRDb3VudE9wdGlvbkhlbHApKQogICAgICAgIG9wdGlvbkhlbHBDYWxsYmFj \
ayAiJHtvcHRpb25zX3BhcnNlX2FyZ30iICIke29wdGlvbkhlbHB9IgoKICAgICAgICA7OwoKICAg \
ICAgIyBPcHRpb24gMi8yCiAgICAgICMgb3B0aW9uVmVyc2lvbiBhbHRzIC0tdmVyc2lvbgogICAg \
ICAjIHR5cGU6IEJvb2xlYW4gbWluIDAgbWF4IDEKICAgICAgLS12ZXJzaW9uKQogICAgICAgICMg \
c2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgICAgIG9wdGlvblZlcnNpb249IjEiCgogICAg \
ICAgIGlmICgob3B0aW9uc19wYXJzZV9vcHRpb25QYXJzZWRDb3VudE9wdGlvblZlcnNpb24gPj0g \
MSApKTsgdGhlbgogICAgICAgICAgTG9nOjpkaXNwbGF5RXJyb3IgIkNvbW1hbmQgJHtTQ1JJUFRf \
TkFNRX0gLSBPcHRpb24gJHtvcHRpb25zX3BhcnNlX2FyZ30gLSBNYXhpbXVtIG51bWJlciBvZiBv \
cHRpb24gb2NjdXJyZW5jZXMgcmVhY2hlZCgxKSIKICAgICAgICAgIHJldHVybiAxCiAgICAgICAg \
ZmkKICAgICAgICAoKCsrb3B0aW9uc19wYXJzZV9vcHRpb25QYXJzZWRDb3VudE9wdGlvblZlcnNp \
b24pKQogICAgICAgIG9wdGlvblZlcnNpb25DYWxsYmFjayAiJHtvcHRpb25zX3BhcnNlX2FyZ30i \
ICIke29wdGlvblZlcnNpb259IgoKICAgICAgICA7OwoKICAgICAgLSopCiAgICAgICAgaWYgW1sg \
IiR7YXJnT3B0RGVmYXVsdEJlaGF2aW9yfSIgPSAiMCIgXV07IHRoZW4KICAgICAgICAgIExvZzo6 \
ZGlzcGxheUVycm9yICJDb21tYW5kICR7U0NSSVBUX05BTUV9IC0gSW52YWxpZCBvcHRpb24gJHtv \
cHRpb25zX3BhcnNlX2FyZ30iCiAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCiAgICAgICAg \
OzsKICAgICAgKikKICAgICAgICBpZiBbWyAiJHthcmdPcHREZWZhdWx0QmVoYXZpb3J9IiA9ICIw \
IiBdXTsgdGhlbgogICAgICAgICAgIyB0b28gbXVjaCBhcmdzIGFuZCBubyB1bmtub3duQXJndW1l \
bnRDYWxsYmFja3MgY29uZmlndXJlZAogICAgICAgICAgTG9nOjpkaXNwbGF5RXJyb3IgIkNvbW1h \
bmQgJHtTQ1JJUFRfTkFNRX0gLSBBcmd1bWVudCAtIHRvbyBtdWNoIGFyZ3VtZW50cyBwcm92aWRl \
ZDogJCoiCiAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCiAgICAgICAgKChpbmNyZW1lbnRB \
cmcgPSAwKSkKICAgICAgICBpZiAoKGluY3JlbWVudEFyZyA9PSAxKSk7IHRoZW4KICAgICAgICAg \
ICgoKytvcHRpb25zX3BhcnNlX3BhcnNlZEFyZ0luZGV4KSkKICAgICAgICBmaQogICAgICAgIDs7 \
CiAgICBlc2FjCiAgICBzaGlmdCB8fCB0cnVlCiAgZG9uZSB8fCByZXR1cm4gJD8KCn0KCiMgQGRl \
c2NyaXB0aW9uIGRpc3BsYXkgY29tbWFuZCBvcHRpb25zIGFuZCBhcmd1bWVudHMgaGVscCBmb3Ig \
c2ltcGxlQ29tbWFuZApzaW1wbGVDb21tYW5kSGVscCgpIHsKICBlY2hvIC1lICIke19fSEVMUF9U \
SVRMRV9DT0xPUn1TWU5PUFNJUzoke19fUkVTRVRfQ09MT1J9IgogIEFycmF5Ojp3cmFwMiAnICcg \
NzYgNCAiICAgICIgIkZpeCBsaW51eCBkYXRlIHVzaW5nIGdvb2dsZSIKICBlY2hvCiAgZWNobwoK \
ICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgdXNhZ2Ug \
c2VjdGlvbgogICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAg \
QXJyYXk6OndyYXAyICIgIiA4MCAyICIke19fSEVMUF9USVRMRV9DT0xPUn1VU0FHRToke19fUkVT \
RVRfQ09MT1J9IiAic2ltcGxlQ29tbWFuZCBbT1BUSU9OU10gIgogIGVjaG8KICAjIC0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgdXNhZ2Uvb3B0aW9ucyBzZWN0 \
aW9uCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICBvcHRp \
b25zQWx0TGlzdD0oIlstLWhlbHB8LWhdIiAiWy0tdmVyc2lvbl0iCiAgKQogIEFycmF5Ojp3cmFw \
MiAiICIgODAgMiAiJHtfX0hFTFBfVElUTEVfQ09MT1J9VVNBR0U6JHtfX1JFU0VUX0NPTE9SfSIg \
XAogICAgInNpbXBsZUNvbW1hbmQiICIke29wdGlvbnNBbHRMaXN0W0BdfSIKICBlY2hvCgogICMg \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgIyBvcHRpb25zIHNl \
Y3Rpb24KICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIGVj \
aG8KICBlY2hvIC1lICIke19fSEVMUF9USVRMRV9DT0xPUn1HTE9CQUwgT1BUSU9OUzoke19fUkVT \
RVRfQ09MT1J9IgogIGVjaG8gLWUgIiAgJHtfX0hFTFBfT1BUSU9OX0NPTE9SfS0taGVscCR7X19I \
RUxQX05PUk1BTH0sICR7X19IRUxQX09QVElPTl9DT0xPUn0taCR7X19IRUxQX05PUk1BTH0ge3Np \
bmdsZX0iCiAgQXJyYXk6OndyYXAyICcgJyA3NiA0ICIgICAgIiAiRGlzcGxheXMgdGhpcyBjb21t \
YW5kIGhlbHAiCiAgZWNobwoKCiAgZWNobyAtZSAiICAke19fSEVMUF9PUFRJT05fQ09MT1J9LS12 \
ZXJzaW9uJHtfX0hFTFBfTk9STUFMfSB7c2luZ2xlfSIKICBBcnJheTo6d3JhcDIgJyAnIDc2IDQg \
IiAgICAiICJQcmludCB2ZXJzaW9uIGluZm9ybWF0aW9uIGFuZCBxdWl0LiIKICBlY2hvCgogICMg \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgIyBsb25nRGVzY3Jp \
cHRpb24gc2VjdGlvbgogICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tCiAgZWNobwogIGVjaG8KICBlY2hvIC1lICIke19fSEVMUF9USVRMRV9DT0xPUn1ERVNDUklQ \
VElPTjoke19fUkVTRVRfQ09MT1J9IgogIGRlY2xhcmUgLWEgc2ltcGxlQ29tbWFuZExvbmdEZXNj \
cmlwdGlvbj0oCiAgIkNhbiBiZSB1c2VmdWwgb24gd3NsIHdoZW4gZGF0ZSBpcyBub3Qgc3luY2hy \
b25pemVkIHdpdGggaG9zdCIKICApCiAgQXJyYXk6OndyYXAyICcgJyA3NiAwICIke3NpbXBsZUNv \
bW1hbmRMb25nRGVzY3JpcHRpb25bQF19IgogIGVjaG8KICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgdmVyc2lvbiBzZWN0aW9uCiAgIyAtLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICBlY2hvCiAgZWNobyAtbiAtZSAiJHtf \
X0hFTFBfVElUTEVfQ09MT1J9VkVSU0lPTjogJHtfX1JFU0VUX0NPTE9SfSIKICBlY2hvICIzLjAi \
CiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAjIGF1dGhv \
ciBzZWN0aW9uCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K \
ICBlY2hvCiAgZWNobyAtbiAtZSAiJHtfX0hFTFBfVElUTEVfQ09MT1J9QVVUSE9SOiAke19fUkVT \
RVRfQ09MT1J9IgogIGVjaG8gIltGcmFuY29pcyBDaGFzdGFuZXRdKGh0dHBzOi8vZ2l0aHViLmNv \
bS9mY2hhc3RhbmV0KSIKICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLQogICMgc291cmNlRmlsZSBzZWN0aW9uCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0KICBlY2hvCiAgZWNobyAtbiAtZSAiJHtfX0hFTFBfVElUTEVfQ09M \
T1J9U09VUkNFIEZJTEU6ICR7X19SRVNFVF9DT0xPUn0iCiAgZWNobyAiaHR0cHM6Ly9naXRodWIu \
Y29tL2ZjaGFzdGFuZXQvYmFzaC1kZXYtZW52L3RyZWUvbWFzdGVyL3NyYy9fdG9vbHMvZml4V3Ns \
RGF0ZS1iaW5hcnkueWFtbCIKICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLQogICMgbGljZW5zZSBzZWN0aW9uCiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t \
LS0tLS0tLS0tLS0tLS0tLS0KICBlY2hvCiAgZWNobyAtbiAtZSAiJHtfX0hFTFBfVElUTEVfQ09M \
T1J9TElDRU5TRTogJHtfX1JFU0VUX0NPTE9SfSIKICBlY2hvICJNSVQgTGljZW5zZSIKICAjIC0t \
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICMgY29weXJpZ2h0IHNl \
Y3Rpb24KICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIEFy \
cmF5Ojp3cmFwMiAnICcgNzYgMCAiJChjb3B5cmlnaHRDYWxsYmFjaykiCn0KCgpiZWZvcmVQYXJz \
ZUNhbGxiYWNrCgpzaW1wbGVDb21tYW5kUGFyc2UgIiRAIgpNQUlOX0ZVTkNUSU9OX05BTUU9Im1h \
aW4iCm1haW4oKSB7CgpMaW51eDo6cmVxdWlyZUV4ZWN1dGVkQXNSb290CmdldERhdGUoKSB7CiAg \
d2dldCAtLW1ldGhvZD1IRUFEIC1xU08tIC0tbWF4LXJlZGlyZWN0PTAgZ29vZ2xlLmNvbSAyPiYx \
IHwKICAgIHNlZCAtbiAncy9eICpEYXRlOiAqLy9wJwp9CmRhdGUgLXMgIiQoZ2V0RGF0ZSkiICY+ \
L2Rldi9udWxsCgp9CgojIGlmIGZpbGUgaXMgc291cmNlZCBhdm9pZCBjYWxsaW5nIG1haW4gZnVu \
Y3Rpb24KIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMTc4CkJBU0hfU09VUkNFPSIuJDAiICMgY2Fu \
bm90IGJlIGNoYW5nZWQgaW4gYmFzaAojIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIxMjgKaWYgdGVz \
dCAiLiQwIiA9PSAiLiR7QkFTSF9TT1VSQ0V9IjsgdGhlbgogIGlmIFtbICIke0JBU0hfRlJBTUVX \
T1JLX1FVSUVUX01PREU6LTB9IiA9ICIxIiBdXTsgdGhlbgogICAgbWFpbiAiJEAiICY+L2Rldi9u \
dWxsCiAgZWxzZQogICAgbWFpbiAiJEAiCiAgZmkKZmkK" \
  "755"

declare -gx embed_file_fixWslDate="${PERSISTENT_TMPDIR:-/tmp}/328a4f76d2a4954447c5f6e54137cf1cec5a0459a87a50ac89057816c1d6b9c1/fixWslDate"


helpDescription() {
  echo "Default configuration for bash"
}

dependencies() {
  echo "installScripts/Bat"
  echo "installScripts/Fasd"
  # font needed for displaying bash prompt
  echo "installScripts/Font"
  echo "installScripts/Fzf"
  echo "installScripts/Vim"
}

fortunes() {
  if [[ "${USER_SHELL}" = "/usr/bin/bash" ]]; then
    if command -v zsh &>/dev/null; then
      echo -e "${__INFO_COLOR}$(scriptName)${__RESET_COLOR} -- ${__HELP_EXAMPLE}Bash${__RESET_COLOR} is set as default shell, you can switch to zsh using ${__HELP_EXAMPLE}chsh -s /usr/bin/zsh${__RESET_COLOR}."
      echo "%"
    fi
  fi
  if Assert::wsl; then
    echo -e "${__INFO_COLOR}$(scriptName)${__RESET_COLOR} -- ${__HELP_EXAMPLE}view${__RESET_COLOR} alias allows to launch given file using default windows file association."
    echo "%"
  fi
}

# jscpd:ignore-start
listVariables() { :; }
helpVariables() { :; }
defaultVariables() { :; }
checkVariables() { :; }
breakOnConfigFailure() { :; }
breakOnTestFailure() { :; }
# jscpd:ignore-end

install() {
  Linux::Apt::installIfNecessary --no-install-recommends \
    bash-completion
}

testInstall() {
  Assert::fileExists /etc/profile.d/bash_completion.sh root root || return 1
}

configure() {
  if [[ "${PREFERRED_SHELL}" = "ShellBash" ]]; then
    if [[ "${USER_SHELL}" != "/usr/bin/bash" ]]; then
      usermod --shell /usr/bin/bash "${USERNAME}"
      USER_SHELL="/usr/bin/bash"
      Log::displayHelp "You have to log in/log out to make bash by default"
    fi
    if command -v zsh &>/dev/null; then
      Log::displayHelp "Bash is set as default shell, you can switch back to zsh using 'chsh -s /usr/bin/zsh'"
    fi
  fi

  mkdir -p "${HOME}/.bash-dev-env/interactive.d" || return 1
  Retry::default curl -o "${HOME}/.bash-dev-env/interactive.d/git-prompt.sh" \
    https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh || return 1
  chmod +x "${HOME}/.bash-dev-env/interactive.d/git-prompt.sh"

  local configDir
  # shellcheck disable=SC2154
  configDir="$(Conf::getOverriddenDir "${embed_dir_conf_dir}" "$(fullScriptOverrideDir)")"

  # shellcheck disable=SC2154
  Conf::copyStructure \
    "${configDir}" \
    "$(fullScriptOverrideDir)" \
    ".bash-dev-env"

  Conf::copyStructure \
    "${configDir}" \
    "$(fullScriptOverrideDir)" \
    ".vscode"

  Conf::copyStructure \
    "${configDir}" \
    "$(fullScriptOverrideDir)" \
    "home" \
    "${HOME}"

  SUDO=sudo Install::file \
    "${configDir}/home/.vimrc" "/root/.vimrc" root root
  SUDO=sudo Install::file \
    "${configDir}/home/.inputrc" "/root/.inputrc" root root
  # shellcheck disable=SC2154
  OVERWRITE_CONFIG_FILES=1 Install::file \
    "${embed_file_findConfigFiles}" \
    "${HOME}/.bash-dev-env/findConfigFiles"
  # shellcheck disable=SC2154
  OVERWRITE_CONFIG_FILES=1 Install::file \
    "${embed_file_fixWslDate}" \
    "${HOME}/.bash-dev-env/fixWslDate"
  Log::displayInfo "Creating sudoer file for fixWslDate command ..."
  local sudoerFile="/etc/sudoers.d/bash-dev-env-fixWslDate-no-password"
  echo "${USERNAME} ALL=(ALL) NOPASSWD: ${HOME}/.bash-dev-env/fixWslDate" |
    sudo tee "${sudoerFile}" >/dev/null
  sudo chmod 0440 "${sudoerFile}"

  Log::displayInfo "disable bell"
  sudo sed -i -e 's/;set bell-style none/set bell-style none/g' /etc/inputrc
}

testConfigure() {
  local -i failures=0
  Assert::fileExists "${HOME}/.bash-dev-env/interactive.d/git-prompt.sh" || ((++failures))

  Assert::fileExists "${HOME}/.bash_logout" || ((++failures))
  Assert::fileExists "${HOME}/.bashrc" || ((++failures))
  Assert::fileExists "${HOME}/.dir_colors" || ((++failures))
  Assert::fileExists "${HOME}/.inputrc" || ((++failures))
  Assert::fileExists "${HOME}/.profile" || ((++failures))
  Assert::fileExists "${HOME}/.vimrc" || ((++failures))

  SUDO=sudo Assert::fileExists /root/.vimrc root root || ((++failures))
  SUDO=sudo Assert::fileExists /root/.inputrc root root || ((++failures))

  Assert::fileExists "${HOME}/.bash-dev-env/findConfigFiles" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/aliases.d/colors.sh" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/aliases.d/filesDirectory.sh" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/aliases.d/miscellaneous.sh" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/aliases.d/ssh.sh" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/aliases.d/xserver.sh" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/aliases.d/DISCLAIMER.md" || ((++failures))

  Assert::fileExists "${HOME}/.bash-dev-env/completions.d/makeTargets.bash" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/completions.d/DISCLAIMER.md" || ((++failures))

  Assert::fileExists "${HOME}/.bash-dev-env/interactive.d/zzz_bash_prompt.bash" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/interactive.d/bash_navigation.bash" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/interactive.d/dir_colors.bash" || ((++failures))
  Assert::fileExists "${HOME}/.bash-dev-env/interactive.d/DISCLAIMER.md" || ((++failures))

  Assert::fileExists "${HOME}/.bash-dev-env/profile.d/DISCLAIMER.md" || ((++failures))

  Assert::fileExists "${HOME}/.vscode/argv.json" || ((++failures))
  Assert::fileExists "${HOME}/.vscode/settings.json" || ((++failures))

  # check font in windows terminal configuration
  local terminalConfSettingsPath
  terminalConfSettingsPath="$(Conf::getWindowsTerminalPath)/LocalState/settings.json"
  if [[ -f "${terminalConfSettingsPath}" ]]; then
    if ! grep -q '"face": "MesloLGS NF"' "${terminalConfSettingsPath}"; then
      local terminalConfSettingsWPath
      Linux::Wsl::cachedWslpath2 terminalConfSettingsWPath -w "${terminalConfSettingsPath}"
      Log::displayHelp "Please change your terminal settings(${terminalConfSettingsWPath}) to use font 'MesloLGS NF' for wsl profile"
    fi
  else
    Log::displayHelp "File ${terminalConfSettingsPath} does not exist - please use windows terminal for better shell display results"
  fi

  return "${failures}"
}



softwareArgHelpFunction() {
  echo "    List of softwares to install (--profile option cannot be used in this case)"
  echo "    See below for complete list of softwares available"
}

profileHelpFunction() {
  echo "    Profile name to use that contains all the softwares to install"
}

profilesHelpList() {
  echo -e "  ${__HELP_TITLE_COLOR}Available profiles:${__RESET_COLOR}"
  (
    Conf::list "${BASH_DEV_ENV_ROOT_DIR}/profiles" "profile." ".sh" "-type f" "    - "
    local dir
    for dir in "${BASH_DEV_ENV_ROOT_DIR}/srcAlt/"*; do
      if [[ -d "${dir}/profiles" ]]; then
        Conf::list "${dir}/profiles" "profile." ".sh" "-type f" "    - "
      fi
    done
  ) | sort | uniq
}

validateProfile() {
  local profileName="$2"
  if ! Profiles::getProfilePath "${profileName}" &>/dev/null; then
    Log::fatal "Profile file profile.${profileName}.sh doesn't exist in any profiles directory"
  fi
}

commandCallback() {
  if ((${#CONFIG_LIST} > 0)); then
    if [[ -n "${PROFILE}" ]]; then
      Log::fatal "You cannot combine profile and softwares"
    fi
    # check if each Softwares exists
    local software
    for software in "${CONFIG_LIST[@]}"; do
      if [[ ! -f "${BASH_DEV_ENV_ROOT_DIR}/${software}" ]]; then
        Log::fatal "Software ${software} configuration does not exists"
      fi
    done
  elif [[ -z "${PROFILE}" ]]; then
    Log::fatal "You must specify either a list of softwares, either a profile name"
  else
    # get profile path
    local profilePath
    profilePath="$(Profiles::getProfilePath "${PROFILE}")" # should succeed as it was tested by option
    # load selected profile
    Profiles::loadProfile "${profilePath}"
  fi
  if [[ "${SKIP_DEPENDENCIES:-0}" = "0" ]]; then
    CONFIG_LIST=("${CONFIG_LIST[@]}")

    declare rootDependency="your software selection"
    if [[ -n "${PROFILE}" ]]; then
      rootDependency="profile ${PROFILE}"
    fi
    # deduce dependencies
    declare -ag allDepsResult=()
    # shellcheck disable=SC2034
    declare -Ag allDepsResultSeen=()
    Profiles::allDepsRecursive \
      "${BASH_DEV_ENV_ROOT_DIR}" "${rootDependency}" "${CONFIG_LIST[@]}"

    CONFIG_LIST=("${allDepsResult[@]}")
  fi
  if ((${#CONFIG_LIST} == 0)); then
    Log::fatal "Softwares list is empty"
  fi
}

export CONFIG_LIST
export PROFILE



generateSoftwaresList() {
  local directory="$1"
  local relativeDir="$2"
  local description list softName

  list="$(
    Conf::list "${directory}" "" "" "-type f" "" |
      grep -v -E '^(_.*|MandatorySoftwares)$' || true
  )"
  local -i maxLineLength
  maxLineLength="$(wc -L <<<"${list}")"
  ((maxLineLength += 1 + ${#relativeDir}))
  while read -r soft; do
    softName="${soft}"
    description="$(SKIP_REQUIRES=1 "${directory}/${soft}" helpDescription 2>/dev/null)"
    if [[ -z "${description}" ]]; then
      description="<No description available>"
    fi
    description="$(printf -- '_%.0s' $(seq "$((maxLineLength - ${#softName} - 1 - ${#relativeDir} + 1))")) ${description}"
    description="  - ${__HELP_TITLE_COLOR}${relativeDir}/${softName} ${__HELP_EXAMPLE}${description}${__RESET_COLOR}"
    echo -e " ${description}" | sed '2,$s/^/      /'
  done <<<"${list}"
}

softwaresListCacheFile() {
  local relativeDir="$1"
  directoryName="$(sed -E 's#/#_#g' <<<"${relativeDir}")"
  echo "${WSL_TMPDIR:-${PERSISTENT_TMPDIR:-/tmp}}/bash_dev_env_${directoryName}_arg_help_cache"
}

generateSoftwaresListCache() {
  local directory="$1"
  local relativeDir="$2"
  local softwaresListHelpTempFile="$3"

  if [[ ! -f "${softwaresListHelpTempFile}" ]] ||
    (($(File::elapsedTimeSinceLastModification "${softwaresListHelpTempFile}") > help_cache_max_duration)); then
    echo >&2 -n "Generating softwares list cache (directory ${relativeDir}) ..."
    generateSoftwaresList "${directory}" "${relativeDir}" >"${softwaresListHelpTempFile}" || rm -f "${softwaresListHelpTempFile}"
    echo >&2 -e "\033[2K" # erase line (Generating softwares list cache ...)
  fi
}

displayAvailableSoftwares() {
  local directory="$1"

  local relativeDir
  relativeDir="$(File::relativeToDir "${directory}" "${BASH_DEV_ENV_ROOT_DIR}")"
  local softwaresListHelpTempFile
  softwaresListHelpTempFile="$(softwaresListCacheFile "${relativeDir}")"
  generateSoftwaresListCache "${directory}" "${relativeDir}" "${softwaresListHelpTempFile}"
  echo -e "  ${__HELP_TITLE_COLOR}Available Softwares (directory ${relativeDir}):${__RESET_COLOR}"
  cat "${softwaresListHelpTempFile}"
}

declare -i help_cache_max_duration=86400



optionHelpCallback() {
  "ShellBashDefaultConfigCommandHelp"
  exit 0
}

defaultBeforeParseCallback() {
  Env::requireLoad
  UI::requireTheme
  Log::requireLoad
  Linux::requireUbuntu
  Linux::Wsl::requireWsl
}

beforeParseCallback() {
  defaultBeforeParseCallback
}

defaultAfterParseCallback() {
  Engine::Config::loadConfig
}

afterParseCallback() {
  defaultAfterParseCallback
}


# ------------------------------------------
# Command ShellBashDefaultConfigCommand
# ------------------------------------------

# options variables initialization
declare SKIP_CONFIGURE="0"
declare SKIP_INSTALL="0"
declare SKIP_TEST="0"
declare SKIP_DEPENDENCIES="0"
declare PREPARE_EXPORT="0"
declare PROFILE=""
declare optionHelp="0"
declare optionConfig="0"
declare optionBashFrameworkConfig=""
declare optionInfoVerbose="0"
declare optionDebugVerbose="0"
declare optionTraceVerbose="0"
declare optionLogLevel="optionLogLevelDefaultValueFunction"
declare optionLogFile="optionLogFileDefaultValueFunction"
declare optionDisplayLevel="optionDisplayLevelDefaultValueFunction"
declare optionNoColor="0"
declare optionTheme="default"
declare optionVersion="0"
declare optionQuiet="0"
# arguments variables initialization
declare command="install"
# @description parse command options and arguments for ShellBashDefaultConfigCommand
ShellBashDefaultConfigCommandParse() {
  Log::displayDebug "Command ${SCRIPT_NAME} - parse arguments: ${BASH_FRAMEWORK_ARGV[*]}"
  Log::displayDebug "Command ${SCRIPT_NAME} - parse filtered arguments: ${BASH_FRAMEWORK_ARGV_FILTERED[*]}"
  SKIP_CONFIGURE="0"
  local -i options_parse_optionParsedCountSKIP_CONFIGURE
  ((options_parse_optionParsedCountSKIP_CONFIGURE = 0)) || true
  SKIP_INSTALL="0"
  local -i options_parse_optionParsedCountSKIP_INSTALL
  ((options_parse_optionParsedCountSKIP_INSTALL = 0)) || true
  SKIP_TEST="0"
  local -i options_parse_optionParsedCountSKIP_TEST
  ((options_parse_optionParsedCountSKIP_TEST = 0)) || true
  SKIP_DEPENDENCIES="0"
  local -i options_parse_optionParsedCountSKIP_DEPENDENCIES
  ((options_parse_optionParsedCountSKIP_DEPENDENCIES = 0)) || true
  PREPARE_EXPORT="0"
  local -i options_parse_optionParsedCountPREPARE_EXPORT
  ((options_parse_optionParsedCountPREPARE_EXPORT = 0)) || true
  PROFILE=""
  local -i options_parse_optionParsedCountPROFILE
  ((options_parse_optionParsedCountPROFILE = 0)) || true
  optionHelp="0"
  local -i options_parse_optionParsedCountOptionHelp
  ((options_parse_optionParsedCountOptionHelp = 0)) || true
  optionConfig="0"
  local -i options_parse_optionParsedCountOptionConfig
  ((options_parse_optionParsedCountOptionConfig = 0)) || true
  optionBashFrameworkConfig=""
  local -i options_parse_optionParsedCountOptionBashFrameworkConfig
  ((options_parse_optionParsedCountOptionBashFrameworkConfig = 0)) || true
  optionInfoVerbose="0"
  local -i options_parse_optionParsedCountOptionInfoVerbose
  ((options_parse_optionParsedCountOptionInfoVerbose = 0)) || true
  optionDebugVerbose="0"
  local -i options_parse_optionParsedCountOptionDebugVerbose
  ((options_parse_optionParsedCountOptionDebugVerbose = 0)) || true
  optionTraceVerbose="0"
  local -i options_parse_optionParsedCountOptionTraceVerbose
  ((options_parse_optionParsedCountOptionTraceVerbose = 0)) || true
  optionLogLevel="optionLogLevelDefaultValueFunction"
  local -i options_parse_optionParsedCountOptionLogLevel
  ((options_parse_optionParsedCountOptionLogLevel = 0)) || true
  optionLogFile="optionLogFileDefaultValueFunction"
  local -i options_parse_optionParsedCountOptionLogFile
  ((options_parse_optionParsedCountOptionLogFile = 0)) || true
  optionDisplayLevel="optionDisplayLevelDefaultValueFunction"
  local -i options_parse_optionParsedCountOptionDisplayLevel
  ((options_parse_optionParsedCountOptionDisplayLevel = 0)) || true
  optionNoColor="0"
  local -i options_parse_optionParsedCountOptionNoColor
  ((options_parse_optionParsedCountOptionNoColor = 0)) || true
  optionTheme="default"
  local -i options_parse_optionParsedCountOptionTheme
  ((options_parse_optionParsedCountOptionTheme = 0)) || true
  optionVersion="0"
  local -i options_parse_optionParsedCountOptionVersion
  ((options_parse_optionParsedCountOptionVersion = 0)) || true
  optionQuiet="0"
  local -i options_parse_optionParsedCountOptionQuiet
  ((options_parse_optionParsedCountOptionQuiet = 0)) || true

  command="install"

  local -i options_parse_argParsedCountCommand
  ((options_parse_argParsedCountCommand = 0)) || true


  # shellcheck disable=SC2034
  local -i options_parse_parsedArgIndex=0
  while (($# > 0)); do
    local options_parse_arg="$1"
    local argOptDefaultBehavior=0
    case "${options_parse_arg}" in
      # Option 1/19
      # SKIP_CONFIGURE alts --skip-config|--skip-configure|--skip-configuration|-sc
      # type: Boolean min 0 max 1
      --skip-config | --skip-configure | --skip-configuration | -sc)
        # shellcheck disable=SC2034
        SKIP_CONFIGURE="1"

        if ((options_parse_optionParsedCountSKIP_CONFIGURE >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_CONFIGURE))
        ;;

      # Option 2/19
      # SKIP_INSTALL alts --skip-install|--skip-installation|-si
      # type: Boolean min 0 max 1
      --skip-install | --skip-installation | -si)
        # shellcheck disable=SC2034
        SKIP_INSTALL="1"

        if ((options_parse_optionParsedCountSKIP_INSTALL >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_INSTALL))
        ;;

      # Option 3/19
      # SKIP_TEST alts --skip-test|--skip-tests|-st
      # type: Boolean min 0 max 1
      --skip-test | --skip-tests | -st)
        # shellcheck disable=SC2034
        SKIP_TEST="1"

        if ((options_parse_optionParsedCountSKIP_TEST >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_TEST))
        ;;

      # Option 4/19
      # SKIP_DEPENDENCIES alts --skip-deps|--skip-dependencies|-sd
      # type: Boolean min 0 max 1
      --skip-deps | --skip-dependencies | -sd)
        # shellcheck disable=SC2034
        SKIP_DEPENDENCIES="1"

        if ((options_parse_optionParsedCountSKIP_DEPENDENCIES >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountSKIP_DEPENDENCIES))
        ;;

      # Option 5/19
      # PREPARE_EXPORT alts --prepare-export|-e
      # type: Boolean min 0 max 1
      --prepare-export | -e)
        # shellcheck disable=SC2034
        PREPARE_EXPORT="1"

        if ((options_parse_optionParsedCountPREPARE_EXPORT >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountPREPARE_EXPORT))
        ;;

      # Option 6/19
      # PROFILE alts --profile|-p
      # type: String min 0 max 1
      --profile | -p)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi

        if ((options_parse_optionParsedCountPROFILE >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountPROFILE))
        # shellcheck disable=SC2034
        PROFILE="$1"
        validateProfile "${options_parse_arg}" "${PROFILE}"

        ;;

      # Option 7/19
      # optionHelp alts --help|-h
      # type: Boolean min 0 max 1
      --help | -h)
        # shellcheck disable=SC2034
        optionHelp="1"

        if ((options_parse_optionParsedCountOptionHelp >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionHelp))
        optionHelpCallback "${options_parse_arg}" "${optionHelp}"

        ;;

      # Option 8/19
      # optionConfig alts --config
      # type: Boolean min 0 max 1
      --config)
        # shellcheck disable=SC2034
        optionConfig="1"

        if ((options_parse_optionParsedCountOptionConfig >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionConfig))
        ;;

      # Option 9/19
      # optionBashFrameworkConfig alts --bash-framework-config
      # type: String min 0 max 1
      --bash-framework-config)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionBashFrameworkConfig >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionBashFrameworkConfig))
        # shellcheck disable=SC2034
        optionBashFrameworkConfig="$1"
        optionBashFrameworkConfigCallback "${options_parse_arg}" "${optionBashFrameworkConfig}"

        ;;

      # Option 10/19
      # optionInfoVerbose alts --verbose|-v
      # type: Boolean min 0 max 1
      --verbose | -v)
        # shellcheck disable=SC2034
        optionInfoVerbose="1"

        if ((options_parse_optionParsedCountOptionInfoVerbose >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionInfoVerbose))
        optionInfoVerboseCallback "${options_parse_arg}" "${optionInfoVerbose}"

        updateArgListInfoVerboseCallback "${options_parse_arg}" "${optionInfoVerbose}"

        ;;

      # Option 11/19
      # optionDebugVerbose alts -vv
      # type: Boolean min 0 max 1
      -vv)
        # shellcheck disable=SC2034
        optionDebugVerbose="1"

        if ((options_parse_optionParsedCountOptionDebugVerbose >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionDebugVerbose))
        optionDebugVerboseCallback "${options_parse_arg}" "${optionDebugVerbose}"

        updateArgListDebugVerboseCallback "${options_parse_arg}" "${optionDebugVerbose}"

        ;;

      # Option 12/19
      # optionTraceVerbose alts -vvv
      # type: Boolean min 0 max 1
      -vvv)
        # shellcheck disable=SC2034
        optionTraceVerbose="1"

        if ((options_parse_optionParsedCountOptionTraceVerbose >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionTraceVerbose))
        optionTraceVerboseCallback "${options_parse_arg}" "${optionTraceVerbose}"

        updateArgListTraceVerboseCallback "${options_parse_arg}" "${optionTraceVerbose}"

        ;;

      # Option 13/19
      # optionLogLevel alts --log-level
      # type: String min 0 max 1
      # authorizedValues: OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE
      --log-level)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi
        if [[ ! "$1" =~ OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(OFF, ERR, ERROR, WARN, WARNING, INFO, DEBUG, TRACE)"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionLogLevel >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionLogLevel))
        # shellcheck disable=SC2034
        optionLogLevel="$1"
        optionLogLevelCallback "${options_parse_arg}" "${optionLogLevel}"

        updateArgListLogLevelCallback "${options_parse_arg}" "${optionLogLevel}"

        ;;

      # Option 14/19
      # optionLogFile alts --log-file
      # type: String min 0 max 1
      --log-file)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionLogFile >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionLogFile))
        # shellcheck disable=SC2034
        optionLogFile="$1"
        optionLogFileCallback "${options_parse_arg}" "${optionLogFile}"

        updateArgListLogFileCallback "${options_parse_arg}" "${optionLogFile}"

        ;;

      # Option 15/19
      # optionDisplayLevel alts --display-level
      # type: String min 0 max 1
      # authorizedValues: OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE
      --display-level)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi
        if [[ ! "$1" =~ OFF|ERR|ERROR|WARN|WARNING|INFO|DEBUG|TRACE ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(OFF, ERR, ERROR, WARN, WARNING, INFO, DEBUG, TRACE)"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionDisplayLevel >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionDisplayLevel))
        # shellcheck disable=SC2034
        optionDisplayLevel="$1"
        optionDisplayLevelCallback "${options_parse_arg}" "${optionDisplayLevel}"

        updateArgListDisplayLevelCallback "${options_parse_arg}" "${optionDisplayLevel}"

        ;;

      # Option 16/19
      # optionNoColor alts --no-color
      # type: Boolean min 0 max 1
      --no-color)
        # shellcheck disable=SC2034
        optionNoColor="1"

        if ((options_parse_optionParsedCountOptionNoColor >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionNoColor))
        optionNoColorCallback "${options_parse_arg}" "${optionNoColor}"

        updateArgListNoColorCallback "${options_parse_arg}" "${optionNoColor}"

        ;;

      # Option 17/19
      # optionTheme alts --theme
      # type: String min 0 max 1
      # authorizedValues: default|default-force|noColor
      --theme)
        shift
        if (($# == 0)); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - a value needs to be specified"
          return 1
        fi
        if [[ ! "$1" =~ default|default-force|noColor ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - value '$1' is not part of authorized values(default, default-force, noColor)"
          return 1
        fi

        if ((options_parse_optionParsedCountOptionTheme >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionTheme))
        # shellcheck disable=SC2034
        optionTheme="$1"
        optionThemeCallback "${options_parse_arg}" "${optionTheme}"

        updateArgListThemeCallback "${options_parse_arg}" "${optionTheme}"

        ;;

      # Option 18/19
      # optionVersion alts --version
      # type: Boolean min 0 max 1
      --version)
        # shellcheck disable=SC2034
        optionVersion="1"

        if ((options_parse_optionParsedCountOptionVersion >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionVersion))
        optionVersionCallback "${options_parse_arg}" "${optionVersion}"

        ;;

      # Option 19/19
      # optionQuiet alts --quiet|-q
      # type: Boolean min 0 max 1
      --quiet | -q)
        # shellcheck disable=SC2034
        optionQuiet="1"

        if ((options_parse_optionParsedCountOptionQuiet >= 1 )); then
          Log::displayError "Command ${SCRIPT_NAME} - Option ${options_parse_arg} - Maximum number of option occurrences reached(1)"
          return 1
        fi
        ((++options_parse_optionParsedCountOptionQuiet))
        optionQuietCallback "${options_parse_arg}" "${optionQuiet}"

        updateArgListQuietCallback "${options_parse_arg}" "${optionQuiet}"

        ;;

      -*)
        if [[ "${argOptDefaultBehavior}" = "0" ]]; then
          Log::displayError "Command ${SCRIPT_NAME} - Invalid option ${options_parse_arg}"
          return 1
        fi
        ;;
      *)
        ((minParsedArgIndex0 = 0)) || true
        ((maxParsedArgIndex0 = 0)) || true
        ((minParsedArgIndex1 = minParsedArgIndex0 + 0)) || true
        ((maxParsedArgIndex1 = maxParsedArgIndex0 + 1)) || true
        ((incrementArg = 1 ))
        if ((0)); then
          # Technical if - never reached
          :

        # Argument 1/1 - command
        # Argument command min 0 max 1
        # Argument command authorizedValues: isInterfaceImplemented|helpDescription|scriptName|dependencies|listVariables|fortunes|helpVariables|defaultVariables|checkVariables|breakOnConfigFailure|breakOnTestFailure|isInstallImplemented|install|isTestInstallImplemented|testInstall|isConfigureImplemented|configure|isTestConfigureImplemented|testConfigure|isCleanBeforeExportImplemented
        elif (( options_parse_parsedArgIndex >= minParsedArgIndex0 &&
          options_parse_parsedArgIndex < maxParsedArgIndex1 )); then
          if [[ ! "${options_parse_arg}" =~ isInterfaceImplemented|helpDescription|scriptName|dependencies|listVariables|fortunes|helpVariables|defaultVariables|checkVariables|breakOnConfigFailure|breakOnTestFailure|isInstallImplemented|install|isTestInstallImplemented|testInstall|isConfigureImplemented|configure|isTestConfigureImplemented|testConfigure|isCleanBeforeExportImplemented ]]; then
            Log::displayError "Command ${SCRIPT_NAME} - Argument command - value '${options_parse_arg}' is not part of authorized values(isInterfaceImplemented, helpDescription, scriptName, dependencies, listVariables, fortunes, helpVariables, defaultVariables, checkVariables, breakOnConfigFailure, breakOnTestFailure, isInstallImplemented, install, isTestInstallImplemented, testInstall, isConfigureImplemented, configure, isTestConfigureImplemented, testConfigure, isCleanBeforeExportImplemented)"
            return 1
          fi
          if ((options_parse_argParsedCountCommand >= 1 )); then
            Log::displayError "Command ${SCRIPT_NAME} - Argument command - Maximum number of argument occurrences reached(1)"
            return 1
          fi
          ((++options_parse_argParsedCountCommand))
          # shellcheck disable=SC2034
          command="${options_parse_arg}"
          argsInstallScriptCommandCallback "${command}" -- "${@:2}"


        # else too much args
        else


          if [[ "${argOptDefaultBehavior}" = "0" ]]; then
            # too much args and no unknownArgumentCallbacks configured
            Log::displayError "Command ${SCRIPT_NAME} - Argument - too much arguments provided: $*"
            return 1
          fi

        fi
        if ((incrementArg == 1)); then
          ((++options_parse_parsedArgIndex))
        fi
        ;;
    esac
    shift || true
  done || return $?

  commandOptionParseFinished

}

# @description display command options and arguments help for ShellBashDefaultConfigCommand
ShellBashDefaultConfigCommandHelp() {
  echo -e "${__HELP_TITLE_COLOR}SYNOPSIS:${__RESET_COLOR}"
  helpDescriptionFunction


  # ------------------------------------------
  # usage section
  # ------------------------------------------
  Array::wrap2 " " 80 2 "${__HELP_TITLE_COLOR}USAGE:${__RESET_COLOR}" "ShellBashDefaultConfig [OPTIONS] [ARGUMENTS]"
  echo
  # ------------------------------------------
  # usage/options section
  # ------------------------------------------
  optionsAltList=("[--skip-config|--skip-configure|--skip-configuration|-sc]" "[--skip-install|--skip-installation|-si]" "[--skip-test|--skip-tests|-st]" "[--skip-deps|--skip-dependencies|-sd]" "[--prepare-export|-e]" "[--profile|-p <profile>]" "[--help|-h]" "[--config]" "[--bash-framework-config <bash-framework-config>]" "[--verbose|-v]" "[-vv]" "[-vvv]" "[--log-level <log-level>]" "[--log-file <log-file>]" "[--display-level <display-level>]" "[--no-color]" "[--theme <theme>]" "[--version]" "[--quiet|-q]"
  )
  Array::wrap2 " " 80 2 "${__HELP_TITLE_COLOR}USAGE:${__RESET_COLOR}" \
    "ShellBashDefaultConfig" "${optionsAltList[@]}"
  echo

  # ------------------------------------------
  # usage/arguments section
  # ------------------------------------------
  echo
  echo -e "${__HELP_TITLE_COLOR}ARGUMENTS:${__RESET_COLOR}"

  Array::wrap2 " " 80 2 "  [${__HELP_OPTION_COLOR}command${__HELP_NORMAL} {single}]"
  Array::wrap2 ' ' 76 4 "    " "The command to run on this install script."
  echo

  echo "    Possible values:"
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}isInterfaceImplemented:${__RESET_COLOR} Check if all commands below are available"
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}helpDescription:${__RESET_COLOR} Show help description of this install script."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}scriptName:${__RESET_COLOR} Show the internal name of this install script."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}dependencies:${__RESET_COLOR} Show this install scripts's dependencies."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}listVariables:${__RESET_COLOR} Show the variables needed to execute this
  install script."
  echo
  Array::wrap2 ' ' 76 8 "      - ${__OPTION_COLOR}fortunes:${__RESET_COLOR} Show the fortunes sentences that this
  install script can generate."
  echo
  echo -e "      - ${__OPTION_COLOR}helpVariables${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}defaultVariables${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}checkVariables${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}breakOnConfigFailure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}breakOnTestFailure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isInstallImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}install${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isTestInstallImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}testInstall${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isConfigureImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}configure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isTestConfigureImplemented${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}testConfigure${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}isCleanBeforeExportImplemented${__RESET_COLOR}"


  Array::wrap2 ' ' 76 6 "    Default value: " "install"
  echo

  # ------------------------------------------
  # options section
  # ------------------------------------------
  echo
  echo -e "${__HELP_TITLE_COLOR}SKIP OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--skip-config${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-configure${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-configuration${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-sc${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Skip software configuration."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--skip-install${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-installation${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-si${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Skip software installation."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--skip-test${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-tests${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-st${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Skip software installation test."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--skip-deps${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}--skip-dependencies${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-sd${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Install the software requested without resolving dependencies."
  echo

  echo
  echo -e "${__HELP_TITLE_COLOR}EXPORT OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--prepare-export${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-e${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "prepare the wsl installation for export (remove all sensitive files)"
  echo

  echo
  echo -e "${__HELP_TITLE_COLOR}INSTALL OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--profile${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-p <profile>${__HELP_NORMAL} {single}"
  profileHelpFunction


  echo
  echo -e "${__HELP_TITLE_COLOR}GLOBAL OPTIONS:${__RESET_COLOR}"
  echo -e "  ${__HELP_OPTION_COLOR}--help${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-h${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Displays this command help"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--config${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Displays configuration"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--bash-framework-config <bash-framework-config>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Use alternate bash framework configuration."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--verbose${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-v${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Info level verbose mode (alias of --display-level INFO)"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}-vv${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Debug level verbose mode (alias of --display-level DEBUG)"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}-vvv${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Trace level verbose mode (alias of --display-level TRACE)"
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--log-level <log-level>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Set log level"
  echo

  echo "    Possible values: "
  echo -e "      - ${__OPTION_COLOR}OFF${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERROR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARN${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARNING${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}INFO${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}DEBUG${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}TRACE${__RESET_COLOR}"

  Array::wrap2 ' ' 76 6 "    Default value: " "$(optionLogLevelDefaultValueFunction)"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--log-file <log-file>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Set log file"
  echo


  Array::wrap2 ' ' 76 6 "    Default value: " "$(optionLogFileDefaultValueFunction)"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--display-level <display-level>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Set display level"
  echo

  echo "    Possible values: "
  echo -e "      - ${__OPTION_COLOR}OFF${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}ERROR${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARN${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}WARNING${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}INFO${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}DEBUG${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}TRACE${__RESET_COLOR}"

  Array::wrap2 ' ' 76 6 "    Default value: " "$(optionDisplayLevelDefaultValueFunction)"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--no-color${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Produce monochrome output. alias of --theme noColor."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--theme <theme>${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Choose color theme - default-force means colors will be produced even if command is piped."
  echo

  echo "    Possible values: "
  echo -e "      - ${__OPTION_COLOR}default${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}default-force${__RESET_COLOR}"
  echo -e "      - ${__OPTION_COLOR}noColor${__RESET_COLOR}"

  Array::wrap2 ' ' 76 6 "    Default value: " "default"
  echo

  echo -e "  ${__HELP_OPTION_COLOR}--version${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Print version information and quit."
  echo


  echo -e "  ${__HELP_OPTION_COLOR}--quiet${__HELP_NORMAL}, ${__HELP_OPTION_COLOR}-q${__HELP_NORMAL} {single}"
  Array::wrap2 ' ' 76 4 "    " "Quiet mode, doesn't display any output."
  echo

  # ------------------------------------------
  # longDescription section
  # ------------------------------------------
  echo
  echo
  echo -e "${__HELP_TITLE_COLOR}DESCRIPTION:${__RESET_COLOR}"
  helpLongDescriptionFunction
  # ------------------------------------------
  # version section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}VERSION: ${__RESET_COLOR}"
  echo "3.0"
  # ------------------------------------------
  # author section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}AUTHOR: ${__RESET_COLOR}"
  echo "[François Chastanet](https://github.com/fchastanet)"
  # ------------------------------------------
  # sourceFile section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}SOURCE FILE: ${__RESET_COLOR}"
  echo "https://github.com/fchastanet/bash-dev-env/tree/master/src/_installScripts/_Configs/ShellBashDefaultConfig-binary.yaml"
  # ------------------------------------------
  # license section
  # ------------------------------------------
  echo
  echo -n -e "${__HELP_TITLE_COLOR}LICENSE: ${__RESET_COLOR}"
  echo "MIT License"
  # ------------------------------------------
  # copyright section
  # ------------------------------------------
  Array::wrap2 ' ' 76 0 "$(copyrightCallback)"
}


beforeParseCallback

ShellBashDefaultConfigCommandParse "$@"
MAIN_FUNCTION_NAME="main"
main() {

afterParseCallback
InstallScripts::command

}

# if file is sourced avoid calling main function
# shellcheck disable=SC2178
BASH_SOURCE=".$0" # cannot be changed in bash
# shellcheck disable=SC2128
if test ".$0" == ".${BASH_SOURCE}"; then
  if [[ "${BASH_FRAMEWORK_QUIET_MODE:-0}" = "1" ]]; then
    main "$@" &>/dev/null
  else
    main "$@"
  fi
fi
