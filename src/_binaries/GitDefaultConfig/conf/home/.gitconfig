[user]
  name = Fran√ßois Chastanet
  email = fchastanet@chastanet.com

[core]
  eol = lf
  autocrlf = input
  excludesFile = ~/.bash-dev-env/GitDefaultConfig/gitignore
  # Don't consider trailing space change as a cause for merge conflicts
  whitespace = -trailing-space
[init]
  defaultBranch = master
  templatedir = ~/.bash-dev-env/GitDefaultConfig/pre-commit-template

[commit]
  cleanup = scissors

[color]
  # Enable colors in color-supporting terminals
  ui = auto

[gc]

[push]
  default = current
  # https://git-scm.com/docs/git-push#Documentation/git-push.txt---follow-tags
  followTags = true

[pull]
  ff = only
  rebase = true

[diff]
  tool = vscode

[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

#[url "git@github.com:"]
# insteadOf = https://github.com/

[status]
  # Display submodule rev change summaries in status
  submoduleSummary = true
  # Recursively traverse untracked directories to display all contents
  showUntrackedFiles = all

[tag]
  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
  sort = version:refname

# [rerere]
  # To be tested, automatic conflict resolution based on previous ones
  # autoupdate = true
  # enabled = true

# @see https://www.durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
[alias]
# List all git aliases
alias = "!git config -l | grep alias | cut -c 7-"

co = checkout
cob = checkout -b
st = status
dt = difftool -d
master = !git checkout master && git pull origin
undoLastNotPushedCommit = reset --soft HEAD~

# Remove the file from repository but keeping it as unstaged
rm-keep = rm --cached

# List commits in short form, with colors and branch/tag annotations
ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

# List commits showing changed files
ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

# List one-line commits showing relative dates:
ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

# get logs since my last commit
lg = "!me=$(git config --get user.name); \
    git log --since $(git log --pretty=format:'%ct' --author \"$me\" -1)"

# get my last commits
my-logs = "!me=$(git config --get user.name); \
    git log --author=\"$me\""

# get all modifications from the given branch losing all commits history
# can be useful to recreate a branch from scratch
merge-no-history = ! "f() { git checkout $1 -- . ;}; f"

# get all merges into current branch comparing to master
log-merges-into-current-branch = log master..HEAD --ancestry-path --merges  --oneline

# get first commit of a branch comparing to master
log-get-first-commit-of-current-branch = !git log master..HEAD --oneline | tail -1

# get list of branches containing a file
list-branches-containing-file = "!f() { git log --all --source -- $1 | grep -o 'refs/.*' | sort -u ; }; f; unset f;"

# https://stackoverflow.com/a/43585658/3045926
# or use git show-branch
reverse-tree = 'log --graph --decorate --simplify-by-decoration --oneline'

set-remote-branch = '!f() {git branch --set-upstream-to="origin/$(git branch --show-current)" "$(git branch --show-current)"; }; f; unset f;'

remove-local-branches-gone = ! git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D

move-tag = '!f() { local tag="$1"; git tag "${tag}" --delete; git push origin --delete "${tag}"; git tag "${tag}" --force; git push --force-with-lease --no-verify --tags; }'

git-safely-remove-local-branch='!f() { local branch="$1"; git tag "${branch}" "${branch}" && git branch -D "${branch}"; }; f; unset f;'

git-list-branches-for-commit='!f(local commit="$1"; git branch -a --contains "${commit}";) {}; f; unset f'
