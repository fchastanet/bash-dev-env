#!/usr/bin/env bash

CURRENT_PROJECT_DIR="$1"
shift
# "git rev-parse --abbrev-ref HEAD" gets the current branch name
# Actually we replaced "git rev-parse" by "git branch --show-current"
# because "git rev-parse" does not work when there is no commit on the branch yet
# Note: on detached HEAD, git branch --show-current returns an empty string
declare branchName
branchName="$(cd "${CURRENT_PROJECT_DIR}" && git branch --show-current)"

# Check that the branch is compliant with our pattern feature/BASH-123 or fix/DEVENV-456"
# If the branchName do not match the format, return
if [[ ! ${branchName} =~ ^(feature|fix)\/(([A-Z]+)-[0-9]+) ]]; then
  exit 0
fi

declare artifactId="${BASH_REMATCH[2]}"
declare prefix="[${artifactId}]"

# parameter $1 is .git/COMMIT_EDITMSG file
declare commitMsgFile="${CURRENT_PROJECT_DIR}/$1"
declare firstCommitLine
head -1 "${commitMsgFile}" | sed 's/^[ \t]*//;s/[ \t]*$//'
firstCommitLine="$(head -1 "${commitMsgFile}" | sed 's/^[ \t]*//;s/[ \t]*$//')"
declare nextCommitLines
nextCommitLines="$(tail -n +2 "${commitMsgFile}")"

# If the commit message is empty, return. We don't want to auto-prefix an empty message.
if [[ -z "${firstCommitLine}" ]]; then
  echo "[commit-msg hook] Commit message is empty. No replacement"
  exit 0
fi

# If the first char is a '[', don't try to prefix the commit message
if [[ "${firstCommitLine:0:1}" = "[" ]]; then
  echo '[commit-msg hook] Commit message already starts with "[". No replacement.'
  exit 0
fi

# Let's modify the first line to add our prefix
# Rewrite the commit message file
printf "%s %s" "${prefix}" "${firstCommitLine}" >"${commitMsgFile}"

if [[ -n "${nextCommitLines}" ]]; then
  printf "\n%s" "${nextCommitLines}" >>"${commitMsgFile}"
fi
