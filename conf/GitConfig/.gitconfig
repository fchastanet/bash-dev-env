[core]
  eol = lf
  autocrlf = input

[gc]

[include]
    path = ~/.bash-tools/.gitconfig

# @see https://www.durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
[alias]
  # List all git aliases
  alias = "!git config -l | grep alias | cut -c 7-"

  cm = commit -m
  co = checkout
  cob = checkout -b
  st = status
  br = branch
  brd = branch -d
  brD = branch -D
  master = !git checkout master && git pull origin
  plo = pull origin
  undoLastNotPushedCommit = reset --soft HEAD~

  # Remove the file from repository but keeping it as unstaged
  rm-keep = rm --cached

  # List commits in short form, with colors and branch/tag annotations
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

  # List commits showing changed files
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

  # List one-line commits showing relative dates:
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

  # get all modifications form the given branch losing all commits history
  # can be useful to recreate a branch from scratch
  merge-no-history = ! "f() { git checkout $1 -- . ; }; f"

  # get all merges into current branch comparing to master
  log-merges-into-current-branch = log master..HEAD --ancestry-path --merges  --oneline

  # get first commit of a branch comparing to master
  log-get-first-commit-of-current-branch = !git log master..HEAD --oneline | tail -1

  # get list of branches containing a file
  list-branches-containing-file = "!f() { git log --all --source -- $1 | grep -o 'refs/.*' | sort -u ; }; f"

  # get logs since my last commit
  lg = "!me=$(git config --get user.name); \
      git log --since $(git log --pretty=format:'%ct' --author \"$me\" -1)"
  # get my last commits
  my-logs = "!me=$(git config --get user.name); \
      git log --author=\"$me\""

  remove-local-branches-gone = ! git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D

  list-local-branches-verbose = !git remote prune origin && git branch -vv
  list-local-branches-not-pushed = !git log --branches --not --remotes --no-walk --decorate --oneline
  prune-gone-branches = !git remote prune origin && git branch -vv | cut -c 3- | grep ': gone]' | awk '{print $1}' | xargs -r git branch -d
  prune-gone-branches-force = !git remote prune origin && git branch -vv | cut -c 3- | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D


[push]
  default = current

[pull]
	ff = only
